{"config":{
  "lang":["en"],
  "prebuild_index":false,
  "separator":"[\\s\\-]+"
},
"docs":[
{
"location": "/about.html",
"lang": "en",
"title": "About",
"content": "\n\n\n\nLibreMesh is a community and an open project, so anyone friendly is welcome.\nWe encourage anyone using the LibreMesh to become part of this community.\nThe software is maintained by some of its founders together with a wide community.\n\n\nTable 1. List of LibreMesh founders\n\n\n\n\n\n\nName\nContact\n\n\n\n\nGioacchino Mazzurco\ngio[at]eigenlab[dot]org\n\n\nGui\n-\n\n\nNico\n-\n\n\nPau\np4u[at]dabax[dot]net\n\n\n\n\n\n\n\nFigure 1. List of contributors to LibreMesh development, detailed list available at this link.\n\n\nDonations\n\n\nDonations to the project are managed via OpenCollective, thanks!\n\n\n\n\n\n\n\n"}
,{
"location": "/communication.html",
"lang": "en",
"title": "Communication",
"content": "\nMailing Lists\n\n\nThe project communicate on the following mailing list\n\n\n\n\nlibremesh at krutt.org -\nThis list is used for project organisational purposes, user support, and development discussions. Any language is welcome.\n\n\n\n\n\n\nChatroom\n\n\nThe chatroom can be accessed through Element app, desktop software or web client (click here for checking out these chat clients) and entering the libremesh-dev:matrix.guifi.net chatroom. To write in the chatroom you&#8217;ll need to register a user on any of the Matrix nodes (the default on element.io will also work). Other options for connecting can be found /#libremesh-dev:matrix.guifi.net\">clicking here.\n\n\n\n\nOnline meetings\n\n\nWe decided to meet the \"first Saturday of the month, every two months\", with additional meetings in weekdays, so:\n\n\n\n\nWednesday the 1st of November 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 2th of December 2023 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nThursday 4th of January 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 3rd of February 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 6th of April 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 1st of June 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nWednesday the 5th of June 2024 at 13:00 UTC (15:00 CEST, 10:00 ART)\n\n\nMonday the 24th of June 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 3rd of August 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nWednesday the 11th of September 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nSaturday the 5th of October 2024 at 13:00 UTC (15:00 CEST, 10:00 ART).\n\n\nFriday the 1st of November 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\nSaturday the 7th of Dicember 2024 at 13:00 UTC (14:00 CET, 10:00 ART).\n\n\n\n\nYou can freely partecipate as listener, but.. the link of the meeting pass in chat and via mailinglist just at the end of the month before.\n\n\nYou can also add topics at the meeting, but we prefer that inform us before brings them.\n\n\nDuring the meetings we use this format:\n\n\n\n\nwe prefer have a list of the topics to discuss before the meeting,\n\n\nwe do report for the people that can&#8217;t be present in the assembly,\n\n\nwe use a pad for a collaborative reporting of discussion and decisions,\n\n\nwe take the time of the speakers to not have unique long speeches\n\n\nwe decide at the begin of every meeting the languages that we use, so sometimes our assembly are in different languages because people understand more than what they speak (italoportish) and sometimes we use english.\n\n\nwe not decide for majority and for do-cracy, we try to reach consensus and we are friendly in the conversations, but to be honest we are not already established a written \"decision making workflow\".\n\n\n\n\n"}
,{
"location": "/development-kernel_vermagic.html",
"lang": "en",
"title": "Kernel vermagic",
"content": "\nCompiling firmware compatible with OpenWrt repository Kernel vermagic\n\n\nReference\n\n\nThis page is an optional expansion to the normal compilation procedure suggested in the development page and is an expansion of this explorative email.\nBeware that these additional steps result in a more time and disk space consuming compilation.\n\n\n\n\nThe problem\n\n\nOpenWrt offers the amazing possibility to add more software to the firmware both at compilation time or subsequently.\nThe former possibility always works: if you can, always select the packages you need in the menuconfig at compilation time.\nThe latter possibility can show some compatibility issues between the custom installed image and the packages available on OpenWrt repositories, and that&#8217;s what this page tries to fix.\n\n\nThis compatibility issue arises just with packages depending on some kernel module, for example the tc package. These packages require a specific kernel version to be present. And in OpenWrt the kernel version includes the hash of the configuration used for compiling it, which is a part of the general compilation configuration, so that the kernel version will include a vermagic which looks like:\n\n\n\n# opkg info kernel\nVersion: 4.14.195-1-b84a5a29b1d5ae1dc33ccf9ba292ca1d\n\n\n\nSo, in order to be able to install some specific packages using OPKG, you need to have compiled the kernel exactly in the same way as the one used in the official OpenWrt repositories.\n\n\n\n\nGeneric instructions\n\n\nThese are the minimal instructions to follow, check in the section below whether additional selections are needed for the target/subtarget of your device.\n\n\nIn the menuconfig, at LibreMesh compilation time:\n\n\n\n\nSelect: Advanced configuration options\n\n\nSelect: Global build settings &#8594; Select all kernel module packages by default\n\n\nDeselect: Global build settings &#8594; Kernel build options &#8594; Compile the kernel with symbol table information\n\n\nFill with builder: Global build settings &#8594; Kernel build options &#8594; Custom Kernel Build User Name\n\n\nFill with buildhost: Global build settings &#8594; Kernel build options &#8594; Custom Kernel Build Domain Name\n\n\n\n\nthen check if your device requires additional selections in the following table and finally continue with the normal procedure.\n\n\n\n\nAdditional target/subtarget specific selections\n\n\nMake sure to do all the 5 selections/deselections/filling listed in the previous section.\nIf you don&#8217;t know the target and subtarget of your router, check out OpenWrt table of hardware.\n\n\nTable 1. Additional steps to perform in the menuconfig for specific subtargets\n\n\n\n\n\n\n\nTarget\nSubtarget\nAdditional things to select\n\n\n\n\nAtheros ATH79 (DTS)\nGeneric\n&#8201;&#8212;&#8201;\n\n\nMediaTek Ralink MIPS\nMT7620 based boards\n&#8201;&#8212;&#8201;\n\n\nMediaTek Ralink MIPS\nMT7621 based boards\n&#8201;&#8212;&#8201;\n\n\nAtheros AR7xxx/AR9xxx (ar71xx)\nGeneric\n&#8201;&#8212;&#8201;\n\n\nx86\nx86_64\n&#8201;&#8212;&#8201;\n\n\n\n\n\n\nMy target/subtarget is not present in the table\n\n\nFirst, make sure that the \"Generic instructions\" aren&#8217;t enough!\nIf after compiling and flashing an image following the \"Generic instructions\" you still get errors like:\n\n\n\n# opkg install tc\n&gt;&gt;&gt;&gt; Collected errors:\n&gt;&gt;&gt;&gt;  * satisfy_dependencies_for: Cannot satisfy the following dependencies\n&gt;&gt;&gt;&gt; for tc:\n&gt;&gt;&gt;&gt;  * \tkernel (= 4.9.214-1-2b8f9dfe583e5c09aadd9474da55137f)\n&gt;&gt;&gt;&gt;  * opkg_install_cmd: Cannot install package tc.\n\n\n\nyou can try to find out which kernel modules you&#8217;re missing (you don&#8217;t actually need them, it&#8217;s just for having the kernel version matching exactly the one required by the packages on OpenWrt repositories) following this procedure:\n\n\n\n\ncheck the kernel version you need, included the vermagic hash, this can be found in various ways, for example in the kmods subdirectory (in the downloads.openwrt.org website) at the bottom of the web page where you would download the OpenWrt images. This page is specific for the OpenWrt version you&#8217;re using, the target and the subtarget: the complete URL would be something like: https://downloads.openwrt.org/releases/\\[release_version\\]/targets/[target_system]/[subtarget]/kmods and this will contain another subdirectory named as the complete kernel version. For example, for OpenWrt19.07.10/ATH79/generic you can find it here;\n\n\ndownload the config.buildinfo file for the target/subtarget of your device, you can find it in the same directory from where you download the official OpenWrt images, at the bottom of the page. The complete direction is something like: https://downloads.openwrt.org/releases/\\[release_version\\]/targets/[target_system]/[subtarget]/config.buildinfo for example, for OpenWrt19.07.10/ATH79/generic you can find it here;\n\n\nmake a backup copy of the original config.buildinfo;\n\n\nmodify the config.buildinfo file removing some lines;\n\nDo not remove the following lines:\n\n\n\nCONFIG_TARGET_name_of_wanted_target=y\nCONFIG_ALL_KMODS=y\nCONFIG_DEVEL=y\n# CONFIG_KERNEL_KALLSYMS is not set\nCONFIG_KERNEL_BUILD_DOMAIN=\"buildhost\"\nCONFIG_KERNEL_BUILD_USER=\"builder\"\n\n\n\nneither the CONFIG_KERNEL_KALLSYMS one which is needed even if it is commented out. All these options are the ones mentioned in the \"General instructions\" above.\n\n\n\nCopy it into your OpenWrt buildroot compilation directory and rename the copy as .config (overwrite if necessary) which is the hidden file containing the configuration for the compilation, which will get modified from menuconfig.\n\n\nRun make defconfig to generate the rest of the .config file (you can do the same using make menuconfig).\n\n\nRun make target/linux/compile to compile the minimum amount of stuff needed to obtain the kernel vermagic hash (even if the compilation got an error and did not reach completion).\n\n\nCheck the kernel vermagic which will be in a file in your OpenWrt buildroot like this: ./build_dir/target-mips_24kc_musl/linux-ath79_generic/linux-4.14.195/.vermagic you can try with the command:\n\n\ncat ./build_dir/target-*/linux-*/linux-*/.vermagic\n\n\n\n\nIf the string matches the kernel vermagic hash from point 1, good! Otherwise, repeat from point 4 removing more lines, compiling again and checking again if the hash matches.\n\n\nThe minimum set of lines needed to have a matching hash are enough, but if you want to take it down to the single kernel configuration you can check which lines appears in the ./build_dir/target-mips_24kc_musl/linux-ath79_generic/linux-4.14.195/.config.set file (adapt the path to your target) due to the new content of the .config file.\n\n\nConfirm that this works compiling a full image (continuing with the compilation guide), flashing it on your device and installing some package depending on a kernel module (e.g. the tc package) using opkg install command.\n\n\nIf you had to keep the lines of some profiles (devices) in order to obtain the good vermagic, please check which kernel modules they depend upon, you can find this information in the menuconfig using the \"Help\" function when you are on the selected profile: all the packages starting with kmod- are kernel modules, most of them are selected by default but there will be some that are not. Note them down and check which are not selected when running the menuconfig after deleting the .config file.\n\n\nIf you go through all of this craziness, please report to this page your discoveries! You can file a pull request on the website repository using the \"Edit this page\" button at the top right of this page or contacting us. Thanks!\n\n\n\n\n"}
,{
"location": "/development-network_profiles.html",
"lang": "en",
"title": "Network Profiles",
"content": "\nWhat is a Network Profile?\n\n\nNetwork profiles are the most convenient way for a community to organize its configuration files. During the compilation process, the users can select the desired network profile, which will automatically select all the needed software and include the configuration files for this community.\n\n\nThey are organized in folders with some content in the network-profiles repository.\n\n\n\n\nHow to create a Network Profile\n\n\nPractically, each community can create a folder in the network-profiles repository with the community&#8217;s name, and, inside this, create one or more profiles (for example you can have different profiles for nodes of the backbone or for access points, or for nodes with large or small flash or RAM memory).\n\n\nYou will need to create a Github user, fork the network-profiles repository, clone your fork on a computer, create the directories, create a Makefile (see below), add some content in the root/ folder (see below), commit the changes, push them to your forked repository and finally open a pull request from your repository to the official network-profiles one.\n\n\nCloning your fork\n\nHere we will skip the explanation on most of the git and Github-related steps, please search on the internet how to perform them or ask us on the project&#8217;s communication channels.\n\n\nOnce you forked the network-profiles repository with your user, clone your fork:\n\n\n\ngit clone git@github.com:your_username/network-profiles.git\n\n\n\n\nCreating the directories\n\nEach community will have to create its directory.\n\n\n\ncd network-profiles\nmkdir MyMesh.iscool\n\n\n\nAnd inside that directory, you&#8217;ll have to create a directory for each different profile you want to have. Most communities will have only one profile.\n\n\n\ncd MyMesh.iscool\nmkdir standard\nmkdir lowmem\nmkdir gateway\n\n\n\n\nCreating a Makefile\n\nThe Network Profiles get converted to packages which, as mentioned above, will include some files but can also select some new software to be installed as a dependency. In order to compile them as packages, a Makefile is needed.\n\n\nIn the Makefile you can indicate a description and include a list of the dependencies, which are the packages that gets selected by selecting your network-profile.\n\n\nThe Makefile for the network-profiles repository has to be inside the profile directory, for example network-profiles/MyMesh.iscool/standard/Makefile, and it will look like this:\n\n\n\ninclude $(TOPDIR)/rules.mk\n\nPROFILE_DESCRIPTION:=Standard profile for MyMesh community\nPROFILE_DEPENDS:=+lime-proto-babeld +lime-proto-batadv +lime-proto-anygw\n\ninclude ../../profile.mk\n\n# call BuildPackage - OpenWrt buildroot signature\n\n\n\nand the lines you should customize are only the PROFILE_DESCRIPTION and PROFILE_DEPENDS ones. In the list of the PROFILE_DEPENDS, please note that each package&#8217;s name is preceeded by a +. There is no need to specify the lime-system package as it is already included.\n\n\n\nAdding files to the \"root\" folder\n\nFor including custom files in the compiled image, you can create a root/ folder in the profile folder, for example network-profiles/MyMesh.iscool/standard/root/. In this directory, you will have to create the folders structure and the files you want to have in the compiled firmware.\n\n\nWhat is always interesting to include, is a lime-community file, which is the file containing the configuration options for your community. This file will need to appear in the firmware image in the /etc/config/lime-community, so that you will need to create it here in network-profiles/MyMesh.iscool/standard/root/etc/config/lime-community.\n\n\nThe options that are not set in the lime-community file, are taken from the lime-defaults one. For more information on this, please read the documentation on the website.\n\n\n\nAlternative to the usage of Network Profiles\n\nUsing a network profile is a convenient way to share the files over the internet with all the other members of your community; but it can be exhaggerated if you just want to test adding a file from time to time.\n\n\nIn the buildroot (which is the system that you can use for compiling LibreMesh as described in the development page) you can create a directory named files, and the content of this directory will, in the final LibreMesh image, overwrite every file with the same path and name, including the ones from the selected Network Profile.\n\n\nFor example:\n\n\n\ncd openwrt\nmkdir files\nrsync -aPh --delete ~/network-profiles/valsamoggia.ninux.org/vs-ninux-generic/root/ files/\n\n\n\n\n"}
,{
"location": "/development.html",
"lang": "en",
"title": "Development",
"content": "\nThe Source Code\n\n\nThe code is stored inside a git tree which contains all branches and releases.\n\n\nAll repositories can be browsed online through\nGitHub.\n\n\nMost of the development happens in the lime-packages git repository which can be browsed on GitHub or downloaded using git:\n\n\n\ngit clone https://github.com/libremesh/lime-packages.git\ncd lime-packages\n\n\n\n\n\nCompiling LibreMesh from source code\n\n\nThis procedure has been tested on GNU/Linux, on other systems it could require some modifications or it can be run in a Linux virtual machine. Generally, the first compilation takes a few hours and requires at least 10 GB of disk space.\n\n\nFirst of all you need to install a few packages to your system.\nBuilding OpenWrt requires a bunch of installed software.\n\n\nIf you are unsure about your system having all the dependencies installed, you can just go on with the OpenWrt compilation (see below) and, if it fails, check out the error messages.\n\n\nOn an Ubuntu system, the following command will install the minimum compilation dependencies:\n\n\n\nsudo apt update\nsudo apt install --no-install-recommends git ca-certificates subversion wget make gcc g++ libncurses5-dev gawk unzip file patch python3-distutils python3-minimal python2-minimal libpython2-stdlib\n\n\n\nFor other Linux distributions the packets list could be slightly different, check out the OpenWrt build system installation page.\n\n\nThen you need to get the OpenWrt source code.\nMake sure to git clone the source code as normal user (i.e. do not use root): the compilation will refuse to run if the administrator user root is being used.\n\n\nDownload OpenWrt source code\nLibreMesh can be built on top of various OpenWrt versions. We officially support the compilation with OpenWrt Old Stable (19.07.10) versions (LibreMesh still have to be adapted to work with the latest OpenWrt 21.02 version).\n\n\nFor compiling LibreMesh on top of the Old Stable version of OpenWrt:\n\n\n\ngit clone -b v19.07.10 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nEnter OpenWrt build root\n\ncd openwrt\n\n\n\nTake default OpenWrt repositories feeds\n\ncp feeds.conf.default feeds.conf\n\n\n\nAnd add LibreMesh repositories to the OpenWrt feeds\n\ncat &lt;&lt; EOF &gt;&gt; feeds.conf\n\nsrc-git libremesh https://github.com/libremesh/lime-packages.git;v2020.4\nsrc-git profiles https://github.com/libremesh/network-profiles.git\nEOF\n\n\n\nWith the lines above, you will compile the LibreMesh 2020.4 release. This is indicated by the ;v2020.4 suffix. Without this suffix, the master branch would be used, but the master branch is not compatible with OpenWrt 19.07. Instead, it is being developed for supporting OpenWrt 22.03.\n\n\nUpdate the packages from the feeds\n\nscripts/feeds update -a\nscripts/feeds install -a\n\n\n\nRun the configuration menu\n\nmake menuconfig\n\n\n\nCheck out the target (e.g. ATH79), subtarget (e.g. generic) and profile (e.g. tl-wdr3600-v1) of your router on OpenWrt table of hardware.\n\n\nSelect the Target System, Subtarget and Target Profile accordingly.\n\n\nDeselect erroneous feeds locations:\n\n\n\n\nImage configuration → Separate feed repositories → Enable feed libremesh\n\n\nImage configuration → Separate feed repositories → Enable feed profiles\n\n\n\n\nDeselect problematic packages:\n\n\n\n\nBase system &#8594; dnsmasq\n\n\nNetwork &#8594; odhcpd-ipv6only\n\n\n\n\nOptionally, deselect unused packages:\n- Network &#8594; ppp\n\n\nIf you local community has a profile in the network-profiles repository, you can select it in:\n\n\n\n\nLibreMesh &#8594; network-profile &#8594; profile-your_community-your_profile\n\n\n\n\n\n\n\n\n\n\n\nNetwork profiles are the specific configuration from the communities, and are stored in this collective\nrepository, but they can also be kept locally, depending on how every community network manages itself. For more instructions on how to create a profile or how to use a local one, check out the network profiles page.\n\n\n\n\n\n\nSelect (press space until when an asterisk appears, like &lt;*&gt;) LibreMesh packages:\n\n\n\n\nLibreMesh (or LiMe) → Offline Documentation → lime-docs-minimal (LibreMesh minimal documentation)\n\n\nLibreMesh (or LiMe) → lime-app (LibreMeshApp)\n\n\nLibreMesh (or LiMe) → lime-hwd-openwrt-wan (Respect openwrt wan interface as default)\n\n\nLibreMesh (or LiMe) → lime-proto-anygw (LibreMesh anygw proto support)\n\n\nLibreMesh (or LiMe) → lime-proto-babeld (LibreMesh babeld proto support)\n\n\nLibreMesh (or LiMe) → lime-proto-batadv (LibreMesh batman-adv proto support)\n\n\nLibreMesh (or LiMe) → shared-state\n\n\n\nshared-state-babeld_hosts (babeld-hosts module for shared-state)\n\n\nshared-state-bat_hosts (bat-hosts module for shared-state)\n\n\nshared-state-nodes_and_links (nodes_and_links module for shared-state)\n\n\n\n\n\nUtilities &#8594; babeld-auto-gw-mode\n\n\nNetwork &#8594; batctl-default (B.A.T.M.A.N. Advanced user space configuration tool)\n\n\n\n\n\n\n\n\n\n\n\nIf after the compilation you don&#8217;t see the compiled image in the bin/targets/&#8230;&#8203;/&#8230;&#8203;/ folder, it is possible that your router has such a small flash memory that the aforementioed packages don&#8217;t fit in it (it can happen with routers having 4 MB of flash memory, check this on the OpenWrt Table of Hardware, or when selecting huge packages to be included). In this case, you can remove the .config generated packages list and repeat the packages selection without including lime-app. If the compiled image is still too large, try selecting only lime-proto-anygw, lime-proto-batadv and lime-proto-babeld or following this guide.\n\n\n\n\n\n\nSome more packages are recommended but not mandatory for a working LibreMesh network. Consider avoiding to select the following packages only if the created image is too large and does not fit in the router memory.\n\n\n\n\nLibreMesh (or LiMe) &#8594; check-date-http (Keep local date under NTP too far away skew)\n\n\nLibreMesh (or LiMe) &#8594; Offline Documentation &#8594; lime-docs (LibreMesh full documentation)\n\n\nLibreMesh (or LiMe) &#8594; lime-hwd-ground-routing (Manage 802.1q VLANs for ground routing)\n\n\nLibreMesh (or LiMe) &#8594; lime-debug (libremesh debug utils)\n\n\n\n\nAdditionally and optionally, httpS for the web interface can be enabled selecting (beware that the web interace will be shown as not trusted):\n\n\n\n\nLibraries &#8594; libustream-wolfssl\n\n\nUtilities &#8594; Encryption &#8594; px5g-standalone\n\n\n\n\nFinally, also the 802.11s mesh connections can be password protected, this will require a specific configuration and this package to be selected:\n\n\n\n\nNetwork &#8594; wpad-mesh-wolfssl\n\n\n\n\nand this to be de-selected:\n\n\n\n\nNetwork &#8594; wpad-basic\n\n\n\n\n\n\n\n\n\n\n\nDue to a known bug, can happen that wpad-mesh-wolfssl gets automatically deselected. Each time you use menuconfig, please check if wpad-mesh-wolfssl is still selected.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn order to have additional packages, the easiest way is to select them in menuconfig. More packages can be installed afterwards via opkg, but some of these require a specific kernel configuration to be in place. This can be achieved following these additional instructions dealing with kernel vermagic. Beware that this will increase noticeably the time and storage space required for the compilation.\n\n\n\n\n\n\nSave and exit.\n\n\nAt this stage there is the possibility to include custom files in the compiled firmware image. For this, you will have to create, inside the openwrt/ directory, a files/ directory containing the directory structure and files you want to add. For example, if you want to have a /etc/config/lime-community file you need to do the following:\n\n\n\nmkdir -p files/etc/config/\ntouch files/etc/config/lime-community\n\n\n\nand then edit the newly created lime-community file including your custom content. If a file from a package has the same name and path as a file in this directory, it will be overwritten. This is a quick way to include a custom configuration file, without the need to create an online network profile.\n\n\nFinally, compile the images\n\nmake -j$(nproc)\n\n\n\nIf everything goes well you should find the produced binaries inside the bin/ directory.\n\n\n\n\nSubmitting Patches\n\n\nWe accept pull requests via GitHub. But patches can also be submitted via the lime-dev mailing list.\n\n\n\n\nThe Web Presence\n\n\nThe pages you&#8217;re reading are generated from text files using the\nAsciiDoc suite plus Jekyll.\n\n\nAny changes made to the website repository will be reflected on our libremesh.org website.\n\n\nIn order to generate these pages locally:\n\n\n\ngit clone https://github.com/libremesh/libremesh.github.io.git\ncd libremesh.github.io &amp;&amp; bundle install\nbundle exec jekyll serve\n\n\n\nFor more details, check the README on Github.\n\n\nIf you would like to contribute to the documentation then please send patches to our mailing list or open a pull request on GitHub. An easy way to edit and file a pull request is clicking the \"Edit this page\" button at the top right of each page.\n\n\nPlease use the AsciiDoc syntax for contributions on the web page.\n\n\n"}
,{
"location": "/docs/en_change_wifi_behavior.html",
"lang": "en",
"title": "Change WiFi config",
"content": "\nLibreMesh interface-specific WiFi configuration\n\n\nIf no specific WiFi interface configuration is present, the general WiFi configuration section is used for all the interfaces.\n\n\nFor more information about the general LibreMesh config file options see The config file page.\n\n\nFor more examples and offline documentation check out /docs/lime-example.txt on the router or, still on the router, on http://thisnode.info/docs/lime-example.txt, or lime-example.txt file online.\n\n\n\n\nSpecific wireless interface configuration\n\n\nTo create an interface-specific configuration you must create a new wifi section named radioN, where N is the radio index (to see WiFi devices list execute: wifi status).\n\n\nIn the following example radio0 is used only for wireless client, radio1 is used only for Access Point with a custom ESSID name, and radio2 just for meshing.\n\n\nWiFi interface-specific options (override general option), multiple allowed\n\nconfig wifi radio0\n\tlist modes 'client'\n\toption channel 'auto'\n\toption client_ssid 'SomeWiFiNetwork'\n\toption client_key 'SomeWPApskPassword'\n\toption client_encryption 'psk2'\n\nconfig net wirelessclientWAN\n\toption linux_name 'wlan0-sta'\n\tlist protocols 'wan'\n\nconfig wifi radio1\n\tlist modes 'apname'\n\toption apname_ssid 'MyHouse'\n\nconfig wifi radio2\n\tlist modes 'ieee80211s'\n\toption ieee80211s_mesh_fwding '0'\n\toption ieee80211s_mesh_id 'LiMe'\n\n\n\nThe first section configures one radio interface to be only a wireless client (station associated to a wireless access point).\nThe second section configures the just created client interface for obtaining an IP from the access point DHCP server. The employed name wlan0-sta has to match the name of the interface created by the first section.\n\n\nThe specific-interface configuration sections must be appended in file /etc/config/lime-node in addition to the already existing generic configuration.\n\n\nIn the third section, radio1 is configured for just being an access point with custom ESSID name, each specified option overrides the respective general WiFi option (listed in The config file page), all the non-specified options (like distance or channel) are taken from the general wifi section.\nSpecifying an entry of a list, replaces the entire list (for example, setting the apname entry to the modes list means that for this interface, apname will be the only active mode).\n\n\nTo apply the changes run lime-config and reboot.\n\n\n\n\n\n\n\n\ninterface names\n\nIn the just reported example, radio0 has to exist (check with wifi status) and also wlan0-sta has to be created by the first section in order to be used in the second section (after running lime-config, check with ip link show).\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork interface specific options\n\nAvailable protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n\n\nNote that some of these protocols will require the relative lime-proto-&#8230;&#8203; package being installed, otherwise the protocol entry will be ignored.\n\n\nproto:vlan_number works too (something like bmx6:13 is supported). If VLAN is 0, no VLAN will be used.\n\n\nVLAN type defaults to 802.1ad, but it can be set to 80.1q adding another option proto:vlan_number:8021q.\n\n\nIf you use manual do not specify other protocols, may result in an unpredictable behavior/configuration.\n\n\n\n\n\n\n"}
,{
"location": "/docs/en_changing_network_behavior.html",
"lang": "en",
"title": "Change Ethernet config",
"content": "\nWAN port configuration\n\n\nThe recommended lime-hwd-openwrt-wan package detects the WAN port and configures it for getting connectivity to the internet.\n\n\nConnecting via SSH also from the WAN port\n\nIf the OpenWrt&#8217;s firewall is present, it will block incoming connections on the WAN port, for security reasons.\nIf you need to connect via SSH from the WAN port (likely from the internet), you can allow the incoming connection to the port 22 (the default port for SSH) adding these lines in /etc/config/firewall and rebooting your router:\n\n\n\nconfig rule\n\toption name 'Allow-SSH'\n\toption src 'wan'\n\toption proto 'tcp'\n\toption dest_port '22'\n\toption target 'ACCEPT'\n\n\n\n\nUsing the WAN port for connecting with another cloud\n\nWhen two neighboring LibreMesh networks want to interconnect without flooding each other with local broadcast traffic, they use two different WiFi access point names ap_name. But if they want to do the same via cable, they can do so with a WAN-WAN connection, connecting two border nodes via their WAN ports. This is absolutely not the intended use for a WAN port but works.\n\n\nImportant: if you have the OpenWrt firewall installed, you will need to allow all the incoming connections on the WAN port of both border routers. For doing this, edit the /etc/config/firewall file like this and reboot your routers:\n\n\n\nconfig zone\n\toption name\t\twan\n\tlist   network\t\t'wan'\n\tlist   network\t\t'wan6'\n\toption input\t\tREJECT --&gt; change to ACCEPT\n\toption output\t\tACCEPT\n\toption forward\t\tREJECT --&gt; change to ACCEPT\n\toption masq\t\t1\n\toption mtu_fix\t\t1\n\n\n\n\n\n\nLibreMesh interface-specific network configuration\n\n\nIf no interface-specific network configuration is present, the general network configuration section is used for all the interfaces.\n\n\nFor more information about the general LibreMesh config file options see The config file page.\n\n\nFor more examples and offline documentation check out /docs/lime-example.txt or http://thisnode.info/docs/lime-example.txt on the router or lime-example file online.\n\n\n\n\nSpecific ethernet interface configuration\n\n\nIf we want to change the default behavior of just one network interface of the many that are present in a router, we can define a specific configuration.\n\n\nPlease make sure to check out how OpenWrt names the physical ports of your router model, for this read the router page accessible from OpenWrt table of hardware.\n\n\nEthernet specific options, multiple allowed\n\nconfig net port5\n\toption linux_name 'eth1.5'\n\tlist protocols 'wan'\n\n\n\nIn this case the eth1.5 interface will be used as WAN (so the DHCP client will be enabled).\n\n\n\n\n\n\n\n\nconfig net\n\nDo not put any \".\" in the section name (e.g. port5).\n\n\nAs linux_name, use the actual name of the interface as the system shows (check with ip link show).\n\n\nSome of the available protocols require the relative package, for example lime-proto-wan, to be installed.\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork interface specific options\n\nAvailable protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n\n\nNote that some of these protocols will require the relative lime-proto-&#8230;&#8203; package being installed, otherwise the protocol entry will be ignored.\n\n\nproto:vlan_number works too (something like bmx6:13 is supported). If VLAN is 0, no VLAN will be used.\n\n\nVLAN type defaults to 802.1ad, but it can be set to 80.1q adding another option proto:vlan_number:8021q.\n\n\nIf you use manual do not specify other protocols, may result in an unpredictable behavior/configuration.\n\n\n\n\n\n\n\n\n\n\n\n\nWAN autoconfiguration\n\nIf the LibreMesh package lime-hwd-openwrt-wan is installed and your node have two or more ethernet ports,\nLibreMesh might autoconfigure as WAN one of these network ethernet device.\n\n\nIn this case you will find a new specific configuration section like this one:\n\n\n\nconfig net 'lm_hwd_openwrt_wan'\n\toption autogenerated 'true'\n\t...\n\n\n\nIf we want to change the behavior of this specific network interface and stop the automatic rewrite of its configuration, we must set the autogenerated option to false.\n\n\n\n\n\n\n\n\nGround routing configuration\n\n\nFor more information on ground routing concept, check out these resources.\n\n\nGround routing specific sections\n\nconfig hwd_gr link1\n\toption net_dev 'eth0'\n\toption vlan '5'\n\toption switch_dev 'switch0'\n\toption switch_cpu_port '0'\n\tlist switch_ports '4'\n\n\n\n\n\n\n\n\n\nconfig hwd_gr\n\n\n\nnet_dev: Plain ethernet device on top of which 802.1q VLAN will be constructed.\n\n\nvlan: VLAN ID to use for this ground routing link, use little one because cheap switch doesn&#8217;t supports big IDs, this will be used also as 802.1q VID.\n\n\nswitch_dev: These options regarding switch need to be set only if your ethernet device is connected to a switch chip. If the switch exists you can read its name (like switch0) in /etc/config/network file.\n\n\nswitch_cpu_port: Refer to switch port map of your device on OpenWrt ToH to know CPU port index.\n\n\nswitch_ports: List switch ports on which you want the VLAN being passed, refer to OpenWrt ToH for correspondence with physical ports.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne section for each ground routing link.\nWith ground routing we mean setups having LibreMesh on a router which is connected via cable(s), eventually through a switch, to some wireless routers running the original firmware in WDS (transparent bridge) Ap/Sta mode.\nLikely you want to configure as many sections of ground routing with different VLAN numbers or different switch ports as many connected devices in WDS mode.\n\n\n\n\n\n\n\n\nBGP configuration\n\n\nProto BGP specific sections (one section for each BGP peer)\n\nconfig bgp_peer peer1\n\toption remoteIP '192.0.2.6'\n\toption remoteAS '65550'\n\nconfig bgp_peer peer2\n\toption remoteIP '2001:db8::c001'\n\toption remoteAS '65549'\n\n\n\nFor documentation on BGP configuration see this thesis.\n\n\n"}
,{
"location": "/docs/quick_start_guide/en_cli_configuration.html",
"lang": "en",
"title": "CLI configuration",
"content": "\nUntil here we went through the installation, connection and configuration procedures using the LibreMesh web interface.\n\n\nAs in every Linux-based system there&#8217;s the availability of a textual console interface for advanced configuration and hardcore users.\n\n\nThis part of the guide should not be needed for normal LibreMesh use.\n\n\nFlashing Via the Console Interface\n\n\nThis is possible just if you&#8217;re upgrading an existing OpenWrt or LibreMesh installation, not from stock firmware.\n\n\nCopy the downloaded firmware image to the /tmp directory on your target router using the scp command.\n\n\n\n\n\n\n\n\n\nDo not try to copy the firmware image to directories different from /tmp. They have limited memory access.\n\n\n\n\n\n\nIn case the router already has LibreMesh you can do this with\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\n\n\n\n\n\n\n\nYou could get an error like this:\n/usr/libexec/sftp-server: not found\nConnection closed\nIn this case, you just have to add a -O option to the ssh command, like this:\nscp -O /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\n\n\n\nOtherwise (upgrading from OpenWrt) you will need to insert the router IP address (often 192.168.1.1) in (see above for solving the /usr/libexec/sftp-server: not found error):\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@ROUTERIPADDRESS:/tmp/\n\n\n\nNow connect to the console interface using ssh, if LibreMesh is already running with ssh root@thisnode.info or with ssh root@ROUTERIPADDRESS if OpenWrt is running.\n\n\nThen enter the /tmp directory where the firmware is present with cd /tmp, check the presence of the file with ls and install it with\n\n\n\nsysupgrade -n openwrt-ROUTERMODEL-squashfs-sysupgrade.bin\n\n\n\n\n\n\n\n\n\n\nThe -n option for sysupgrade command is needed for discarding the previous configuration files. Omitting the -n option is never a good idea when flashing LibreMesh.\n\n\n\n\n\n\nFor more information on the sysupgrade process, see these OpenWrt instructions.\n\n\n\n\nConfiguring Via the Console Interface (optional)\n\n\nRather than using the web interface, modifying directly /etc/config/lime-node file allows to access more advanced options but increases the risk of writing broken configuration.\n\n\nYou can use the vim text editor (a short vim guide here) for editing /etc/config/lime-node, the settings in this file will override the community ones in /etc/config/lime-community and the default ones in /etc/config/lime-defaults.\n\n\nYou can find examples and documentation in the /docs/lime-example.txt file (you can find it online here) as well as in LibreMesh config file page on this website.\n\n\nAfter saving the edits to the /etc/config/lime-node file, apply the changes to system configuration files launching the lime-config command. Next, reboot the router with reboot &amp;&amp; exit to apply the new settings.\n\n\n"}
,{
"location": "/docs/en_config.html",
"lang": "en",
"title": "Configuration",
"content": "\nIntroduction to the configuration\n\n\nLibreMesh has a configuration system based on the following principles:\n\n\n\n\nBe simple to configure and understand what configurations are in use in each node\n\n\nBased on the idea of shared configurations at Community level with possible customizations per Node\n\n\nMaintainable over time, by firmware updates, adding new nodes in the community, etc.\n\n\nTo be able to make complex configurations.\n\n\n\n\nThe configuration system is fundamental to understand the internal functioning of LibreMesh,\nhowever it is not necessary to understand it before starting a LibreMesh network!\n\n\n\n\nGeek free configuration using the FirstBootWizard\n\n\nIf your community wants to deploy a free geek network it is advisable to do so using the lime-app\nusing the FirstBootWizard. This application simplifies the initial configuration of the nodes and\nallows new nodes to join an existing network, all through a user-friendly interface\nwhich does not require prior knowledge of networks.\n\n\nTo use the FirstBootWizard simply follow the steps on the screen when\nenter http://thisnode.info\n\n\n\n\n\nHowever, if your community is a geek community, then you may not want to use the FirstBootWizard.\n\n\nOnce the network is started using the FBW, the participants can perform some\nconfiguration changes through the lime-app.\nAs needs arise in the community that are not currently met by the\nlime-app network participants will be able to learn how to make these changes through ssh\nor other tools and following the documentation below.\n\n\n\n\nConfiguration for network administrators\n\n\nLibreMesh uses UCI as its configuration, so does OpenWrt.\nUCI is a database that is easily modified both from the command line and by editing the configuration files directly.\nAll UCI configuration files are located in the /etc/config/ directory.\nThe LibreMesh configuration files that can be edited for are: /etc/config/lime-node and /etc/config/lime-community\nAll other configuration files should not be modified.\n\n\n\n\nConfiguration levels Community and Node\n\n\nTo help the community maintain its configs, the configuration of the network nodes\nis structured hierarchically on 3 levels:\n\n\n\n\nNode, /etc/config/lime-node file\n\n\nCommunity, /etc/config/lime-community file\n\n\nDefault, /etc/config/lime-defaults file\n\n\n\n\nWhere the configuration made at the Node level takes priority over the Community and the latter has\npriority over the Default.\nThis way, when most of the nodes share a certain characteristic, it is convenient\nbe configured at the community level and only modified at the Node level in the nodes where that configuration differs.\nThe Default level contains all configuration values at their default value.\n\n\nExample\n\nLet&#8217;s suppose that we want to set the maximum wireless distance from the 2.4GHz nodes in the community\nin 300 meters but in two of the nodes A and B configure it in 1000m. We could do it in the following way:\n\n\nIn the lime-community of all the nodes we would have\n\n\n\nconfig lime 'wifi'\n\t# other options\n\toption distance_2ghz '300'\n\n\n\nAnd in the lime-node files of nodes A and B:\n\n\n\nconfig lime 'wifi'\n\toption distance_2ghz '1000'\n\n\n\n\nOperation\n\nWhen running the lime-config command the first thing that happens is that the Node levels are processed, Community and Default and the /etc/config/lime-autogen file is generated.\nThis file is the one that contains the configuration that is really going to be used by libremesh to configure the system.\n\n\nThe resulting configuration files are then written for each package based on /etc/config/lime-autogen.\nFor the settings to be applied, it is recommended to run reboot after lime-config. While there are faster ways of applying the modifications in certain cases, running reboot is the only way to ensure that all changes were applied.\n\n\n\nList of sections and options\n\nThe configuration is divided into three main sections: system, network and wifi.\n\n\nFor detailed and updated information on all options see the updated reference\nin /docs/lime-example.\n\n\nSystem options\nThe following options in the system section are the most relevant:\n\n\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\n\toption domain 'thisnode.info'\n\n\n\nWe suggest you change the domain thisnode.info to a new subdomain of your community site, for example option domain 'mesh.altermundi.net'. This domain ('mesh.altermundi.net') should be a domain that does not already exist outside the network (i.e. it is a bad idea to use 'altermundi.net'). All clients that get an IP address by DHCP and all network nodes will be assigned a fully qualified domain (e.g. 'lime-ddeeff.mesh.altermundi.net')\n\n\nGeneral network configurations\n\n\nOf all the network options, the following are the most relevant\n\n\n\nconfig lime network\n\toption primary_interface 'eth0'\n\toption main_ipv4_address '10.%N1.0.0/16'\n\toption main_ipv6_address '2a00:1508:0a%N1:%N200::/64'\n\tlist protocols ieee80211s\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\n\n\n\n\n\n\n\n\n\nIPv4 configuration: main_ipv4_address\n\nThere are four possibilities:\n. set a static IP and subnet, e.g. '192.0.2.1/16'\n. parameterize with %Mn and %Nn, and configure the subnet, for example '192.%N1.%M5.%M6/16'.\n. configure a network address (not a specific IP) to obtain an auto-complete IP\nwithin the network from the bits of the MAC. This also works with masks other than\n/24 or /16 as in '192.0.128.0/17'.\n. set two different parameters, the first for the subnet and the second for the IP setting,\nfor example '192.0.128.0/16/17', resulting in a /16 subnet with broadcast domain (192.0.0.0/16) but with the IP of the node\ncalculated in a /17 range (from 192.0.128.0 to 192.0.255.254).\n\n\n\n\n\n\n\n\n\n\n\n\nIPv6 configuration: main_ipv6_address\n\nThe configuration is similar to the max_ipv4_address. If autocompletion is used as a maximum, it completes\nthe last 24 bits, so in this case it is not useful to use a range greater than /104.\n\n\n\n\n\n\n\n\n\n\n\n\nList of protocols\n\nList of protocols configured by LibreMesh. Some of these require the installation of your related package lime-proto&#8230;&#8203;.\nNote that because of the way the list (ICU lists) work, configuring some protocols causes the list to be rewritten\nThe complete set of protocols that is in the values for Default.\nDon&#8217;t worry if there are more protocols defined than you really need: only the protocols corresponding to\ninstalled packages will be used. So for example if the package lime-proto-olsr is not installed then by more\nthat the protocol olsr is listed, it will not be used.\n\n\n\n\n\n\nGeneral WiFi settings\nOf all the network options, the following are the most relevant\n\n\n\nconfig lime wifi\n\toption channel_2ghz '11'\n\tlist channel_5ghz '48'\n\tlist channel_5ghz '157'\n\toption distance_2ghz '100'\n\toption distance_5ghz '1000'\n\tlist modes 'ap'\n\tlist modes 'apname'\n\tlist modes 'ieee80211s'\n\toption ap_ssid 'LibreMesh.org'\n\toption apname_ssid 'LibreMesh.org/%H'\n\toption country 'ES'\n\n\n\n\n\n\n\n\n\nCountry setting: country code\n\nThe default country code is not specified (so the default is usually US),\nbut we strongly recommend that you set it up. If the network is in Spain then the configuration is\noption country 'ES', which also allows the use of channel 13 (permitted in Spain) which is otherwise restricted.\n\n\n\n\n\n\n\n\n\n\n\n\ndistance\n\nThe distance parameter indicates the maximum distance the other nodes or clients can be.\nA very large value decreases the performance but a lower value than necessary results in a\nconnection with a very very bad performance (you often see duplicate packets (DUPs) when pinging).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi options\n\nAny options in the form &lt;mode&gt;_&lt;option&gt; are copied directly to /etc/config/wireless (without the &lt;mode&gt;_ prefix).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi Access point password\n\nTo secure the AP and APname interfaces with WPA2-PSK, add the key 'MySecurePassword' and\nencryption 'psk2' options. For an example see in /docs/lime-example.\n\n\n\n\n\n\n\nSpecific interface configurations\n\nChanging the above options allows us to have a configuration of the whole system.\n\n\nIn cases where different network interfaces must have different configurations, see /docs/lime-example.\n\n\n\nParameterisable options\n\nSome options are parameterizable using a set of special characters that will be\nreplaced by node-specific information.\n\n\n\n\nMAC bytes %Mn refers to the n byte of the MAC address of the main interface.\nFor example from the MAC CA:FF:EE:BA:BB:EE %M1 will be replaced by CA (the first byte of the MAC)\nand %M4 by BA (the fourth byte of the MAC).\n\n\nNetwork Identifier %Nn refers to the n byte of the cloud identifier which is a hash that is calculated\nfrom the SSID of the AP (taken from the content of option ap_ssid &#8230;&#8203;).\n\n\nHostname %H refers to the hostname of the node.\n\n\n\n\n\n\n\nSetting up things not foreseen in LibreMesh\n\n\nIf you want to make a configuration for which LibreMesh does not have an option then\nit is necessary to use generic configs and _lime-assets.\n\n\ngeneric_uci_config\n\nOther files can be configured in /etc/config/ from the lime configuration files using\ngeneric configurations.\n\n\nExample to configure the location of /etc/config/libremap from /etc/config/lime-community:\n\n\n\nconfig generic_uci_config libremap\n    list uci_set \"libremap.settings=libremap\"\n    list uci_set \"libremap.settings.community=our.libre.org\"\n    list uci_set \"libremap.settings.community_lat=-200.123\"\n    list uci_set \"libremap.settings.community_lon=500.9\"\n\n\n\n\nlime-assets\n\nThe lime-assets are files that allow you to make special configurations. These files\nare divided into two groups, those of the node and those of the community. The idea is that the assets of the community\nare shared by all the nodes and allow configurations that are necessary in all the nodes.\nOn the other hand, the files (assets) of the node are designed to make specific configurations in the node.\n\n\ncopy_asset\n\nIf a file is required to be present on the file system you can use the copy_asset directive.\ncopy_asset copies a file from the assets directory to a path defined by the dst option.\n\n\nFor example to configure the collectd program for your community you can create a collectd.conf file.\nin /etc/lime-assets/community/collectd.conf and use it by defining the following settings in the file\nlime-community in the following way:\n\n\n\nconfig copy_asset collectd\n   option asset 'community/collectd.conf'\n   option dst '/etc/collectd.conf'\n\n\n\n\nrun_asset\n\nTo configure LibreMesh to run a script you should use the run_asset option.\nUse this configuration method as a last resort if the other methods are not sufficient.\n\n\nRun_asset` runs a script from the assets directory. The execution can be in the first boot\n(that is, when it starts after a firmware upgrade) using ATFIRSTBOOT or in every\nonce you reconfigure LibreMesh (when you run lime-config) using ATCONFIG.\n\n\nFor example to run the script myscript.sh saved in /etc/lime-assets/community/myscript.sh\non the first boot:\n\n\n\nconfig run_asset a_test_script\n    option asset 'community/myscript.sh'\n    option when 'ATFIRSTBOOT'\n\n\n\n\n\n\n\n\n\n\nThis configuration method replaces the functionality of the uci-defaults scripts.\n\n\n\n\n\n\n\n\n"}
,{
"location": "/docs/en_connecting_nodes.html",
"lang": "en",
"title": "Connecting to LibreMesh nodes",
"content": "\nConnecting to the Web Interface\n\n\nFor opening the web interface of your LibreMesh router, usually is enough to connect to it (either via wireless or via ethernet cable) and opening thisnode.info in a web browser.\n\n\nDoing so will give you access to the web interface, from here you can customize LibreMesh settings or access the OpenWrt configuration interface. We discourage the use of OpenWrt settings sections as this could produce conflicts with LibreMesh configuration mechanisms.\n\n\n\n\nConnecting to the Console Interface\n\n\nIf you need to bypass the web interface and modify the configuration directly, you can connect to the console interface. From here you can use basic Linux commands and edit the configuration files present in the /etc/config/ directory.\n\n\nYou can connect via SSH issuing:\n\n\n\nssh root@thisnode.info\n\n\n\n\n\n\n\n\n\n\nYou could get an error like this: Unable to negotiate with 10.13.0.1 port 22: no matching host key type found. Their offer: ssh-rsa. In this case, you just have to add two options to the SSH command: -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa, like this: ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@thisnode.info\n\n\n\n\n\n\n\n\n\n\n\n\n\nLeaving the LibreMesh router with no administrator password is a security risk! You should set a root password immediately! Either via the web interface of the passwd command in the console.\n\n\n\n\n\n\n\n\nCannot connect?\n\n\nVisit the Troubleshooting page.\n\n\n"}
,{
"location": "/docs/en_quick_starting_guide.html",
"lang": "en",
"title": "Quick Starting Guide",
"content": "\nCompatible Hardware\n\n\nIt is recommended that the router has at least 8 MB of flash memory and 64 MB of RAM. For routers with 4 MB flash memory or 32 MB of RAM, use the special firmware named -mini or compile one yourself excluding some heavy packages (e.g. opkg or the LuCI and lime-app web interfaces).\n\n\nNot all the OpenWrt supported routers work with LibreMesh (at least, not with its default configuration), for a list of the tested hardware, see our hardware page.\n\n\n\n\nGet the Firmware\n\n\nChoose a source for your firmware\n\n\n\nFor the latest stable release with default configuration (e.g. wireless AP name LibreMesh.org) you can use our downloads site (recommended);\n\n\nFor using the latest LibreMesh code, you can compile the firmware on your GNU/Linux computer (or virtual machine) using OpenWrt buildroot as described in the Development page (advanced);\n\n\n\n\nFor more options check the Get It page.\n\n\n\nDownload the correct firmware image\n\nFind the download for your router by name or model. You can find more detailed router model instructions here.\n\n\nIf you are installing for the first time (a router with stock firmware), choose the link ending with -factory.bin. If there&#8217;s no -factory.bin image or you are upgrading an existing install of LibreMesh or OpenWrt, choose the link ending with -sysupgrade.bin.\n\n\n\n\n\nInstallation Procedure\n\n\nOpen your router web interface\n\nUsing an ethernet cable connect to a LAN port on your router. Make sure that the ethernet cable is the only active network interface on your computer (e.g. disable the wireless interface).\n\n\nIf the router is running stock firmware, follow manufacturer instructions to connect to the router. Its IP should be written on the original box or under the router. Usually just opening 192.168.0.1 or 192.168.1.1 in a web browser lets you reach the router web interface. If you can&#8217;t connect to the router because you can&#8217;t find its IP, you can try the IP address of your gateway. For getting it go to the terminal and use netstat -rn (mac), or ip route show default (Linux). More details on finding your router&#8217;s IP can be found here and here.\n\n\nIf the router is running OpenWrt the instructions in the previous paragraph should apply.\n\n\nIf the router is running LibreMesh just opening http://thisnode.info should get you to the web interface.\n\n\nThen you can log in as admin (if unchanged, the username and password will be on the router&#8217;s box, on OpenWrt by default it&#8217;s an empty password).\n\n\nFor more connection options see How to connect to nodes page.\n\n\nIf you suspect you can&#8217;t connect to your router because of a damaged configuration, follow the Troubleshooting guide.\n\n\n\nFlashing\n\n\n\n\n\n\n\n\nFor Ubiquiti AirMax serie routers, flashing on top of AirOS versions 5.6.x will brick your device (the recovery procedure requires opening the router chassis and connecting directly to its serial port). If your router has AirOS 5.6.x, you will have to download an AirOS 5.5.x version (for XM hardware here, for XW hardware here and for TI hardware here) and use it to downgrade your router.\n\n\n\n\n\n\nOnce you&#8217;ve logged in as root or admin in your router, reach the firmware upgrade page.\n\n\n\n\n\n\n\n\n\nIf there&#8217;s a Keep Settings option, take care to UNCHECK it. It is checked by default on OpenWrt.\n\n\n\n\n\n\nUpload the firmware image file you&#8217;ve downloaded and click Flash Image. Wait a couple of minutes for the process to complete. Reconnect to the ethernet interface (for getting the new IP) and open http://thisnode.info.\n\n\nCongratulations, you have a working LibreMesh router!\n\n\n\n\n\nConnect to Your LibreMesh Router\n\n\nJust connect to the router via its wireless AP interface or via ethernet cable on its LAN port and open http://thisnode.info in the web browser.\n\n\n\n\n\n\n\n\n\nIf is the first time you connect to the router, you will have to set an admin/root password. Leaving a LibreMesh router with no admin password is a huge security risk.\n\n\n\n\n\n\nFor more connection options see How to connect to nodes page.\n\n\nIf you suspect you can&#8217;t connect to your router because of a damaged configuration, follow the Troubleshooting guide.\n\n\n\n\nShare the Internet Connection with the LibreMesh Network\n\n\nLibreMesh is automatically sharing with the rest of the mesh network any internet connection is connected to the router WAN port. There&#8217;s no problem if more than one internet gateway is connected to the LibreMesh network, likely the one closest to the client will be used.\n\n\nIf the LibreMesh router has no WAN port (just LAN ports, or just one ethernet port), one of the ethernet ports has to be configured as WAN port in order to share the internet connection. Refer to next section for configuration.\n\n\n\n\nConfiguration\n\n\nRefer to the LibreMesh config file page and to /docs/lime-example.txt file for detailed information.\n\n\n"}
,{
"location": "/docs/en_troubleshooting.html",
"lang": "en",
"title": "Troubleshooting",
"content": "\nUnable to establish Ethernet connection\n\n\nIf you can&#8217;t connect to the LibreMesh router as indicated in How to connect to LibreMesh nodes opening http://thisnode.info you can try other ways.\n\n\nFirst thing: wait 5 minutes\n\nAfter powering up the router, up to 5 minutes can be needed for bringing up all the services including the DHCP server needed for receiving an IP when connecting. This is a known bug.\n\n\n\nDo not use custom DNS servers\n\nFor using the http://thisnode.info address, the Domain Name System server have to be the one from the LibreMesh router you&#8217;re connecting to. Contrariwise, a fixed external DNS server would not recognize http://thisnode.info as an existing domain.\n\n\n\nVerify the physical connection\n\nIf you are connecting by cable:\n\n\n\n\ndisconnect from any other network (e.g. wireless);\n\n\nverify that the cable is well plugged and that the ethernet LED are blinking on the router and on the computer port;\n\n\nverify that you&#8217;re connected to a LAN port on the router (or main) not to a WAN one (or secondary);\n\n\nuse a good quality cable, with intact connector, avoid half-duplex cables (with just 4 wires, low quality);\n\n\nverify that the network manager on your computer is actually trying to connect by this cable;\n\n\nif the network manager is down or not installed (very unlikely, every operating system has one enabled by default), connect activating the ethernet interface. Refer to your operating system documentation for detailed instructions. Using Linux terminal can be done with sudo ip link set dev eth0 up for activating the interface, eth0 could be named differently, like enp0s25 on your system, check with ip link show. Check next section on how to obtain an IP for this connection.\n\n\n\n\nIf you are connecting by wireless:\n\n\n\n\ndisconnect from any other network (e.g. ethernet cable);\n\n\ncheck that the wireless physical switch is ON both on the LibreMesh router and on the computer;\n\n\nverify that the network manager on your computer is actually trying to connect to the wireless network named as your network community (with default configuration is LibreMesh.org) or on the \"named AP\" (with default configuration is something like LibreMesh.org/abc123), connecting to the LiMe wireless SSID is not going to work as is used just for meshing;\n\n\nif the network manager is down or not installed (very unlikely, every operating system has one enabled by default) just install one or enable the existing one. Connecting manually is doable on Linux, easy only if the AP is open, not WPA, with sudo ip link set dev wlan0 up; sudo iw dev wlan0 connect &lt;your router ESSID&gt; the ESSID could be your community network name or the default LibreMesh.org, wlan0 could be named differently, like wlp3s0 on your system, check with ip link show. Check next section on how to obtain an IP for this connection.\n\n\n\n\n\nVerify the IPv4 connection\n\nOnce the physical layer is set (the previous section), you can try to connect the normal way (opening http://thisnode.info). If it does not work, before following with the next steps it&#8217;s needed to check if the LibreMesh router actually gave to our computer/smartphone an IPv4 to use for communicating on the network.\n\n\nEvery network manager on every operating system should request for an IPv4 to the LibreMesh router, acting as a so-called DHCP client.\n\n\nThe received local private IPv4 can be found following this guide for most operating systems. An additional method via Linux terminal is launching the command ip -4 address show scope global. The local private IP will look something like 10.13.123.123.\n\n\nOn the Linux terminal there&#8217;s the possibility to ask manually for an IPv4 with the commands sudo dhclient -x; sudo dhclient or sudo dhcpcd -x; sudo dhcpcd.\n\n\nIf no such address coming from the LibreMesh router can be encountered, or there&#8217;s only a Zeroconf IP starting with 169.254.x.x, means that the DHCP server on the router is not working (be sure to wait 5 minutes after the power up of the router, as explained above, and try connecting again) or the DHCP client on your computer/smartphone is not working. Make sure to verify the physical connection as described above, specifically make sure to connect to a LAN port on the router and not to a WAN port. In this case the method described on the next section \"Connect using gateway IPv4\" is not applicable, while the other methods should work anyway.\n\n\n\nConnect using gateway IPv4\n\nIf trying to connect to http://thisnode.info (as explained in normal connection procedure) does not work AND an IPv4 was received for your computer/smartphone from the gateway as described in section Verify the IPv4 connection, you can take your gateway (default route) IPv4 address and connect to it. The address to use in not the one discovered in the previous section.\n\n\nWhen you&#8217;re physically (either via ethernet cable or via wireless) connected to the router and you receive an IPv4 from it, you receive also the IPv4 direction of the gateway (default route). Please take care to disconnect from any other wireless or wired networks, otherwise a wrong gateway IPv4 can be obtained.\n\n\nFor obtaining the gateway direction using a Windows, Mac or Linux computer or Android smartphone refer to this guide.\n\n\nIf the above guide does not work for you and you&#8217;re on a Linux computer, the gateway (default route) IPv4 can be obtained using the terminal: open a terminal (open your Linux distro menu, type \"terminal\" and select the first result) and execute the command\n\n\n\nip -4 route show scope global\n\n\n\nThe output should be similar to: default via 10.13.0.1 dev enp0s0 proto static metric 100 so in this example our gateway IPv4 is 10.13.0.1. In case the output was instead command not found: ip you can find the same information using the older commands route -n | grep G or netstat -nr | grep G.\n\n\nThe obtained IPv4 is not relative of a specific LibreMesh router, indeed, because of a feature called anygw this IPv4 is common for all the routers. In our case this doesn&#8217;t matter because we just want connect to the directly connected one and this will work as expected.\n\n\nFor example let&#8217;s use 10.13.0.1 as the gateway address. You can open the IPv4 direction inserting it directly in the URL bar of the browser (not in the search bar): http://10.13.0.1\n\n\nIf we can&#8217;t access the web interface (can happen if we installed a LibreMesh version without web interface), we can try connecting via SSH:\n\n\n\nssh root@10.13.0.1\n\n\n\nIf no root password was set and the password login was not disabled by the network-profile, a blank password access is granted, otherwise the router root password is prompted.\n\n\n\n\n\n\n\n\n\nYou could get an error like this: Unable to negotiate with 10.13.0.1 port 22: no matching host key type found. Their offer: ssh-rsa. In this case, you just have to add two options to the SSH command: -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa, like this: ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@10.13.0.1\n\n\n\n\n\n\n\nDiscover IPv4 of your router\n\nDo this only if the section Verify the IPv4 connection instructions failed and so the easy Connect using the gateway IPv4 is not a valid way. For following this specific way you likely need a Linux computer.\n\n\nInstall netdiscover package from your Linux distro repositories. Make sure to have a proper physical connection, re-read Verify the physical connection and disconnect from any other network. Run sudo netdiscover -f. Some IPv4 similar to 10.13.0.1 should appear. Add an IPv4 to your computer network interface used for connecting with the first three fields of the IP identical to the router one and the fourth different, for example 10.13.0.2 with netmask 255.255.255.0 or /24. Connect to the router inserting its IP in the browser or via SSH.\n\n\n\nConnect using IPv6 link local\n\nIn case neither the normal connection procedure to http://thisnode.info nor the gateway IPv4 (as explained in Connect using gateway IPv4) are working for connecting to your node, you can use IPv6 link local.\n\n\nThis works even if no IPv4 was received from the gateway, as checked in section \"Verify the IPv4 connection\". Likely this works only on Linux, maybe also on Macintosh.\n\n\nEach working network interface in your Linux system have a special IPv6 address configured automatically by the Kernel.\nThese are named IPv6 link-local and are inside the special prefix fe80::/10\nThe scope of these IPs is to communicate computers which are in the same collision domain, so translated to LibreMesh it would be the layer2 cloud.\n\n\nIf on Linux you use NetworkManager, you may create a custom profile to avoid its intervention on the ethernet interface without having to stop it:\n\n\n\n\nRight click the NetworkManager applet\n\n\nEdit connections &#8594; Add &#8594; Select Ethernet\n\n\nGive it any name you desire, such as eth0 manual\n\n\nGeneral tab: deselect Automatic connect\n\n\nIPv4 tab: select Disabled\n\n\nIPv6 tab: select Link-Local only\n\n\n\n\nFinally switch on your router and connect to it using an ethernet cable from its LAN port (WAN should also work) to the ethernet port of your computer, and select the new NetworkManager profile eth0 manual.\n\n\nAn alternative to create a NetworkManager profile is to stop it with sudo systemctl stop NetworkManager.service and bring up the network interface manually with sudo ip link set dev eth0 up (eth0 could be named differently, check with ip link show).\n\n\nThen, how to discover the IPv6 link local address of the router we&#8217;re connected to?\n\n\nUsing ICMPv6 we can discover machines in our network thanks to the special Multicast address \"ff02::\".\nTo discover all the devices we can use the next command (using ping6 or ping depending on your Linux distro) where the appended %eth0 specifies which network interface to use (could be something like eth0 or enp0s25, you can see the interface names with the commands ip link show or ifconfig):\n\n\n\nping6 -v ff02::1%eth0\n\n\n\nor just\n\n\n\nping -v ff02::1%eth0\n\n\n\nThen each device connected to our collision domain, will reply the ICMP request with its own IPv6 link-local address.\n\n\nThe first answer to each ping usually is your own ethernet interface (you can see your own IPv6 link local address with ip -6 address show scope link) while the ones marked with DUP! are the connected devices, the first one is the fastest to answer, so the one you&#8217;re directly connected to. You can more or less recognize the routers IPv6 link local addresses comparing them with the final part of their physical MAC address (printed on the router label), which should be similar.\n\n\nThe router direction is a combination of the router&#8217;s IPv6 address, %, and your ethernet interface name. It should be something like fe90::aa20:66ff:fe4f:ae87%eth0. Do not include a trailing : or other text from the ping responses.\n\n\nNow that you have the target IPv6 link local you can connect to the router:\n\n\n\n\nTry connecting via ssh: ssh root@fe90::aa20:66ff:fe4f:ae87%eth0. Remember to include both root@, otherwise it will attempt to connect using your personal username, and %eth0 (or whatever is the name of the interface you used for connecting, you can see all interface names with ip link show).\n\n\nIf there&#8217;s not yet a root password set on the router and the password access was not disabled by the network-profile, a blank password access is granted.\n\n\nOtherwise try all the router root passwords you remember.\n\n\nIf neither work, and you already tried with all the other methods, likely you will have to reflash your router (e.g. using TFTP) or to reset using OpenWrt failsafe mode (this last procedure could ask for the password anyway if this was set in the network-profile during compilation of the installation image).\n\n\n\n\nIf you managed to connect via ssh you can also copy files on the router using IPv6 link local and scp (for copying big files like firmware images use the /tmp directory as a destination):\n\n\n\nscp LiMe-fw-sysupgrade.bin root@\\[fe80::a2f3:c1ff:fe39:1cea%eth0\\]:/tmp/\n\n\n\nYou could get an error like this:\n\n\n\nash: /usr/libexec/sftp-server: not found\nscp: Connection closed\n\n\n\nIn this case, you just have to add a -O option to the ssh command, like this:\n\n\n\nscp -O LiMe-fw-sysupgrade.bin root@\\[fe80::a2f3:c1ff:fe39:1cea%eth0\\]:/tmp/\n\n\n\nfor more details, see here.\n\n\nClick here for downloading Pau&#8217;s script which check if there is some router attached to your network device and in case, try to connect to it.\nIf there are not routers it waits until some appears.\n\n\nAn example of execution:\n\n\n\np4u@nomada:~$ ./disc6 eth1\n\n\n\n\n\n\nStill no access possible (e.g. access password lost)\n\n\nIf you tried all the instructions above without success, we suggest to ask for help via our contacts before trying anything else.\n\n\nThese situations of non-responsivity can arise from bad manual configurations and customizations (network-profile) or bad images being flashed or incompatible router model.\n\n\nIf you feel confident enough, you can try to boot your router in OpenWrt failsafe mode or to re-flash it using low level procedures e.g. TFTP (if available) or serial connection (risky) or other recovery procedures you can find on your router&#8217;s specific page.\n\n\nRecover from bad configurations with Failsafe mode\n\nFailsafe mode enables you to recover from bad configurations without much trouble. Learn how to access Failsafe mode here or on the specific router page in OpenWrt table of hardware. If you&#8217;re trying to reset the router after forgetting the password, this procedure could ask for the password anyway in case this was set in the network-profile during compilation of the installation image.\n\n\nThe generic procedure is to start pressing repeatedly the router reset button during the boot, the LEDs should start blinking and failsafe mode activated instead of normal boot.\n\n\nOnce in failsafe, connect by ethernet cable or by wireless to the router and try to connect to it as if was a freshly flashed LibreMesh router as explained in the connection procedure on this site. If that does not work, try connecting to 192.168.1.1 or 10.13.0.1 (the IP could be even different if you flashed an image compiled with the preset configuration from your community) inserting the http://192.168.1.1 or http://10.13.0.1 direction in the URL bar of the browser or via SSH:\n\n\n\nssh root@192.168.1.1\nssh root@10.13.0.1\n\n\n\nIf an error like Unable to connect or No route to host is obtained, likely you will have to set an IP for your computer, for example 192.168.1.2 or 10.13.0.2, before attempting to connect again. For setting an IP to your computer under Windows follow this guide, under Mac this guide, under Linux this guide and under Android this guide.\n\n\nIf you still cannot connect, make sure you are pressing the reset button at the right time, as explained in this guide. Then, if the problem persists, it&#8217;s likely that the IP is the one customized by your community (e.g. 10.XXX.0.1) so you can ask any member of your community or find it following the instructions above.\n\n\n\nRe-flashing via TFTP\n\nWhen the aforementioned connection procedures don&#8217;t work and Failsafe mode doesn&#8217;t help, likely we will have to reinstall a firmware image. As the normal way to reinstall, explained in Quick Starting Guide likely is not going to work, we can try communicating directly with the router bootloader. The bootloader is a tiny piece of software that never gets modified when flashing OpenWrt/LibreMesh and includes recovery functions. Usually it includes a TFTP (Trivial File Transfer Protocol) service, either server (e.g. on Ubiquiti routers) or client (e.g. on TP-Link routers), which can be activated keeping the reset button pressed for 10 seconds while plugging the router power cord (in Ubiquiti routers the success of this operation is confirmed by a nice blinking pattern of the LEDs) or is active for a short time after plugging the router (in some old Linksys routers). For specific instructions about how to activate the TFTP server or client in each router refer to OpenWrt table of hardware.\n\n\nProcedure for routers with a TFTP server\n\nAlways read the OpenWrt table of hardware before attempting this procedure.\n\n\nTo prepare for a TFTP flashing procedure:\n\n\n\n\ninstall a TFTP client on your PC, on Linux distros usually the package is named tftp-hpa;\n\n\nconnect your PC via an ethernet cable to a LAN ethernet port on the unpowered router;\n\n\nuse the connection manager of your PC to disconnect from any interface other than ethernet cable (e.g. wireless);\n\n\nset up a profile for the ethernet interface with a manual IPv4, suggested configurations are IPv4 192.168.1.2, netmask 24, broadcast domain 255.255.255.0, gateway (not really needed) 192.168.1.1;\n\n\nopen a terminal and using the command cd enter the directory where you downloaded the image to flash;\n\n\nissue the command tftp 192.168.1.1 which will open TFTP for connecting to 192.168.1.1 that is the most common router IP address in TFTP recovery mode;\n\n\nin tftp execute the commands binary that sets the mode of transfer, trace on which enables a clearer output, rexmt 1 which specifies the retransmission timeout, timeout 60 which sets the total transmission timeout;\n\n\nthen enable the TFTP recovery mode in your router, depending on the specific model procedure;\n\n\nexecute in TFTP the command put &lt;place here the name of the file -factory.bin&gt;;\n\n\nthe output should be a long list of chunks being transferred;\n\n\nwait 5 minutes for the flashing to be complete and reboot the router.\n\n\n\n\nWe recommend to follow these instructions only after verifying the goodness of it for the specific device to recover.\n\n\n\nProcedure for routers with a TFTP client\n\nIn this case, the procedure can change by a wider extent so that the router-specific instructions need to be followed as reported on OpenWrt table of hardware.\n\n\n\n\nSerial connection\n\nRecovery through serial connection can be completely different from router to router and highly esoteric. A lot of digging into any form of human knowledge is suggested before attempting to recover a router this way.\n\n\n\n"}
,{
"location": "/docs/en_vim-guide.html",
"lang": "en",
"title": "",
"content": "\nA very short Vim tutorial\n\n\nVim is an extremely powerful console editor based on a clever idea:\nthe keyboard keys can be used both for normal typing (Insert mode) and for\nediting actions (Command mode).\n\n\nYou just have to remember that there are these two modes of operation\nand how to switch between them!\n\n\nTo switch from Command mode to Insert mode you press\n\n\n\n\ni (to type where the cursor is) or\n\n\no (to create a new line).\n\n\n\n\nTo switch from the Insert mode to the Command mode you press [Escape].\n\n\nAt the Command mode you can\n\n\n\n\nnavigate with the arrows\n\n\ndelete with x and X\n\n\nsearch with /\n\n\n\n\nTo exit saving the file, enter the Command mode pressing [Escape] and type :wq. To exit without saving enter Command mode and press :q!.\n\n\nAll will become clear if you type the following on a terminal:\nvim hello.txt&lt;Enter&gt;ihello world&lt;Escape&gt;onew line&lt;Escape&gt;:wq&lt;Enter&gt;cat hello.txt&lt;Enter&gt;\n\n\nThat&#8217;s all!\n\n\n\n\nDiscover more\n\n\nhttps://www.tutorialspoint.com/unix/unix-vi-editor.htm\n\n\n"}
,{
"location": "/docs/es_config.html",
"lang": "es",
"title": "Configuración",
"content": "\nIntroducción a la configuración\n\n\nLibreMesh tiene un sistema de configuración basado en los siguienes principios:\n\n\n\n\nSer simple de configurar y entender qué configuraciones están en uso en cada nodo\n\n\nBasado en la idea de configuraciones compartidas a nivel Comunidad con customizaciones posibles por Nodo.\n\n\nMantenible en el tiempo, por actualizaciones de firmware, agregar nuevos nodos en la comunidad, etc.\n\n\nPoder realizar configuraciones complejas.\n\n\n\n\nEl sistema de configuración es fundamental para entender el funcionamiento interno de LibreMesh,\nsin embargo no es necesario entenderlo antes de empezar una red LibreMesh!\n\n\n\n\nConfiguración geek free usando el FirstBootWizard\n\n\nSi tu comunidad quiere desplegar una red geek free es recomendable hacerlo usando la lime-app\nutilizando el FirstBootWizard. Esta aplicación simplifica la configuración inicial de los nodos y\npermite a nuevos nodos sumarse a una red existente, todo a travez de una interfaz amigable\nque no requiere conocimientos previos de redes.\n\n\nPara utilzar el FirstBootWizard simplemente sigue los pasos que aparecen en pantalla al\nentrar en http://thisnode.info\n\n\n\n\n\nEn cambio si tu comunidad es una comunidad de geeks entonces quizas no quieran utilizar el FirstBootWizard.\n\n\nUna vez iniciada la red utilizando el FBW les participantes pueden realizar algunos\ncambios de configuración a travez de la lime-app.\nA medida que vayan surgiendo necesidades en la comunidad que no se cubran actualmente con la\nlime-app les participantes de la red podrán aprender a realizar estos cambios a travez de ssh\nu otras herramientas y siguiendo la documentación a continuación.\n\n\n\n\nConfiguración para administradores de red\n\n\nLibreMesh utiliza a UCI como sistema de\nconfiguración ya que UCI es tambien es utilizado por OpenWrt.\nUCI es una base de datos de que es\nfacilmente modificable tanto desde línea de comandos como editando los archivos de configuración directamente.\nTodos los archivos de configuración de UCI se encuentran en el directorio /etc/config/.\nLos archivos de configuración de LibreMesh que pueden ser editados para son: /etc/config/lime-node y\n/etc/config/lime-community.\nEl resto de los archivos de configuración no deben ser modificados.\n\n\n\n\nNiveles de configuración Comunidad y Nodo\n\n\nPara ayudar a la comunidad a mantener sus configuraciones, la configuración de los nodos de la red\nse estructura jerarquicamente en 3 niveles:\n\n\n\n\nNodo, archivo /etc/config/lime-node\n\n\nComunidad, archivo /etc/config/lime-community\n\n\nDefecto, archivo /etc/config/lime-defaults\n\n\n\n\nDonde la configuración realizada a nivel de Nodo toma prioridad por sobre Comunidad y esta  a su\nvez tiene prioridad por sobre el Defecto.\nDe esta forma cuando la mayoria de los nodos comparten cierta caracteristica la misma conviene\nconfigurarse a nivel comunidad y solo modificarla en el nivel de Nodo en los nodos donde esa configuración difiere.\nEl nivel Default contiene todos los valores de configuración en su valor por defecto.\n\n\nEjemplo\n\nSupongamos que queremos configurar la distancia máxima wireless de los nodos de 2.4GHz de la comunidad\nen 300 metros pero en dos de los nodos A y B configurarla en 1000m. Lo podríamos hacer de la siguiente forma:\n\n\nEn lime-community de todos los nodos tendriamos:\n\n\n\nconfig lime 'wifi'\n\t# other options\n\toption distance_2ghz '300'\n\n\n\nY en los archivos lime-node de los nodos A y B:\n\n\n\nconfig lime 'wifi'\n\toption distance_2ghz '1000'\n\n\n\n\nFuncionamiento\n\nAl correr el comando lime-config lo primero que sucede es que se procesan los niveles Nodo,\nComunidad y Default y se genera el archivo /etc/config/lime-autogen.\nEste archivo es el que contiene la configuración que realmente va a utilizarse por libremesh para configurar el sistema.\n\n\nLuego se escriben los archivos de configuración resultantes para cada paquete en base a /etc/config/lime-autogen\nPara que las configuraciones se apliquen, es recomendable correr reboot luego de lime-config. Si bien hay formas más rápidas\nde aplicar las modificaciones en ciertos casos, correr reboot es la única que asegura que todos los cambios se aplicaron.\n\n\n\nLista de secciones y opciones\n\nLa configuración se divide en tres secciones principales: system, network y wifi.\n\n\nPara tener información detallada y actualizada de todas las opciones ver la referencia actualizada\nen /docs/lime-example.\n\n\nOpciones de sistema\nLas siguientes opciones de la seccion system son las más relevantes:\n\n\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\n\toption domain 'thisnode.info'\n\n\n\nTe sugerimos que cambies el dominio thisnode.info a un nuevo subdominio del sitio de tu comunidad, por ejemplo option domain 'mesh.altermundi.net'. Este dominio ('mesh.altermundi.net') debe ser un dominio que no exista ya afuera de la red (i.e. es una mala idea usar 'altermundi.net'). A todos los clientes que obtienen una dirección IP por DHCP y a todos los nodos de la red se le asignará un fully qualified domain (ej. 'lime-ddeeff.mesh.altermundi.net')\n\n\nConfiguraciones generales de red\nDe todas las opciones de red las más relevantes son las siguientes:\n\n\n\nconfig lime network\n\toption primary_interface 'eth0'\n\toption main_ipv4_address '10.%N1.0.0/16'\n\toption main_ipv6_address '2a00:1508:0a%N1:%N200::/64'\n\tlist protocols ieee80211s\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\n\n\n\n\n\n\n\n\n\nConfiguración IPv4: main_ipv4_address\n\nHay cuatro posibilidades:\n\n\n\n\nconfigurar una IP y subnet estática, por ejemplo '192.0.2.1/16'\n\n\nparametrizar con %Mn y %Nn, y configurar la subnet, por ejemplo '192.%N1.%M5.%M6/16'\n\n\nconfigurar un dirección de red (no una IP en especifico) para obtener una IP autocompletada\ndentro de la red a partir de los bits de la MAC. Esto tambien funciona con máscaras distintas de\n/24 or /16 como '192.0.128.0/17'\n\n\nconfigurar dos parámetros distintos, el primero para la subnet y el segundo para la parametrización de la IP,\npor ejemplo '192.0.128.0/16/17', resultando en una subnet /16  con dominio de broadcast (192.0.0.0/16) pero con la IP del nodo\ncalculada en un rango /17 (desde la 192.0.128.0 a la 192.0.255.254).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguración IPv6: main_ipv6_address\n\nLa configuración es similar a la main_ipv4_address. Si se usa autocompletado como máximo se completan\nlos ultimos 24 bits, por lo que en este caso no es útil usar un rango mayor a /104.\n\n\n\n\n\n\n\n\n\n\n\n\nLista de protocolos: list protocols\n\nListado de protocolos configurados por LibreMesh. Algunos de estos require la instalación de su paquete relacionado lime-proto-&#8230;&#8203;.\nNotar que por como funcionan las list (listas de UCI) configurar algunos protocolos hace que se reescriba la lista\ncompleta de protocolos que está en los valores por Defecto.\nNo te preocupes si hay mas protocolos definidos que los que realmente necesitas: solamente los protocolos correspondientes a los\npaquetes instalados se van a utilizar. Entonces por ejemplo si el paquete lime-proto-olsr no está instalado entonces por mas\nque en la lista esté el protocolo olsr el mismo no será usado.\n\n\n\n\n\n\nConfiguraciones generales WiFi\nDe todas las opciones de red las más relevantes son las siguientes:\n\n\n\nconfig lime wifi\n\toption channel_2ghz '11'\n\tlist channel_5ghz '48'\n\tlist channel_5ghz '157'\n\toption distance_2ghz '100'\n\toption distance_5ghz '1000'\n\tlist modes 'ap'\n\tlist modes 'apname'\n\tlist modes 'ieee80211s'\n\toption ap_ssid 'LibreMesh.org'\n\toption apname_ssid 'LibreMesh.org/%H'\n    option country 'ES'\n\n\n\n\n\n\n\n\n\nConfiguración de país: country code\n\nEl código de país por defecto no viene especificado (entonces por lo tanto el defecto suele ser US),\npero recomendamos encarecidamente que lo configuren. Si la red se encuentra en España entonces la configuración es\noption country 'ES', lo que además permite el uso del canal 13 (permitido en España) que de otra forma está restringido.\n\n\n\n\n\n\n\n\n\n\n\n\ndistance\n\nEl parámetro distance indica la máxima distancia a la que pueden estar los otros nodos o clientes.\nUn valor muy grande disminuye el rendimiento pero un valor inferior al necesario resulta en una\nconección con un rendimiento muy muy malo (suelen verse paquetes duplicados (DUPs) al hacer ping).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi options\n\nCualquier opción en la forma &lt;mode&gt;_&lt;option&gt; se copia directamente a /etc/config/wireless (sin el prefijo &lt;mode&gt;_).\n\n\n\n\n\n\n\n\n\n\n\n\nwifi Password de puntos de acceso\n\nPara segurizar con WPA2-PSK las interfaces AP y APname, agrega las opciones key 'MiPasswordSeguro'\ny encryption 'psk2'. Para un ejemplo ver en /docs/lime-example.\n\n\n\n\n\n\n\nConfiguraciones de interfaz especificas\n\nCambiar las opciones antes mencionadas nos permite tener una configuración de todo el sistema.\n\n\nEn los casos en los que diferentes interfaces de red deben tener configuraciones diferentes, véase /docs/lime-example.\n\n\n\nOpciones parametrizables\n\nAlgunas opciones son parametrizables usando un conjunto de caracteres especiales que serán\nreemplazados por información específica del nodo.\n\n\n\n\nMAC bytes %Mn se refiere a el byte n de la dirección de MAC de la interfaz principal.\nPor ejemplo de la MAC CA:FF:EE:BA:BB:EE %M1 se reemplazará por CA  (el prime byte de la MAC)\ny %M4  por BA (el cuarto byte de la MAC).\n\n\nNetwork Identifier %Nn refiere al byte n del identificador de la nube que es un hash que se calcula\na partir del SSID del AP (tomado del contenido de option ap_ssid &#8230;&#8203;).\n\n\nHostname %H se refiere al hostname del nodo.\n\n\n\n\n\n\n\nConfigurando cosas no previstas en LibreMesh\n\n\nSi se quiere realizar una configuración para la cual LibreMesh no tiene una opción entonces\nes necesario usar configuraciones genéricas y lime-assets.\n\n\nConfiguraciones genéricas: generic_uci_config\n\nSe puede configurar otros archivos en /etc/config/ desde los archivos de configuración de lime usando\nconfiguraciones genéricas.\n\n\nEjemplo para configurar la localización de /etc/config/libremap desde /etc/config/lime-community:\n\n\n\nconfig generic_uci_config libremap\n    list uci_set \"libremap.settings=libremap\"\n    list uci_set \"libremap.settings.community=our.libre.org\"\n    list uci_set \"libremap.settings.community_lat=-200.123\"\n    list uci_set \"libremap.settings.community_lon=500.9\"\n\n\n\n\nLos lime-assets, archivos para configuraciones especiales\n\nLos lime-assets son archivos que permiten realizar configuraciones especiales. Estos archivos\nse dividen en dos grupos, los del nodo y los de la comunidad. La idea es que los assets de la comunidad\nsean compartidos por todos los nodos y permitan realizar configuraciones que son necesarias en todos los nodos.\nEn cambio los archivos (assets) del nodo están pensados para realizar configuraciones especificas en el nodo.\n\n\nDefiniendo archivos: copy_asset\n\nSi se precisa que un archivo esté presente en el sistema de archivos puedes usar la directiva copy_asset.\ncopy_asset copia un archivo desde el directorio de assets hacia una ruta definida por la opción dst.\n\n\nPor ejemplo para configurar el programa collectd para tu comunidad puedes crear un archivo collectd.conf\nen /etc/lime-assets/community/collectd.conf y usarlo definiendo la siguiente configuración en el archivo\nlime-community de la siguiente manera:\n\n\n\nconfig copy_asset collectd\n   option asset 'community/collectd.conf'\n   option dst '/etc/collectd.conf'\n\n\n\n\nEjecutando scripts: run_asset\n\nPara configurar a LibreMesh para que se ejecute un script se debe usar  la opción run_asset.\nUsar este método de configuración como último recurso si los otros métodos no son suficientes.\n\n\nrun_asset ejecuta un script del directorio de assets. La ejecución puede ser en el primer booteo\n(o sea, cuando inicia luego de realizarse un upgrade de firmware) usando ATFIRSTBOOT o en cada\nvez que se reconfigura LibreMesh (cuando se ejecuta lime-config) usando ATCONFIG.\n\n\nPor ejemplo para ejecutar el script myscript.sh guardado en /etc/lime-assets/community/myscript.sh\nen el primer booteo:\n\n\n\nconfig run_asset a_test_script\n    option asset 'community/myscript.sh'\n    option when 'ATFIRSTBOOT'\n\n\n\n\n\n\n\n\n\n\nEste método de configuración reemplaza la funcionalidad de los scripts uci-defaults.\n\n\n\n\n\n\n\n\n"}
,{
"location": "/es_development.html",
"lang": "es",
"title": "Desarrollo",
"content": "\nCódigo Fuente\n\n\nEl código fuente se encuentra almacenado en un árbol de git que contiene todas las ramas y lanzamientos.\n\n\nTodos los repositorios se pueden consultar a través de\nGitHub.\n\n\nLa mayor parte del desarrollo se concentra en el repositorio de lime-packages el cual puede ser consultado en\n GitHub o descargardo usando git:\n\n\n\ngit clone https://github.com/libremesh/lime-packages.git\ncd lime-packages\n\n\n\n\n\nCompilando el código fuente de LibreMesh\n\n\nEste procedimiento ha sido probado en GNU/Linux, en otros sistemas podria requerir algunas modificaciones o se puede ejecutar en una maquina virtual de Linux.\nGeneralmente la primera compilación puede tomar algunas horas y requiere al menos 10GB de espacio disponbile en disco.\n\n\nAntes de iniciar a compilar OpenWrt necesitas instalar algunos paquetes en tu sistema.\n\n\nSi no estas seguro(a) sobre si tu sistema tiene las  dependencias ya instaladas, puedes continuar con la compilación (ver más abajo) y si falla,\nverifica los mensajes de error.\n\n\nEn un sistema Ubuntu, el siguiente comando instalará las dependencias minimas de compilación:\n\n\n\nsudo apt update\nsudo apt install --no-install-recommends git ca-certificates subversion wget make gcc g++ libncurses5-dev gawk unzip file patch python3-distutils python3-minimal python2-minimal libpython2-stdlib\n\n\n\nPara otras distribuciones de Linux la lista de paquetes podría ser ligeramente direferente, revisa la\npágina de instalación del sistema de compilación de OpenWrt.\n\n\nAhora necesitas obtener el código fuente de OpenWrt.\nAsegurate de clonar (git clone) el código fuente como usuario normal (por ejemplo: no usar root): la compilación será rechazada si se ejecuta\nsiendo usuario administrador root.\n\n\nDescargar el código fuente de OpenWrt\nLibreMesh se puede compilar sobre varias versiones de OpenWrt. Damos soporte oficialmente a la compilación con la versión anterior estable de OpenWrt (18.06.8) o\nla versión estable de OpenWrt (19.07.4)\n\n\nPara compilar LibreMesh sobre la versión anterior estable de OpenWrt:\n\n\n\ngit clone -b v18.06.8 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nDe manera alternativa, para compilar LibreMesh sobre la versión Estable de OpenWrt:\n\n\n\ngit clone -b openwrt-19.07 --single-branch https://git.openwrt.org/openwrt/openwrt.git\n\n\n\nEntrar al directorio de compilación de OpenWrt\n\ncd openwrt\n\n\n\n\n\n\n\n\n\n\nSi necesitas incluir un archivo en la imagen compilada, por ejemplo un archivo de configuración personalizado, crea aqui un directorio files\nque contenga la estructura de directorio y archivos que quieras agregar. Por ejemplo: mkdir -p files/etc/config/; touch files/etc/config/lime-community\ny editar el archivo recien creado lime-community incluyendo el contenido personalizado.\nVer más instrucciones en la\n Wiki de OpenWrt.\n\n\n\n\n\n\nTomar los repositorios feeds por defecto de OpenWrt\n\ncp feeds.conf.default feeds.conf\n\n\n\nY agregar los repositorios de LibreMesh a los feeds de OpenWrt\n\ncat &lt;&lt; EOF &gt;&gt; feeds.conf\n\nsrc-git libremesh https://github.com/libremesh/lime-packages.git;master\nsrc-git profiles https://github.com/libremesh/network-profiles.git\nEOF\n\n\n\nSi quieres compilar la version estable de libremesh reemplaza master por 2020.1\nal final de la línea del feed de libremesh para especificar el branch 2020.1.\n\n\nActualizar los paquetes desde los feeds\n\nscripts/feeds update -a\nscripts/feeds install -a\n\n\n\nEjecutar el menú de configuración\n\nmake menuconfig\n\n\n\nMirar los target (por ejemplo: ATH79), subtarget (por ejemplo: generic) y profile (por ejemplo: tl-wdr3600-v1)\nde tu router en la tabla de dispositivos OpenWrt.\n\n\nPor lo tanto seleccionar  Target System, Subtarget y  Target Profile .\n\n\nDe-seleccionar paquetes problematicos:\n\n\n\n\nBase system &#8594; dnsmasq\n\n\nNetwork &#8594; odhcpd-ipv6only\n\n\n\n\nOpcional, de-seleccionar paquetes no usados:\n\n\n\n\nNetwork &#8594; ppp\n\n\n\n\nOpcional, de-seleccionar ubicaciones de feeds erróneas:\n\n\n\n\nImage configuration &#8594; Separate feed repositories &#8594; Habilitar feed libremesh\n\n\nImage configuration &#8594; Separate feed repositories &#8594; Habilitar feed profiles\n\n\n\n\nSeleccionar (Presiona la tecla espacio hasta que un asterisco  aparezca, así como  &lt;&gt;) paquetes LibreMesh:\n\n\n\n\nLiMe &#8594; lime-system (Sistema de archivos de LibreMesh )\n\n\nLibreMesh &#8594; lime-proto-babeld (Soporte del protocolo babeld de LiMe)\n\n\nLibreMesh &#8594; lime-proto-batadv (Soporte del protocolo batman-adv de LiMe)\n\n\nLiMe &#8594; lime-proto-anygw (Soporte del protocolo anygw de LiMe)\n\n\nLiMe &#8594; lime-hwd-openwrt-wan (Respetar la interfaz WAN de OpenWrt por defecto )\n\n\nLiMe &#8594; shared-state-babeld_hosts (Modulo babeld-hosts para estado compartido)\n\n\nLiMe &#8594; shared-state-bat_hosts (Modulo bat-hosts para estado compartido)\n\n\nLiMe &#8594; shared-state-nodes_and_links (modulo nodes_and_links para estado compartido)\n\n\nLiMe &#8594; lime-app (LimeApp)\n\n\nLiMe &#8594; Offline Documentation &#8594; lime-docs-minimal (Documentación mínima de LibreMesh)\n\n\n\n\nSe recomiendan algunos paquetes más, pero no son obligatorios para el funcionamiento de una Red LibreMesh. Considere evitar seleccionar los siguientes\npaquetes solo si la imagen creada es muy grande y no soporta la memoria del router.\n\n\n\n\nLiMe &#8594; check-date-http (Mantenga la fecha local bajo NTP demasiado lejana)\n\n\nLiMe &#8594; Offline Documentation &#8594; lime-docs (Documentación en ingles sobre LibreMesh)\n\n\nLiMe &#8594; lime-hwd-ground-routing (Administrar VLANs 802.1q para enrutamiento cableado)\n\n\nLiMe &#8594; lime-debug (utilidades para depurar libremesh)\n\n\n\n\nAdemás y opcionalmente, https para la interfaz web puede ser habilitar seleccionando ( tenga en cuenta que la interfaz web se mostrará como no\nsegura):\n\n\n\n\nLibraries &#8594; libustream-wolfssl\n\n\nUtilities &#8594; Encryption &#8594; px5g-standalone\n\n\n\n\nFinalmente, también las conexiones mesh 802.11s pueden protegerse con contraseña, esto requerirá una configuración específica y este paquete\npara ser seleccionado:\n\n\n\n\nNetwork &#8594; wpad-mesh-wolfssl\n\n\n\n\ny este para ser de-seleccionado:\n\n\n\n\nNetwork &#8594; wpad-basic\n\n\n\n\n\n\n\n\n\n\n\nPara tener paquetes adicionales, la forma más sencilla es seleccionarlos en menuconfig. Posteriormente se podrán instalar más paquetes por medio de\nopkg, pero algunos de estos requieren una configuración de kernel específica. Esto se puede lograr siguiendo estas instrucciones adicionales relacionadas con el kernel vermagic.\nTenga en cuenta que esto aumentará considerablemente el tiempo y espacio de almacenamiento de la compilación.\n\n\n\n\n\n\nGuardar y salir.\n\n\nFinalmente, compilar la imagen\n\nmake -j$(nproc)\n\n\n\nSi todo va bien, deberia de encontrar los binarios producidos dentro del directorio bin/.\n\n\n\n\nEnvío de Parches\n\n\nAceptamos solicitudes pull a través de GitHub. Pero los parches los parches también se pueden enviar a través de la\n lista de correos lime-dev.\n\n\n\n\nPresencia en la Web\n\n\nLa página que tu estas leyendo es generada de archivos de texto usando\nAsciiDoc además de Jekyll.\n\n\nCualquier cambio hecho al repositorio de la web será reflejado en nuestro sitio web libremesh.org .\n\n\nPara generar esta página localmente:\n\n\n\ngit clone https://github.com/libremesh/libremesh.github.io.git\ncd libremesh.github.io &amp;&amp; bundle install\nbundle exec jekyll serve\n\n\n\nPara más detalles, revisar el README en Github.\n\n\nSi deseas contribuir con la documentación, envía parches a nuestra lista de correos o abre una solicitud de pull en GitHub.\nUna forma facil de editar y solicitar un pull de un archivo es haciendo click en el botón \"Editar esta página\" en la parte superior derecha de la página web.\n\n\nPor favor, usa la Sintaxis de AsciiDoc para contribuciones de la página web.\n\n\n"}
,{
"location": "/docs/configuration/es_faq-and-recommendations.html",
"lang": "es",
"title": "FAQ y recomendación",
"content": "\nNo editar otros archivos de configuración que no sean de libremesh\n\n\nLa configuración de un nodo libremesh solo debe realizarse a travez de los archivos de configuración de libremesh\ny nunca editando directamente los otros archivos de configuración.\nEsto es así ya que los cambios realizados en archivos de configuración por fuera del sistema de\nconfiguración de libremesh se pueden perder cuando:\n\n\n\n\nse realice un cambio en la configuración de libremesh\n\n\nse haga un upgrade de firmware\n\n\n\n\n\n\nNunca modificar los archivos con valores por defecto ni los autogenerados\n\n\nA pesar de que podria ser cómodo modificar directamente /etc/config/lime-defaults o inclusive\n/etc/config/lime-autogen esto no debe hacerse ya que en el futuro cuando querramos entender\nla configuración que tenemos del nodo no vamos a poder distinguir si cambiamos una configuración o no.\n\n\n\n\nQuiero cambiar una opción para probar, dónde la cambio?\n\n\nEn la configuración de Nodo: /etc/config/lime-node\n\n\n\n\nTengo que configurar todas las opciones?\n\n\nNo, las configuraciones por del nivel Defecto proveen una configuración que permite tener una\nexperiencia de red mesh sin tener que cambiar nada.\n\n\n\n\nCómo hago para ver todas las opciones estan en uso actualmente en un nodo?\n\n\nVer el archivo /etc/config/lime-autogen\n\n\n\n\nQuiero cambiar algo pero pero no encuentro una opcion de libremesh para realizarlo\n\n\nPara eso existen las [generic-configs] y los [lime-assets]\n\n\n\n\n¿Cómo hago?\n\n\n\n\nCómo usar las configuraciones de ap, apnode, mesh\n\n\nCómo poner una radio como cliente de otra red (para que el nodo haga de gateway)\n\n\nCómo poner un password de administración para toda la red\n\n\nCómo ponerle password al wireless\n\n\n\n\nPara información detallada de estas preguntas puedes ver los ejemplos en {lime-example}.\n\n\n"}
,{
"location": "/es_getit.html",
"lang": "es",
"title": "¡Obtener!",
"content": "\nDescargar Binarios Precompilados\n\n\nOfrecemos imagenes de firmware precompiladas de la versión estable de LibreMesh 2020.1 con configuraciones genericas. Esta es la\nforma más facil de obtener e instalar LibreMesh en tu router. La imagen de la  versión estable se puede encontrar en el sitio de descargas.\n\n\n\n\nCompilar localmente la última versión del codigo de LibreMesh usando buildroot de OpenWrt\n\n\nConsultar la pagina de Desarrollo.\n\n\n\n\nProcedimiento de Instalación\n\n\nPara el procedimiento de instalación, leer nuestra  Guía de Inicio Rápida.\n\n\n"}
,{
"location": "/es_howitworks.html",
"lang": "es",
"title": "Cómo Funciona",
"content": "\nObjetivos a alcanzar\n\n\n\n\nEscalabilidad\n\n\nSegmentación de Red\n\n\nRoaming en capa 2 en ciertas áreas\n\n\nSelección inteligente de puerta de enlace con redundancia y posibilidad de elección del usuario\n\n\nCompatibilidad con la mayoria de los escenarios existentes\n\n\nUna simple imagen de firmware para toda la red (para bajo nivel, para troncales, para empresas, para despliegues rápidos)\n\n\n\n\n\n\nLo esencial\n\n\nLa arquitectura de red diseñada para LibreMesh se basa en dos capas:\n\n\nNube Capa 2\n\nLa nube en la capa 2 utiliza el protocolo de enrutamiento dinámico BATMAN-ADV\n\n\n\n\n\n\n\n\n\nB.A.T.M.A.N Advanced es un protocolo de enrutamiento mesh que se ejecuta en el espacio del kernel.\nIncluso si la topologia de red esta hecha de multiples nodos y multiples saltos,\nB.A.T.M.A.N Advanced abstrae a un unico dominio de difusión (broadcast) de la capa 2. Entonces,\ndesde la perspectiva del usuario toda la mesh se verá como una sola LAN. Esta arquitectura es robusta\npara propositos de roaming, por lo tanto las conexiones TCP y UDP no se pierden incluso al mover y cambiar de puntos de acceso (AP&#8217;s).\n\n\n\n\n\nRed en capa 3\n\nLa capa de red 3 utiliza por defecto el protocolo de enrutamiento BMX\n\n\n\n\n\n\n\n\n\nBMX6 (o la nueva versión BMX7) es un protocolo de enrutamiento dinámico nativo de IPv6 el cual ofrece muchas funciones\navanzadas y una pequeña sobrecarga de red, gracias a la estrategia vector-distancia y su conjunto de optimizaciones.\nLa versión 7 tiene además extensiones de enrutamiento de seguridad.\n\n\n\n\n\nCombinando las capas\n\nPor defecto, todos los nodos corren ambos protocolos (BMX y BAT-ADV), pero en diferentes VLANs.[1]\nAsí que el enrutamiento se aisla por MAC.\n\n\n\n\n\n\n\n\n\nLa VLAN BMX es siempre la misma, por lo que todos los nodos conectados a la capa de enlace se verán entre sí.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa VLAN BATADV depende del identificador de la nube el cual es calculado (por defecto) usando el SSID del AP.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa red BMX será una para toda la mesh, pero la red BAT-ADV puede dividirse en varias nubes.\n\n\n\n\n\n\n\n\n\n\n\nEsta configuración aísla las nubes de capa 2.\nPor ejemplo, un vecindario, un complejo de empresa o una red de punto de acceso a nivel de calle pueden optar por aislar su LAN del resto de la red.\nSin embargo, al mismo tiempo, podrán llegar al resto de los nodos utilizando la red enrutada de capa 3.\n\n\nEl roaming estará disponible dentro de la nube, por lo que se puede realizar sesiones TCP, transmisión de video, o incluso una llamada SIP mientras se mueve por la red (roaming). Por otra parte, gracias a la segmentación de la capa 3 los problemas comunes que se encuentran en una red puenteada (bridged) - tales como tormentas de difusión o nightmares DHCP - no perturbaran el correcto funcionamiento de la red.\n\n\n\n\n\n\n\n\n\nTodo es automático y transparente para la persona usuaria\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn detalle\n\n\nLos Puntos de Acceso Inalambricos de la misma nube comparten parametros comunes:\n\n\n\n\nEl SSID (El nombre de Identificación del AP Inalámbrico)\n\n\nDirecciones IPv4  y IPv6 especiales Anycast.[2].\n\n\nUna dirección especial de MAC anycast\n\n\nUn servidor DHCP/RA para proveer IPs validas de la nube a los clientes.\n\n\n\n\nAsí un cliente conectado a una AP puede moverse por la mesh sin necesidad de renovar su configuración IP.\nIncluso en desde el punto de vista de la capa MAC será la misma.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEl archivo del listado de IPs entregadas por DHCP se comparte entre la nube para prevenir colisiones.\n\n\nSiempre que todos los nodos compartan el mismo anycast MAC/IP, desde el punto de vista del cliente, es completamente transparente. La puerta de enlace es siempre la misma aunque el nodo mesh (donde estén conectados) puede cambiar.\n\n\n\n\n\n\n\n\n\n\n\nCuando un cliente quiere salir de la LAN (nube) para conectarse a Internet o cualquier otra red, enviará los paquetes a la dirección de puerta de enlace anycast especial. El nodo donde el cliente esta fisicamente conectado se encargará de esto.\n\n\n\n\n\n\n\n\n\nUna regla de ebtables.[3] en el puente LAN/AP previene que los paquetes enviados a la dirección anycast se propaguen a través de la nube.\nEl nodo mesh en donde el cliente está asociado recibe el paquete, pero no los otros nodos.\n\n\n\n\n\n\n\n\n\n\n\nEl paquete es enrutado a través de la capa de red 3 BMX a la mejor puerta de enlace de Internet. Esto puede ser un nodo de la misma nube o cualquier otro de otra nube lejana.\n\n\n\n\n\n\n\n\n\nBMX tiene una potente función de puerta de enlace inteligente que selecciona automaticamente el mejor nodo de puerta de enlace de Internet teniendo en cuenta el ancho de banda disponible.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn el camino de vuelta el paquete llegará a algún nodo en la nube pero puede que no sea el mismo nodo.\nNo obstante el paquete se entregará correctamente al remitente. Esto es porque la puerta de enlace inteligente de BMX utiliza\ntuneles unidireccionales para garantizar que se utilice la puerta de enlace seleccionada.\n\n\n\n\n\n\n\n\n\n\n1. LAN Virtual aislada, por ejemplo wlan0.13\n\n\n2. IP compartida por multiples dispositivos en la red\n\n\n3. algo como iptables pero para la capa 2 de red\n\n"}
,{
"location": "/docs/es_index.html",
"lang": "es",
"title": "Documentación",
"content": "\nContrubuyendo a la documentación\n\n\nLas contribuciones a la documentación son muy bienvenidas! Consulte la sección en desarrollo.\n\n\n\n\nPresentaciones y Documentos\n\n\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Presentación realizada en SAX2016\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (vista previa en HTML)\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (PDF)\n\n\nInteroperabilidad entre la infraestructura clásica y las redes LibreMesh en Guifi.net - Tesis de Gioacchino Mazzurco (Código fuente)\n\n\nWireless Mesh, una red troncal de Internet escalable y fácil de desplegar - Tesis de Paul Spooren\n\n\n\n\n"}
,{
"location": "/es_index.html",
"lang": "es",
"title": "Inicio",
"content": "\nIntroducción a LibreMesh\n\n\nLibreMesh es un framework modular para crear firmwares basados en OpenWrt para nodos wireless mesh.\nVarias comunidades de todo el mundo usan LibreMesh como\nbase para sus redes comunitarias.\n\n\n\n\n\nEl proyecto LibreMesh incluye el desarrollo de varias herramientas.\nEl firmware (la pieza principal) permite un simple despliegue de redes de malla de múltiples radios,\nautoconfigurables pero versátiles.\n\n\n\n\n\n\n\n\n\nRevisa Cómo funciona para ver las ideas básicas de la arquitectura.\nVisita Get it para saber cómo empezar a usarlo.\nLee algo de Documentación para entender mejor cómo funciona.\nY únete a nosotros en el listas de correo para seguir las discusiones actuales.\n\n\n\n\n\n\n\n\nRedes Mesh\n\n\nLas redes de mesh o malla son aquellas en las que todos los participantes (nodos) pueden rutear (encaminar)\nel tráfico de otros participantes.\nAsí que no hay puntos centrales y la topología física puede ser completamente aleatoria.\n\nPor lo general, las redes de malla están descentralizadas, organizadas desde las bases, desplegadas\ny mantenidas por las personas que las utilizan.\nCreemos que esta es la única manera de lograr una verdadera red libre de\ncontrol de los gobiernos y las empresas mundiales.\n\n\n\n\nRedes Libres para una sociedad libre\n\n\nEntendemos que una red libre como una red de telecomunicaciones debe cumplir estos tres puntos:\n\n\n\n\nSer abierta, así que cualquiera puede conectarse a ella si es físicamente posible\n\n\nSer neutral, por lo que no hay preferencias por el tipo, origen o destino de los datos\n\n\nSer libre como en la libertad\n\n\n\n\nEn la siguiente lista intentamos recopilar algunas redes libres existentes (envíanos un e-mail si quieres incluir la tuya):\n\n\n\n\n\n\n\n\n\n\nAlterMundi\nArgentina\nhttp://altermundi.net\n\n\n\nGuifi.net\nPenínsula ibérica\nhttp://guifi.net\n\n\n\nFreiFunk\nAlemania\nhttp://freifunk.net\n\n\n\nFunkFeuer\nAustria\nhttps://www.funkfeuer.at\n\n\n\nNinux.org\nItalia\nhttp://ninux.org\n\n\n\n\n\n\n\nFirmware y dispositivos embebidos\n\n\nUn dispositivo embebido es una pequeña computadora.\nAn embedded device is a small computer. Normalmente el sistema operativo que se ejecuta en ordenadores\ntan pequeños se llama Firmware. Nuestra forma de desplegar redes libres es instalando nuestro propio\nfirmware a los dispositivos (normalmente routers WiFi).\n\nNuestro sistema se basa en el proyecto OpenWrt, que a su vez se basa en el conocido sistema operativo Linux.\nTodo lo que desarrollamos es software libre para una sociedad libre para que cualquiera pueda\nusar, copiar, modificar y distribuir de acuerdo con la\nlicencia AGPL.\n\n\n\n\nHistoria\n\n\nEl proyecto LibreMesh (LiMe) se inició en 2013 por un conjunto de activistas de las redes libres\nde varias culturas y diferentes proyectos en todo el mundo,\ndispuestos a crear una solución común para el despliegue de redes libres.\n\n\nIn 2017 Shuttleworth Foundation awarded us with a\nFlash Grant\n\n\n\n"}
,{
"location": "/docs/configuration/faq-and-recommendations.html",
"lang": "en",
"title": "FAQ and recommendations",
"content": "\nDo not edit other configuration files that are not free mesh\n\n\nThe configuration of a libremesh node should only be done through the libremesh configuration files\nand never by directly editing the other configuration files.\nThis is because changes made to configuration files outside the\nfreemesh settings can be lost when\n\n\n\n\na change is made to the libremesh configuration\n\n\na firmware upgrade is made\n\n\n\n\n\n\nNever modify the files with default values or the autogenerated ones\n\n\nAlthough it might be convenient to directly modify /etc/config/lime-defaults or even\nThis should not be done because in the future when we want to understand\nthe configuration that we have of the node we will not be able to distinguish if we change a configuration or not.\n\n\n\n\nI want to change an option to test, where do I change it?\n\n\nIn the Node configuration: /etc/config/lime-node\n\n\n\n\nDo I have to configure all the options?\n\n\nNo, the configurations by the Default level provide a configuration that allows you to have a\nmesh network experience without having to change anything\n\n\n\n\nHow do I see all the options currently in use on a node?\n\n\nSee the /etc/config/lime-autogen file.\n\n\n\n\nI want to change something but I can&#8217;t find a freemaster option to do it\n\n\nThis is why there are [generic-configs] and [lime-assets]\n\n\n\n\nHow do I do it?\n\n\n\n\nHow to use the ap, apnode, mesh settings\n\n\nHow to put a radio as a client of another network (so that the node acts as a gateway)\n\n\nHow to set an administration password for the whole network\n\n\nHow to password protect the wireless\n\n\n\n\nFor detailed information on these questions you can see the examples in {lime-example}.\n\n\n"}
,{
"location": "/getit.html",
"lang": "en",
"title": "Get it!",
"content": "\nBuild latest LibreMesh code, locally using OpenWrt buildroot\n\n\nRefer to the Development page, use the v2020.4 tag for compiling the latest release: LibreMesh 2020.4 ExpansiveEmancipation.\n\n\n\n\nDownload Precompiled Binaries\n\n\nThe latest stable release is available as a precompiled binary only for devices within the ath79 target of OpenWrt. Look for your router model in our downloads website:\n\n\nhttps://downloads.libremesh.org/current/\n\n\nand double check the correct file to use using the information available on the OpenWrt wiki, see their Table of Hardware here.\n\n\n\n\nInstallation procedure\n\n\nFor installation procedure read our Quick Starting Guide.\n\n\n"}
,{
"location": "/howitworks.html",
"lang": "en",
"title": "How it works",
"content": "\nObjectives to Achieve\n\n\n\n\nEnable non-expert users to set up a mesh network and perform basic configuration and management via a web interface usable on smartphones\n\n\nEncourage non-expert users to empower themselves deepening their technical understanding of mesh networks\n\n\nScalability\n\n\nNetwork segmentation\n\n\nLayer 2 roaming inside certain areas\n\n\nSmart gateway selection with redundancy and possibility of user-choice\n\n\nCompatibility of most of the existing scenarios\n\n\nA single firmware image for all of your network (for ground level, for backbone, for companies, for quick deployments, etc.)\n\n\n\n\n\n\nThe Basics\n\n\nThe network architecture designed for LibreMesh is based on two layers:\n\n\nCloud layer 2\n\nThe cloud layer 2 uses the dynamic routing protocol BATMAN-ADV\n\n\n\n\n\n\n\n\n\nB.A.T.M.A.N. Advanced is a mesh routing protocol that runs in kernel space.\nEven if the network topology is made of multiple nodes and multiple hops, B.A.T.M.A.N. Advanced abstracts it to a single layer 2 broadcast domain.\nSo from the user&#8217;s perspective the entire mesh will look like a single LAN.\nThis architecture is robust for roaming purposes, thus TCP and UDP connections are not lost even when moving and changing access points (AP&#8217;s).\n\n\n\n\n\nNetwork layer 3\n\nThe whole network layer 3 uses by default the routing protocol BMX\n\n\n\n\n\n\n\n\n\nBMX6 (or the new version BMX7) is an IPv6 native dynamic routing protocol which offers very advanced features and a small\nnetwork overhead, thanks to the distance-vector strategy and its set of optimizations. Version 7 has, in addition, security routing extensions.\n\n\n\n\n\nMixing layers\n\nBy default, all nodes are running both routing protocols (BMX and BAT-ADV), but on different VLANs.[1].\nSo the routing is isolated by the MAC layer.\n\n\n\n\n\n\n\n\n\nThe BMX VLAN is always the same, so all link-layer connected nodes will see each other.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe BATADV VLAN depends on the cloud identifier which is calculated (by default) using the AP SSID.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe BMX network will be a single one for all of the mesh, but the BAT-ADV network may be split across several clouds.\n\n\n\n\n\n\n\n\n\n\n\nThis configuration isolates the layer 2 clouds.\nFor instance a neighborhood, a company complex, or a street level hotspot network may choose to isolate their LAN from the rest of the network.\nHowever at the same time, they will be able to reach the rest of the nodes using the layer 3 routed network.\n\n\nRoaming will be available inside the cloud, so TCP sessions, video streaming, or even a SIP call can be done while moving around.\nOn the other hand, thanks to layer 3 segmentation, the common problems found in a layer 2 bridged network&#8201;&#8212;&#8201;such as Broadcast storms or DHCP nightmares&#8201;&#8212;&#8201;will not disturb the correct operation of the network.\n\n\n\n\n\n\n\n\n\nEverything is automatic and transparent for the end user.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Details\n\n\nWiFi Access Points of the same cloud share common parameters:\n\n\n\n\nThe SSID (the WiFi AP identification name)\n\n\nSpecial anycast.[2] IPv4 and IPv6 addresses\n\n\nA special anycast MAC address\n\n\nThe DHCP/RA server to provide valid IPs from the cloud to the clients.\n\n\n\n\nThus a client attached to an AP can move around the mesh without the need to renew their IP configuration.\nEven the MAC layer will be the same from their point of view.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe DHCP lease file is shared among the cloud to prevent collisions using\nA.L.F.R.E.D.\n\n\nAs long as all nodes share the same anycast MAC/IP, from the client point of view it is fully transparent.\nThe gateway is always the same even though the mesh node (where they are attached) may change.\n\n\n\n\n\n\n\n\n\n\n\nWhen a client wants to go out from the LAN (cloud) to reach the Internet or any other network,\nit will send the packets to the special anycast gateway address.  The node where the client\nis physically attached will take care of this.\n\n\n\n\n\n\n\n\n\nAn ebtables.[3] rule in the LAN/AP bridge prevents\npackets sent to the anycast address from propagating through the cloud.  The mesh node where the client\nis associated gets the packet but not the other nodes.\n\n\n\n\n\n\n\n\n\n\n\nThe packet is routed through the BMX layer 3 network to the best Internet gateway. It may be a node from the same cloud or any other from another cloud far away.\n\n\n\n\n\n\n\n\n\nBMX has a powerful smart gateway functionality which automatically selects the best Internet gateway node taking into account the available bandwidth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn the way back the packet will arrive to some node in the cloud but it might not be the same node.\nNevertheless the packet will be correctly delivered to the originator.\nThis is because BMX smart gateway uses 1-way tunnels to ensure the selected gateway is used.\n\n\n\n\n\n\n\n\n\n\n1. Virtual isolated LAN, for instance wlan0.13\n\n\n2. IP shared by multiple devices in the network\n\n\n3. something like iptables but for network layer 2\n\n"}
,{
"location": "/docs/hardware/",
"lang": "en",
"title": "Hardware",
"content": "\nInstalling LibreMesh is not always as easy as we would like to.\nIt depends on the router model, revision and so on.\nThe best way for getting an updated set of instructions is to find your model on the OpenWrt hardware page.\nHowever, to cover some specific scenarios, we provide a list of articles which might help you.\n\n\nPlease, take into account that these pages are third-party contributed, so if you find the opportunity expand this page with the \"Edit this page\" button in the upper right corner of this page.\n\n\nSuggested Hardware\n\n\nHere we list some characteristics which should ensure a full compatibility with LibreMesh.\nPlenty of other OpenWrt-supported devices not matching these characteristics can also be used but some of LibreMesh features could be malfunctioning.\n\n\nThe suggested devices have the following characteristics:\n\n\n\n\nbe supported by OpenWrt 19.07;\n\n\nhave at least 8 MB of flash memory;\n\n\nhave at least 64 MB of RAM memory;\n\n\nhave Atheros 9k radios (ath9k driver);\n\n\nhave at least one 2.4 GHz radio and one 5 GHz radio;\n\n\nhave at least one ethernet port labelled as LAN.\n\n\n\n\nThe list of the dual band devices with Atheros 9k radio supported by OpenWrt can be found here.\n\n\nPlease check the device-specific installation procedure on the OpenWrt wiki, in some cases it can be prohibitively complex.\n\n\n\n\nTested Hardware\n\n\nThis is a list of devices that were tested by the community and reported as fully compatible with LibreMesh, it is by no means a complete list of the working devices.\n\n\n\n\nXiaomi MiWiFi R3\n\n\nXiaomi Mi WiFi R3G\n\n\nYouHua WR1200JS\n\n\nLibreRouter\n\n\nTP-Link WDR3500\n\n\nTP-Link WDR3600\n\n\nTP-Link WDR4300\n\n\nDragino MS14\n\n\nAlix 2d2\n\n\nUbiquiti UniFi AP\n\n\nUbiquiti AirRouter\n\n\nUbiquiti AirGateway\n\n\nUbiquiti NanoBridge M2 and M5\n\n\nUbiquiti NanoStation M2 XW and LoCo M2 XW\n\n\nUbiquiti NanoStation M5 XW and LoCo M5 XW\n\n\nUbiquiti PicoStation M2\n\n\nUbiquiti Bullet M2 and M5\n\n\nUbiquiti Rocket M2 and M5\n\n\nBuffalo WSR-1166DHP\n\n\nFlex mARC\n\n\nWestern Digital My Net N600\n\n\nGL.iNet GL-AR300M16\n\n\n\n\n\n\nSupported only in the release candidate\n\n\nThis is hardware that has been tested and works, but only with the latest LibreMesh code that is compiled on top of OpenWrt 22.03.\n\n\n\n\nXiaomi Mi Router 4A Gigabit Edition v1 v2 cannot be flashed with OpenWrt and there is no indication on the box for understanding if you are buying v1 or v2. Also, requires the\n\n\nPlasma Cloud PA1200\n\n\n\n\n\n\nSpecific Devices Instructions\n\n\n\n\nTP-Link\n\n\nXiaomi MiWiFi R3\n\n\n\n\n"}
,{
"location": "/docs/",
"lang": "en",
"title": "LibreMesh Documentation",
"content": "\nContributing to the Documentation\n\n\nContributions to the documentation are very welcome, check out the web presence section in the development page.\n\n\n\n\nPresentations and Documents\n\n\n\n\nInteroperability between classic infrastructure and LibreMesh networks in Guifi.net - Presentation delivered at SAX2016\n\n\nInteroperability between classic infrastructure and LibreMesh networks in Guifi.net - Gioacchino Mazzurco thesis (Source)\n\n\nWireless Mesh as easy deployable\nand scaleable Internet backbone - Paul Spooren bachelor thesis\n\n\n\n\n"}
,{
"location": "/",
"lang": "en",
"title": "Home",
"content": "\nIntroduction to LibreMesh\n\n\nLibreMesh is a modular framework for creating OpenWrt-based firmwares for wireless mesh nodes. Several communities around the world use LibreMesh as the foundation of their local mesh firmwares.\n\n\n\n\n\nThe LibreMesh project includes the development of several tools.\nThe firmware (the main piece) allow simple deployment of auto-configurable, yet versatile, multi-radio mesh networks.\n\n\n\n\n\n\n\n\n\nCheck How it Works to see the basic architecture ideas.\nVisit Get it to know how to start using it.\nRead some Documentation to understand better how it works.\nAnd join us in the mailing lists to follow the current discussions.\n\n\n\n\n\n\n\n\nMesh Networks\n\n\nMesh networks are such networks where all participants (nodes) are able to route traffic from other participants.\nSo there are not central points and the physical topology can be completely random.\n\nUsually mesh networks are decentralized, bottom-up organized, deployed and maintained by the people using them.\nWe believe this is the only way for achieving a real free network out of\ncontrol of the governments and global enterprises.\n\n\n\n\nFree Networks, Free Society\n\n\nWe understand that a free network as a telecommunications network should accomplish these three points:\n\n\n\n\nIt is open, so anyone can connect to it if physically possible\n\n\nIt is neutral, so there are not preferences for the kind, origin or destination of the data\n\n\nIt is free as in freedom (libre means free as in \"free speech\" in Spanish)\n\n\n\n\nOrganizations supporting LibreMesh:\n\n\n\n\n\n\n\n\n\n\nAlterMundi\nArgentina\nhttp://altermundi.net\n\n\n\nFreiFunk\nGermany\nhttp://freifunk.net\n\n\n\nFunkFeuer\nAustria\nhttps://www.funkfeuer.at\n\n\n\nGuifi\nIberian peninsula\nhttp://guifi.net\n\n\n\nIbebrasil\nBrasil\nhttps://ibebrasil.org.br/\n\n\n\nLibreRouter\nGlobal\nhttps://librerouter.org/\n\n\n\nNinux.org\nItaly\nhttp://ninux.org\n\n\n\nWakoma\nGlobal\nhttps://wakoma.co/\n\n\n\n\n\nCommunity mesh networks using Libremesh:\n\n\n\n\n\n\n\n\n\n\nAntennine\nAppennino Bolognese\nhttps://antennine.noblogs.org\n\n\n\nCalafou\nCatalunia\nhttps://calafou.org/\n\n\n\nCoolab\nBrasil\nhttps://www.coolab.org/\n\n\n\nJanastu CowMesh\nRural Karnataka\nhttps://open.janastu.org/projects/cowmesh\n\n\n\n\n\nSeveral other community networks are using or used LibreMesh on their devices with their own customizations (network profiles), some of these are listed here.\n\n\n\n\nFirmware and Embedded Device\n\n\nAn embedded device is a small computer. Usually the operating system running in such small computers is called Firmware.\nOur way of deploying free mesh networks is by installing our own firmware to the devices (usually WiFi routers).\n\nOur system is based on the OpenWrt project, which at the same time is based on the well known Linux operating system.\nEverything we develop is free software for a free society so anyone can\nuse, copy, modify and distribute according with\nAGPL license.\n\n\n\n\nHistory\n\n\nThe LibreMesh project (LiMe) was started in 2013 by a set of free network\nactivists from several cultures and different projects around the world,\nwilling to create a common solution for the deployment of free mesh networks.\n\n\nIn 2017 Shuttleworth Foundation awarded us with a\nFlash Grant\n\n\n\n"}
,{
"location": "/docs/it_guida_rapida_per_iniziare.html",
"lang": "it",
"title": "Guida Rapida Per Iniziare",
"content": "\nHardware Compatibile\n\n\nE’ consigliato che i router abbiamo almeno 8MB di memory flash. Per router con 4MB di memoria usa lo speciale firmware chiamato -mini.\n\n\nI router seguenti sono stati testati con LibreMesh ed hanno 8MB di memoria flash:\n\n\n\n\nTP-Link WR842ND\n\n\nTP-Link WR1043ND\n\n\nTP-Link WDR3500\n\n\nTP-Link WDR3600\n\n\nTP-Link WDR4300\n\n\nDragino MS14\n\n\nAlix 2d2\n\n\nUbiquiti Unifi AP\n\n\nUbiquiti AirRouter\n\n\nUbiquiti AirGateway\n\n\nUbiquiti NanoStation M5 XW\n\n\nUbiquiti NanoStation M5 XM\n\n\nUbiquiti NanoBridge M5\n\n\nUbiquiti NanoStation LoCo M2\n\n\nUbiquiti PicoStation M2\n\n\nUbiquiti Bullet M2\n\n\n\n\nI modelli con 4 MB che sono stati testati usando la versione -mini:\n\n\n\n\nTP-Link WR740N\n\n\nTP-Link WR741ND\n\n\nTP-Link WR841ND\n\n\n\n\nPer informazioni dettagliate su questi router, guarda nelle pagine dedicate all’ hardware.\n\n\nMolti altri modelli sono supportati anche se non li abbiamo mai testati (o non lo sappiamo), guarda la lista dei nostri firmware proposti nei download.\n\n\n\n\nOttieni il Firmware\n\n\nScegli una fonte per il tuo firmware:\n\n\n\nPer un firmware precompilato con i parametri di default (e.g. wireless AP name LibreMesh.org) puoi andare alla pagina di downloads;\n\n\nè possibile generare una immagine del firmware sul proprio computer, è una procedura più complessa, usando lime-sdk. Supporta l&#8217;utilizzo di profili personalizzati dalle diverse comunità.\n\n\nLa nostra piattaforma di Cucina permette di generare una immagine del firmware direttamente online. Supporta l&#8217;utilizzo di profili personalizzati dalle diverse comunità.\n\n\n\n\nPer avere più opzioni vai alla pagina Ottienilo.\n\n\n\nScarica il firmware giusto\n\nTrova nei download il modello e nome giusto del tuo router. Potresti incappare in diverse varianti o simili. Puoi trovare istruzioni più dettagliate riguardo al tuo modello di router su lede.\n\n\n\n\nSe stai installando per la prima volta (il router ha il firmware originale) scegli il link che finisce per -factory.bin.\n\n\nSe stai aggiornando una preesistente installazione di Libremesh o di Openwrt o LEDE, scegli il link che finisce per -sysupgrade.bin.\n\n\n\n\n\n\n\nProcedura di installazione\n\n\nApri l’interfaccia web del tuo router\n\nUsando un cavo ethernet (rj45) connetti la porta LAN del tuo pc a quella del tuo router.\nSii sicuro che sul tuo pc ci sia solo una interfaccia di rete attiva e che questa sia la scheda ethernet. (es: disabilità l’interfaccia wireless)\n\n\nSe stai installando per la prima volta e quindi il router ha il firmware di fabbrica, segui le istruzioni dei costruttori per connettere il router. Di solito c’è scritto un IP sulla scatola originale o sotto il router stesso. Di solito viene assegnato di default l’IP 192.168.0.1 o 192.168.1.1 e digitandoli nell’url di un browser, puoi raggiungere la loro interfaccia web.Se non riesci a connetterti al router perchè non riesci a scoprire il suo IP, puoi provare l’indirizzo IP del tuo gateway; ottienilo apri un terminale e digita netstat -rn (mac), o ip route show default (GNU/Linux). Puoi trovare altri suggerimenti per scovare l’IP qui e qui.\n\n\nSe il router ha già operativo sopra OpenWrt o LEDE possono essere applicate le istruzione del paragrafo sotto.\n\n\nSe il router ha già sopra LibreMesh, apri un browser e vai alla pagina http://thisnode.info dovresti trovare l’interfaccia web.\n\n\nQuindi ti puoi loggare come admin (se sono quelle di default, la username e password sono scritte sulla scatola del router, o in OpenWrt di default non c’è password di amministrazione, in LEDE invece è una password vuota, fai solo invio).\n\n\nPer più opzini di connessione vai a vedere la pagina Come connettere i nodi.\n\n\nSe hai il sospetto di non poter connettere il tuo router alla rete per configurazioni danneggiate, segui la guida Risolvi i problemi.\n\n\n\nFlashing\n\n\n\n\n\n\n\n\nPer i router Ubiquity AirMAx con una installazione di AirOS 5.6.x, se flashati con Libremesh si bloccano e il recupero non è agevole (devi aprirgli la scatola e connetterti direttamente sulla porta seriale, in oltre perderesti irrimediabilmente i dati di calibrazione della radio). Se il tuo router va con una AirOS 5.6.x, devi portarlo ad una versione precedente: la AirOS 5.5.x per poi flasharlo con Libremesh.\n\n\n\n\n\n\nUna volta che ti sei loggato come admin o come root nel tuo router, cerca la pagina “firmware upgrade”.\n\n\n\n\n\n\n\n\n\nSe c’è l’opzione “Keep Settings”, ovvero “mantieni le impostazioni”, fai attenzione che NON sia barrata, in OpenWrt/LEDE lo è di default.\n\n\n\n\n\n\nCarica il file prescelto del tuo firmware e clicca su Flash Image. Aspetta qualche minuto fino a quando il processo non è terminato. Riconnetti li l’interfaccia ethernet (per avere un nuovo IP) ed apri nel browser http://thisnode.info.\nComplimenti, ora hai un router con LibreMesh!\n\n\n\n\n\nConnettiti al tuo router LibreMesh\n\n\nConnettiti al router tramite la sua wireless o tramite cavo ethernet ed apri http://thisnode.info nel browser.\n\n\n\n\n\n\n\n\n\nSe è la prima volta che ti connetti in assoluto, ti chiederà di settare una password di amministrazione. Se lasci il tuo router Libremesh senza password di amministrazione potresti trovarti in seri problemi di gestione degli apparati dal lato della confidenzialità dei dati che ci passano.\n\n\n\n\n\n\nPer avere più opzioni di connessione leggi la pagina Come connettersi ai nodi.\n\n\nSe hai il sospetto di non poter connettere il tuo router alla rete per configurazioni danneggiate, segui la guida Risolvi i problemi.\n\n\n\n\nShare the Internet Connection with the LibreMesh Network\n\n\nLibreMesh is automatically sharing with the rest of the mesh network any internet connection is connected to the router WAN port. There&#8217;s no problem if more than one internet gateway is connected to the LibreMesh network, likely the one closest to the client will be used.\n\n\nIf the LibreMesh router has no WAN port (just LAN ports, or just one ethernet port), one of the ethernet ports has to be configured as WAN port in order to share the internet connection. Refer to next section for configuration.\n\n\n\n\nConfiguration\n\n\nWORK IN PROGRESS\n\n\nRefer to the LibreMesh config file page for detailed information.\n\n\n\n\n\n\nUsing the Console Interface (optional)\n\nUntil here we went through the installation, connection and configuration procedures using the LibreMesh web interface.\n\n\nAs in every Linux-based system there&#8217;s the availability of a textual console interface for advanced configuration and hardcore users.\n\n\nThis part of the guide should not be needed for normal LibreMesh use.\n\n\nFlashing Via the Console Interface (optional)\n\n\nThis is possible just if you&#8217;re upgrading an existing OpenWrt, LEDE or LibreMesh installation, not from stock firmware.\n\n\nCopy the downloaded firmware image to the /tmp directory on your target router using the scp command.\n\n\n\n\n\n\n\n\n\nDo not try to copy the firmware image to directories different from /tmp. They have limited memory access.\n\n\n\n\n\n\nIn case the router already has LibreMesh you can do this with\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@thisnode.info:/tmp/\n\n\n\nOtherwise (upgrading from OpenWrt or LEDE) you will need to insert the router IP address in\n\n\n\nscp /LOCAL/PATH/TO/BUILD.bin root@ROUTERIPADDRESS:/tmp/\n\n\n\n\n\n\n\n\n\n\nWhen upgrading from OpenWrt, in order to connect via ssh/scp you will need to have an admin/root password set via the web interface or via SSH and the passwd command.\nCheck out Connecting to your own node for help on this.\n\n\n\n\n\n\nNow connect to the console interface using ssh, if LibreMesh is already running with ssh \\root@thisnode.info or with ssh root@ROUTERIPADDRESS if OpenWrt or LEDE are running.\n\n\nThen enter the /tmp directory where the firmware is present with cd /tmp, check the presence of the file with ls and install it with\n\n\n\nsysupgrade -n lede-ROUTERMODEL-squashfs-sysupgrade.bin\n\n\n\n\n\n\n\n\n\n\nThe -n option for sysupgrade command is needed for discarding the previous configuration files. Omitting the -n option is never a good idea when flashing LibreMesh.\n\n\n\n\n\n\nFor more information on the sysupgrade process, see these OpenWrt instructions.\n\n\n\n\nConfiguring Via the Console Interface (optional)\n\n\nRather than using the web interface, modifying directly /etc/config/lime file allows to access more advanced options but increases the risk of writing broken configuration.\n\n\nYou can use the vi or vim text editor for editing /etc/config/lime, the settings in this file will override the default ones in /etc/config/lime-defaults.\n\n\nUn esempio di configurazione commentata si può trovare nei router in /docs/lime-example.txt o in linea qui mentre su questo sito si può leggere la pagina configurazione di LibreMesh.\n\n\nAfter saving the edits to the lime file, apply the changes to system configuration files launching the lime-config command. Next reboot the router with reboot &amp;&amp; exit to apply the new settings.\n\n\n"}
,{
"location": "/docs/it_index.html",
"lang": "it",
"title": "Documentazione di LibreMesh",
"content": "\nContribuire alla Documentazione\n\n\nSiamo molto felici se ti va di contribuire alla documentazione, guarda la sezione \"The Web Presence\" nella pagina di Sviluppo.\n\n\n\n\nPresentazioni e Documenti\n\n\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - Presentazione consegnata al SAX2016\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (HTML)\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (Stampabile PDF)\n\n\nInteroperabilità tra l&#8217;infrastruttura classica e LibreMesh in Guifi.net - tesi di Gioacchino Mazzurco (Sorgente)\n\n\n\n\n"}
,{
"location": "/docs/configuration/lime-example.html",
"lang": "en",
"title": "lime-example",
"content": "\nhttps://github.com/libremesh/lime-packages/master/packages/lime-docs/files/www/docs/lime-example.txt\n\n\n\n# The /etc/config/lime-defaults file contains the default configuration.\n# To configure LibreMesh insert options in /etc/config/lime-node or /etc/config/lime-community file, these will override the default ones.\n# Interface specific options have to be included in /etc/config/lime-node, if in /etc/config/lime-community they'll cause unpredictable behaviour.\n#\n# The options marked with \"Parametrizable with %Mn, %Nn, %H\"\n# can include %Mn templates that will be substituted\n# with the n'th byte of the primary_interface MAC\n# and %Nn templates that will be replaced by the n'th (n = 1..5) network-identifier byte,\n# calculated from the hash of the ap_ssid value, so that all the nodes that\n# form a mesh cloud (share the same ap_ssid) will produce the same value\n# and %H template that will be replaced by hostname\n# For setting a specific WAN port, don't set it globally in section \"config lime network\", set it in interface specific configuration \"config net ...\" and install the lime-proto-wan package\n# For setting the WAN port on the default WAN port (according OpenWrt), just install the lime-hwd-openwrt-wan package and the configuration will be autogenerated.\n\n#########################################################\n### System options\n\nconfig lime system\n\toption hostname 'LiMe-%M4%M5%M6'\t\t# Parametrizable with %Mn\n\toption domain 'thisnode.info'\t\t\t# DNS domain for the L2 cloud it could be something like mycloud.mynetwork.tld, hosts that get their IP by DHCP will also get a fully qualified domain name like hostname.mycloud.mynetwork.tld\n\toption keep_on_upgrade 'libremesh dropbear minimum-essential /etc/sysupgrade.conf'\t# Files defining the list of files and directories to backup when upgrade. Relative to /lib/upgrade/keep.d if no '/' defined.\n\toption root_password_policy 'DO_NOTHING'\t# When configured to SET_SECRET, the root password secret will be configured as specified in root_password_secret. When set to RANDOM a strong random password will be set if root has no password, use this if your firmware is built with the ssh keys inside. DO_NOTHING does nothing, leaving the root password empty (you will have to set it manually or through FirstBootWizard).\n\toption root_password_secret ''\t\t\t# This is the password hash as stored in /etc/shadow, it is only used when root_password_policy=SET_SECRET. You can generate the secret with 'openssl passwd -1' to be compatible with most openwrt firmwares, use a strong password with at least 10 numbers and letters, the longer the better!. For improved security use \"openssl passwd -6\" for SHA512 (or -5 for SHA256) but be aware that not all firmwares support this.\n\toption deferable_reboot_uptime_s '97200'\n\toption firstbootwizard_configured false\n\toption firstbootwizard_dismissed false\t\t# When true fbw banner will be hidden.\n\n#########################################################\n### Network general option\n\nconfig lime network\n\toption primary_interface eth0\t\t\t# The mac address of this device will be used in different places\n\toption main_ipv4_address '10.%N1.0.0/16'\t# Here you have 4 possibilities: set a static IP and the subnet, like '10.0.2.1/16'; parametrize with %Mn and %Nn, and set the subnet, like '10.%N1.%M5.%M6/16'; set a whole network address (not a specific IP) for getting the IP autocompleted in that network with bits from MAC address, this works also with netmasks other than /24 or /16, like '10.0.128.0/17' (but not valid network addresses, for example '192.0.128.0/16' or '192.0.129.0/17' won't get parametrized); set two different parameters, the first for subnet and the second for nodes' IP parameterization, like '10.0.128.0/16/17', this results in /16 subnet but IP of the LibreMesh routers will be auto-assigned in a /17 range (from 10.0.128.1 to 10.0.255.254).\n\toption anygw_dhcp_start '2'\t\t\t# First IP in the subnet to be used for DHCP for clients. For example, if the subnet is 10.x.0.0/16 and you want the clients to get an IPv4 from a DHCP pool starting from 10.x.100.2, the start parameter will have to be 100 * 256 + 2 = 25602.\n\toption anygw_dhcp_limit '0'\t\t\t# Number of IPs available for DHCP. Use zero for having the DHCP pool ranging from anygw_dhcp_start up to the end of the subnet. For example, if the subnet is 10.x.0.0/16, the start of the DHCP pool is at 10.x.100.2 and you want the DHCP pool to finish at 10.x.127.254, the limit parameter will have to be (127 - 100) * 256 + (254 - 2) + 1 = 7165. Instead, if you want the DHCP pool to go from 10.x.100.2 up to 10.x.255.254 (last valid IPv4 in the /16 subnet) you can just set the limit to zero.\n\toption main_ipv6_address 'fd%N1:%N2%N3:%N4%N5::/64'\t# Parametrizable in the same way as main_ipv4_address. If used, the IP autocompletion will fill maximum the last 24 bits, so specifying an IP autocompletion range bigger than /104 is not useful.\n\tlist protocols ieee80211s\t\t\t# List of protocols configured by LiMe, some of these require the relative package \"lime-proto-...\". Note that if you set here some protocols, you overwrite the *whole* list of protocols set in /etc/config/lime-defaults\n\tlist protocols lan\n\tlist protocols anygw\n\tlist protocols batadv:%N1\t\t\t# Parametrizable with %Nn (which depends from ap_ssid), note that this will range between 29 and 284\n#\tlist protocols batadv:0\t\t\t\t# If 0 VLAN tags are disabled and the routing is done on the raw interface\n\tlist protocols bmx6:13\t\t\t\t# The VLAN type can be provided as a third argument, for example bmx6:13:8021q for using VLAN 802.1q instead of the default 802.1ad\n\tlist protocols olsr:14\t\t\t\t# Do not use a VLAN ID between 29 and 284 as this range is reserved for batadv:%N1 parameterization, maximum ID is 4095\n\tlist protocols olsr6:15\n\tlist protocols olsr2:16\n\tlist protocols babeld:17\n\tlist protocols bmx7:18\n\tlist resolvers 4.2.2.2 # b.resolvers.Level3.net\t# DNS servers node will use\n\tlist resolvers 141.1.1.1 # cns1.cw.net\t\t# Set every entry empty for using the upstream (ISP) DNS server\n\tlist resolvers 2001:470:20::2 # ordns.he.net\n\toption bmx6_mtu '1500'\t\t\t\t# Set MTU for bmx6 tunnel interfaces\n\toption bmx6_publish_ownip false\t\t\t# announce also a /32 route about each node\n\toption bmx6_over_batman false\t\t\t# Disables Bmx6 meshing on top of batman\n\toption bmx6_pref_gw none\t\t\t# Force bmx6 to use a specific gateway to Internet (hostname must be used as identifier)\n\toption bmx6_wifi_rate_max 54000000\n\toption bmx7_mtu '1500'\t\t\t\t# Set MTU for bmx7 tunnel interfaces\n\toption bmx7_publish_ownip false\t\t\t# announce also a /32 route about each node\n\toption bmx7_over_batman false\n\toption bmx7_pref_gw none\t\t\t# Force bmx7 to use a specific gateway to Internet (hostname must be used as identifier)\n\toption bmx7_wifi_rate_max 'auto'\n\toption bmx7_enable_pki false\t\t\t# Trust only nodes in /etc/bmx7/trustedNodes when set (default is to trust all nodes)\n\toption batadv_orig_interval '2000'\t\t# BATMAN-adv will send one Originator Message (OGM) packet every 2000 ms (2 s). This value should be ok for the static networks, in which the LibreMesh routers are not moving. If you have a LibreMesh node moving (e.g. in your backpack) consider decreasing this value. A smaller value means that BATMAN-adv will take less time for realizing which links are better, but will generate more background traffic on all the interfaces.\n\toption batadv_routing_algo 'BATMAN_IV'\t\t# BATMAN_V uses throughput rather than packet loss (as in BATMAN_IV) for evaluating the quality of a link\n\toption anygw_mac 'aa:aa:aa:%N1:%N2:aa'\t\t# Parametrizable with %Nn. Keep in mind that the ebtables rule will use a mask of ff:ff:ff:00:00:00 so br-lan will not forward anything coming in that matches the first 3 bytes of it's own anygw_mac (aa:aa:aa: by default)\n#\toption autoap_enabled 0\t\t\t\t# Requires lime-ap-watchping installed. If enabled AP SSID is changed to ERROR when network issues\n#\toption autoap_hosts \"8.8.8.8 141.1.1.1\"\t\t# Requires lime-ap-watchping installed. Hosts used to check if the network is working fine\n\toption use_odhcpd false\n\n#########################################################\n### WiFi general options\n\nconfig lime wifi\t\t\t\t\t# Settings in this section applies to all radios.\n\tlist modes 'ap'\t\t\t\t\t# This mode setup an Access Point, with the same ssid in each node for roaming purposes.\n\tlist modes 'apname'\t\t\t\t# This mode setup an Access Point, with specific ssid for each node.\n\tlist modes 'ieee80211s'\t\t\t\t# Used for mesh links between nodes.\n#\tlist modes 'adhoc'\t\t\t\t# See below for adhoc configuration\n#\tlist modes 'client'\t\t\t\t# See below for client configuration\n#\toption country 'ES'\t\t\t\t# set this to your location country code, for example in Spain, setting ES allows you to use channel 13\n\toption ap_ssid 'LibreMesh.org'\t\t\t# set here your network name, **this value is required even if AP is not used**, as it is used for calculating fields with %Nn. Connect to this network to roam across APs.\n#\toption ap_key 'SomeWPA2PskKey'\n#\toption ap_encryption 'psk2'\n\toption apname_ssid 'LibreMesh.org/%H'\t\t# SSID specific to each AP. A user can connect to the named AP to avoid roaming\n#\toption apname_key 'SomeWPA2PskKey'\n#\toption apname_encryption 'psk2'\n\toption adhoc_ssid 'LiMe'\t\t\t# SSID of the APs (nodes) when meshing in ad-hoc mode, i.e., the nodes form an IBSS. Not used when meshing in 802.11s (the default)\n\toption adhoc_bssid 'ca:fe:00:c0:ff:ee'\n\toption ieee80211s_mesh_fwding '0'\t\t# Settings needed only for 802.11s\n\toption ieee80211s_mesh_id 'LiMe'\t\t# Mesh cloud identifier (close to SSID in concept). Used by the nodes to join and participate in the mesh network.\n#\toption ieee80211s_encryption 'psk2/aes'\t\t# in order to use encrypted mesh, the wpad-mini package have to be replaced with wpad-mesh-wolfssl package either manually or by the selected network-profile\n#\toption ieee80211s_key 'SomePsk2AESKey'\n\toption unstuck_interval '10'\t\t\t# Interval in minutes that defines how often to run the workaround script provided by the package wifi-unstuck-wa that rescan all available frequencies in active radios.\n\toption unstuck_timeout '300'\t\t\t# Timeout in seconds that defines how long the mentioned above workaround should go.\n\n#########################################################\n### WiFi specific band options\n\n\nconfig lime-wifi-band '2ghz' \t\t\t# Settings in this section applies for all radios in '2ghz' (or '5ghz') band. And take presedence over 'lime wifi' section\n\toption channel '11'\n\toption htmode 'HT20'\t\t\t# htmode sets the width of the channel. HT40 should have better performances in non-noisy environments. Check out the documentation in the OpenWrt wiki here: https://openwrt.org/docs/guide-user/network/wifi/basic#htmodewi-fi_channel_width\n\toption distance '1000'\t\t\t# 1 km max distance, farther clients or peers will not be able to connect\n\toption adhoc_mcast_rate '24000'\n\toption ieee80211s_mcast_rate '24000'\n#\tlist modes 'ap'\t\t\t\t# For networks where only dual band routers are used,\n#\tlist modes 'apname'\t\t\t# 2.4Ghz radios can be reserved for access points.\n\n\nconfig lime-wifi-band '5ghz'\n\tlist channel '48' \t\t\t# May be either a list or a single option, in case of a list a channel for each radio will be selected according to radio index\n\tlist channel '157'\t\t\t# Check for allowed channels on https://en.wikipedia.org/wiki/List_of_WLAN_channels#regulatory_tables5.0ghz\n\toption htmode 'HT40'\t\t\t# htmode sets the width of the channel. VHT80 should have better performances in non-noisy environment. Check out the valid channels list in this comment: https://github.com/libremesh/lime-packages/issues/647#issuecomment-1503968192 and check out the documentation in the OpenWrt wiki here: https://openwrt.org/docs/guide-user/network/wifi/basic#htmodewi-fi_channel_width\n#\tlist modes 'ieee80211s'\t\t\t# For networks where only dual band routers are used, the 5 GHz radio can be reserved for the node-to-node connections\n\toption distance '10000'\t\t\t# Distance between this node/ap and the furthest connected node/client in meters, affects performances. If you are unsure of the right number, better to use a too-large distance here than a too-small one. Farther clients or peers will not be able to connect\n\toption adhoc_mcast_rate '6000'\n\toption ieee80211s_mcast_rate '6000'\n\n\n#########################################################\n### Configuration directed to other UCI files\n\nconfig generic_uci_config uhttpd_https\n\tlist uci_set 'uhttpd.main.redirect_https=0'\t# disable automatic redirect from http to httpS web interface, decided in order to decrease the CPU usage by shared-state and ubus-lime-metrics\n\n\n#########################################################\n# The following interface specific options have to be included in /etc/config/lime-node, not in /etc/config/lime-community\n\n#########################################################\n### WiFi interface specific options ( override defaults options )\n\n## use radio99 only for mesh\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'ieee80211s'\n\n## change ssid for radio99\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\toption ap_ssid 'Special'\n\n## disable lime-config for radio99\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n\toption modes 'manual' # If you use manual protocol you must not specify other protocol, or your configuration will be broken!\n\n## decrease power output for radio99\n# decreasing the output power is rarely a good idea, do it just if you are very sure of what you are doing\n# be aware that decreasing the output power can create a \"hidden node problem\", see https://en.wikipedia.org/wiki/Hidden_node_problem\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n\toption txpower '14' # For knowing the current txpower, use the \"iwinfo\" command.\n\n## set radio99 to do only adhoc and set the channel\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'adhoc'\n\toption channel '1'\n\toption adhoc_ssid 'LiMe'\t\t\t# Parametrizable with %M, %H\n\toption adhoc_bssid 'ca:fe:00:c0:ff:ee'\n\toption adhoc_mcast_rate '24000'\n\n#########################################################\n# If you want to use Wifi client mode just to connect to an AP offering internet\n# you need two pieces of configuration: the wifi specific configuration and the\n# network specific one like in the following example. If your router has an ethernet\n# WAN port, you will need also the third piece of configuration for disabling it.\n\n## set radio99 as client of access point for internet access, both the following \"wifi\" and \"net\" sections are required\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'client'\n\toption channel 'auto'\n\toption client_ssid 'SomeWiFiNetwork'\n\toption client_key 'SomeWPApskPassword'\n\toption client_encryption 'psk2'\t\t\t# psk for WPA or psk2 for WPA2\n\toption distance 1000\t\t\t\t# maximum distance to AP, affects performances\n\nconfig net wirelessclientWAN\n\toption linux_name 'wlan0-sta'\t\t\t# verify the name, the client interface name could be named differently, like wlan1-sta\n\tlist protocols 'wan'\t\t\t\t# use wan to get Internet connectivity via DHCP\n\nconfig net lm_hwd_openwrt_wan\t\t\t\t# this interface gets created by lime-hwd-openwrt-wan package in case an ethernet WAN port is detected\n\toption autogenerated 'false'\t\t\t# this line specify that the configuration of the WAN ethernet port has been manually edited, creating an empty configuration for it and practically disabling it\n\n#########################################################\n# If you want to use Wifi client and AP instead of mesh for building the\n# backbone of your LibreMesh network (and you are using Batman-adv + Babeld)\n# you will need specific wifi and net configuration both on the client and\n# on the access point\n\n## set radio99 as backbone access point (not for users connection, specific client configuration reported below) part of the LibreMesh network structure using Batman-adv and Babeld, both the following \"wifi\" and \"net\" sections are required on the AP\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1\n#\tlist modes 'ap'\t\t\t\t\t# include this if you additionally want an AP for clients on the same radio, check the maximum number of \"interface combinations\" with \"iw phy phy0 info\" command\n#\tlist modes 'apname'\n#\tlist modes 'ieee80211s'\t\t\t\t# include this if you additionally want also do IEEE802.11s mesh on the same radio, check the maximum number of \"interface combinations\" with \"iw phy phy0 info\" command\n\tlist modes 'apbb'\t\t\t\t# apbb stands for backbone AP, for other LibreMesh routers connection rather than for users connection\n\toption apbb_ssid 'backbone/%H'\t\t# clients should not connect to this AP, SSID name should point it out\n#\toption apbb_key 'somePassword'\n#\toption apbb_encryption 'psk2'\n\nconfig net wirelessAPbackbone\n\toption linux_name 'wlan0-apbb'\t\t# verify the name, the backbone AP interface name could be named differently, like wlan1-apbb\n\tlist protocols 'apbb'\t\t\t# backbone AP proto, needed for setting up the interface\n\tlist protocols 'babeld:17'\n\tlist protocols 'batadv:%N1'\n\n## set radio99 as backbone client of a backbone access point (not for users connection, specific AP configuration reported above) using Batman-adv and Babeld, both the following \"wifi\" and \"net\" sections are required on the client\nconfig wifi radio99 # you should ensure that the chosen radio name exists, for example with \"wifi status\" command, likely radio0 or radio1. All the other non-specified options will be taken from \"config lime-wifi-band\" and the general \"config lime wifi\" sections\n\tlist modes 'client'\n\toption channel '11'\n\toption client_ssid 'backbone/LiMe-ddeeff'\t# specify here the name of the specifically configured backbone AP interface you want to connect to\n#\toption client_key 'somePassword'\n#\toption client_encryption 'psk2'\n\toption distance 1000\t\t\t\t# maximum distance to AP, affects performances\n\nconfig net wirelessclientbackbone\n\toption linux_name 'wlan0-sta'\t\t\t# verify the name, the client interface name could be named differently, like wlan1-sta\n\tlist protocols 'client'\t\t\t\t# needed for setting up the new interface\n\tlist protocols 'babeld:17'\n\tlist protocols 'batadv:%N1'\n\n#########################################################\n### Network interface specific options ( override general option )\n### Available protocols: bmx6, bmx7, batadv, olsr, olsr6, olsr2, bgp, wan, lan, manual, static, babeld, apbb, client\n### proto:vlan_number works too ( something like bmx6:13 is supported ), the VLAN type defaults to 802.1ad but 802.1q can be used specifying it with proto:vlan_number:8021q\n### If you use manual do not specify other protocols, may result in an unpredictable behavior/configuration (likely you loose connection to the node)\n\n#config net port5\t\t\t\t\t# Do not put any \".\" in the section name\n#\toption linux_name 'eth1.5'\t\t\t# Put here the actual name of the interface\n#\tlist protocols 'wan'\t\t\t\t# Some of these protocols require the relative package \"lime-proto-...\"\n#\tlist protocols 'static'\t\t\t\t# Set up a static IP (both IPv4 and IPv6 supported)\n#\toption static_ipv4 '192.168.1.2/24'\n#\toption static_gateway_ipv4 '192.168.1.1'\n#\toption static_ipv6 '2a00:1508:0a00::1234/64'\n#\toption static_gateway_ipv6 'fe80::1'\n\n## (optional) configure lan1 for connection to other nodes, not for users connection:\nconfig net\n\toption linux_name 'lan1'\n\tlist protocols 'batadv:%N1'  #needs to be specified if the other node is in the same mesh cloud i.e. same ssid\n\tlist protocols 'babeld:17'\n\n## (optional) configure lan1 for users to connect to, not for connection to other nodes:\nconfig net\n\toption linux_name 'lan1'\n\tlist protocols 'lan'\n\n#########################################################\n### Ground routing specific sections\n### One section for each ground routing link\n### With ground routing we mean setups having LibreMesh on a router which is connected via cable(s), eventually through a switch, to some wireless routers running the original firmware in WDS (transparent bridge) Ap/Sta mode.\n### Likely you want to configure as many sections of ground routing with different VLAN numbers or different switch ports as many connected devices in WDS mode.\n### For a detailed description have a look at https://github.com/libremesh/lime-packages/issues/443\n\n#config hwd_gr link1\n#\toption net_dev 'eth0'\t\t\t\t# Plain ethernet device on top of which 802.1q VLAN will be constructed. In case of doubts rely on https://openwrt.org/toh/start\n#\toption vlan '5'\t\t\t\t\t# VLAN ID to use for this ground routing link, use little one because cheap switch doesn't supports big IDs, this will be used also as 802.1q VID on tagged ports\n#\toption switch_dev 'switch0'\t\t\t# These options regarding switch need to be set only if your ethernet device is connected to a switch chip. If the switch exists you can read its name (like switch0) in /etc/config/network file\n#\toption switch_cpu_port '0'\t\t\t# Refer to switch port map of your device on https://openwrt.org/toh/start to know CPU port index\n#\tlist switch_ports '4t'\t\t\t\t# List switch ports on which you want the VLAN being passed, use the 't' suffix to specify the port being tagged, refer to https://openwrt.org/toh/start for correspondence with physical ports\n\n#########################################################\n### Proto BGP specific sections\n### One section for each BGP peer\n\n#config bgp_peer peer1\n#\toption remoteIP '192.0.2.6'\n#\toption remoteAS '65550'\n\n#config bgp_peer peer2\n#\toption remoteIP '2001:db8::c001'\n#\toption remoteAS '65549'\n\n"}
,{
"location": "/news.html",
"lang": "en",
"title": "News",
"content": "\n2023-10-07 - A new stable release and a release candidate for Openwrt 22!\n\n\nWe released a new version of Libremesh based on OpenWrt 19!\n\n\n\nhttps://downloads.libremesh.org/releases/2020.4-ow19/\n\n\n\nand a new release candidate based on OpenWrt 22:\n\n\n\nhttps://downloads.libremesh.org/releases/2023.1-rc2-ow22/\n\n\n\nThis means that the release candidate needs testing, bug fixing and\nloads of community love so that we can have an amazing release that can\nactually ease the creation of community networks everywhere.\n\n\nCheck out the: https://lists.autistici.org/message/20230929.142923.34529fc1.en.html\nhttps://lists.autistici.org/message/20230929.152044.f1940e95.en.html\nfor more detailed information.\n\n\nAnother great gourgeous news is that from now we have a Firmware Selector, check it out here:\nhttps://repo.libremesh.org/selector\n\n\nThis release has contributions from communities and individuals from all around the world.\nTesting, software development, documentation, community building. Thank you all!!\n\n\n\n\n2023-03-10 - Endorsement to BattleMesh v15 in Calafou, Barcelona\n\n\nThe Wireless Battle of the Mesh is going live for its 15th edition. This time for a full week again!\n\n\nThe dates and venue have been set by the WBM community:\n\n\n\n8-14th of May 2023\nCalafou, Vallbona d'Anoia, Barcelona\nhttps://www.openstreetmap.org/#map=19/41.51115/1.70263\nhttps://calafou.org/web/index.php/sobre-calafou#eng\n\n\n\nLibreMesh community supports and will participate in this year&#8217;s Wireless BattleMesh (WBM) v15 in Calafou, Barcelona.\n\n\nLibreMesh will be one of the topics that will be discussed there, together with routing protocols for mesh networks, human communities below the wireless nodes, and much more technical and political topics related to community networks!\n\n\nYou can see the full announcement email here\nhttps://lists.autistici.org/message/20230310.090007.3ae9dd40.en.html\nAnd the event website here:\nhttps://battlemesh.org/BattleMeshV15\n\n\nEnjoy meshing!\n\n\n\n\n2022-09-18 - Participation to BattleMesh v14 in Rome\n\n\nLibreMesh supports this year&#8217;s \"Wireless Battle of the Mesh - Building Community Networks for Fun and Non-Profit\".\n\n\nThe event aims to bring together people from across the globe who are interested in community networks, including wireless mesh network technologies, fiber infrastructure, Do-It-Yourself Internet Access Providers, and more generally how to create and maintain a thriving community of people involved in building their own networks.\n\n\nWe envision 4 days of expert presentations, practical workshops, hacking sessions, and fruitful discussions: whether you are a mesh networking enthusiast, community networking activist, protocol developer, or have an interest in networking in general, come and join the event!\n\n\nThe Battlemesh is free of charge and open for all.\n\n\nThis year, the event will take place from Monday 19th to Thursday 22nd of September, 2022 in Rome, Italy!\nCheck out more information at https://www.battlemesh.org/BattleMeshV14\n\n\n\n\n2020-12-15 - LibreMesh 2020.1 release\n\n\nThe LibreMesh team is happy to announce a new version of LibreMesh, 2020.1 \"Expansive Emancipation\".\nThree years of work, 882 commits, 23 developers, tons of bug fixes and improvements!\n\n\nThis release is compatible with OpenWrt stable 19.07.5 and old-stable 18.06.9. For the time  source-only\nrelease so you will need compile it yourself for the devices used by your community using the easy to\nfollow instructions in https://libremesh.org/development.html\n\n\nWhat&#8217;s new in 2020.1 \"Expansive Emancipation\"\n\nIt is imposible to do a meaninful list of all the changes. A non complete list of the most relevant\ndevelopments:\n\n\n\n\nLimeApp: an app to for the maintenance and deploy of community networks targeted to non-technical\ncommunity members.\n\n\nA new community-oriented configuration system that facilitates collective maintenance of configurations.\n\n\nshared-state, a shared database for the network.\n\n\nfirst-boot-wizard, an optional helper to deploy and extend the network that it is well integrated with the LimeApp.\n\n\nPirania, an optional boucher and captive portal solution for community networks\n\n\nHundreds of fixes and code improvement.\n\n\n\n\n\nContributors\n\nThis release has contributions from communities and individuals from all around the world. Testing, software development, documentation, community building. Thank you all!!\n\n\nA list of the software developers that contributed to this release was easily gathered from the git history:\nAngiieOG, Brad, Daniel Golle, FreifunkUFO, German Ferrero, Gioacchino Mazzurco, Gui Iribarren, Ilario Gelmetti,\nJess, Luandro, Marcos Gutierrez, Michael Jones, Mike Russell, Nicolás Pace, PatoGit, Pau, Paul Spooren, Pedro Mauro,\nSantiago Piccinini, Vittorio Cuculo, hiure, radikalbjr, valo.\n\n\n\n2020-09-18 - A release candidate for the next release!\n\nAlthough the LibreMesh development never stopped, it was since the 17.06\n\"Dayboot Rely\" release that we didn&#8217;t have an official release.\nThe goal is to have the final release at the beginning of November.\n\n\nThis means that the release candidate needs testing, bug fixing and\nloads of community love so that we can have an amazing release that can\nactually ease the creation of community networks everywhere.\n\n\nCheck out the announcement\nfor more detailed information.\n\n\n\n\n\n2018-04-13 - Join us at Mesh is in the Air!\n\n\nWe endorse Mesh is in the Air - this years mesh up of the Wireless Battle of the Mesh and Wireless Community Weekend.\n\n\nIf you are a mesh networking enthusiast, community activist, have an interest in wifi or dynamic routing protocols, you can&#8217;t miss this event! Check out more details in the official website.\n\n\nLibreMesh developers and users will be attending the event, giving talks about development progress and state, and in general sharing a nice time.\n\n\n\n\n2017-06-06 - Attended Sysupgrades\n\n\nWithin this years GSoC a fellow student tries to setup a new way to perform sysupgrades on LibreMesh Routers (and LEDE/OpenWrt in general).\nThe idea is to generate sysupgrade images on demand with all manually installed packages included.\n\n\nMore details are shown in the official Freifunk Blogpost (english)\n\n\n\n\n2016-10-06 - LibreRouter\n\n\nThe Libre Router project will design and produce a high performance multi-radio wireless router targeted at Community Networks needs.\n\n\nFor more info visit the librerouter web. Or read the guifi.net article (spanish).\n\n\n\n\n2016-08-06 - Endorsement to LEDE project\n\n\n\n\n\nWe endorse the LEDE project and we plan to start basing LibreMesh releases on Linux Embedded Development Environment (LEDE) as soon as it will have a stable release.\n\n\n\n\n2016-08-01 - Project Meeting LiMeCat2016q3\n\n\nNaming:\tLiMeCat2016q3\nDate:\t2016-08-06T12:00+02:00/2016-08-07T17:00+02:00\nVenue:\tCSA La Talaia, Passeig Mas Roig 52-54/ Rambla Jacint Verdaguer 215, FGC: Valldoreix (Sant Cugat Del Vallés), Barcelona. Web site.\n\n\n\n\n2016-04-13 - Project Meeting LiMeCat2016\n\n\nNaming:\tLiMeCat2016\nDate:\t2016-04-16T12:00+02:00/2016-04-17T17:00+02:00\nVenue:\tCSOA Matakrostes, Passeig de Sevilla 132, Valldoreix, Barcelona. Map.\nReport:\temail in Spanish.\n\n\n"}
,{
"location": "/pt-br_howitworks.html",
"lang": "pt-br",
"title": "Como funciona",
"content": "\nObjetivos a alcançar\n\n\n\n\nEscalabilidade\n\n\nSegmentação de redes\n\n\nRoaming de camada 2 dentro de certas áreas\n\n\nSeleção inteligente de gateway com redundância e possibilidade de escolha do usuário\n\n\nCompatibilidade com a maior parte dos cenários existentes\n\n\nUm firmware único para toda a rede (roteadores de base, backbone, empresas instalações rápidas, etc)\n\n\n\n\n\n\nO Básico\n\n\nA infraestrutura de rede do LibreMesh é baseada em 2 camadas:\n\n\nCamada 2 / nuvem\n\nA camada 2 nuvem usa ao protocolo dinâmico de roteamento BATMAN-ADV\n\n\n\n\n\n\n\n\n\nadvanced é um protocolo de roteamento mesh que é executado no kernel space. Mesmo se a topologia da rede é feita de múltiplos nós e múltiplos hops (saltos), ele a abstrai para um único domínio de\ncolisão na camada 2. Então, da perspectiva do usuário, toda   a   mesh   vai   parecer   uma   única   LAN.   Essa   arquitetura   é   muito   interessante   para fins de roaming, então conexões TCP e UDP não se perdem quando você troca de Access Point (AP).\n\n\n\n\n\nCamada 3 / rede\n\nToda rede de camada 3 usa por padrão o protocolo de roteamento BMX\n\n\n\n\n\n\n\n\n\nBMX6   (ou   a   nova   versão   BMX7)   é   um   protocolo   de   roteamento\ndinâmico IPV6 que oferece funções muito avançadas e baixo overhead\nde   rede   (graças   a   estratégia   de   vetor   de   distância   e   uma   série   de\notimizações). Versão 7 tem, adicionalmente, extensões de roteamento de segurança.\n\n\n\n\n\nMisturando camadas\n\nPor padrão, todos os nodes executam ambos os protocolos de roteamento (BMX e BAT-ADV), mas em uma VLAN (1) diferente. Então o roteamento é isolado pela camada MAC.\n\n\n\n\n\n\n\n\n\nA VLAN BMX é sempre a mesma, então todos os nós conectados à camada de link vão procurar uns aos outros.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA VLAN BATADV depende do identificador cloud que é calculado (por padrão) usando o SSID do AP (Access point).\n\n\n\n\n\n\n\n\n\n\n\n\n\nPortanto a rede BMX vai ser única para toda a MESH, mas a rede BAT-ADV pode ficar dividida em muitas nuvens.\n\n\n\n\n\n\n\n\n\n\n\nEssa configuração permite isolar a camada 2/nuvem.   Por   exemplo   num   bairro,   um complexo empresarial ou numa rede de hotspots abertos você pode escolher isolar sua LAN do resto da rede. Porém ao mesmo tempo, você pode alcançar os outros nós usando a rede de roteamento da camada 3.\n\n\nRoaming vai ser disponível dentro da nuvem, então qualquer sessão TCP, video ou chamada SIP pode ser realizada enquanto se move. Por outro lado, graças a segmentação de camada 3,   os   problemas   comumente   encontrados   na   camada   2   de   uma   rede   em   bridge   (como tempestade de broadcast ou problemas com DHCP) não vão perturbar a operação correta da rede.\n\n\n\n\n\n\n\n\n\nE tudo isso automático, auto-mágico e transparente para o usuário final.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDetalhes\n\n\nOs WiFI Access Points da mesma cloud compartilham alguns parâmetros:\n* SSID, o nome de identificação do WiFi AP\n* Endereços IPv4 e IPv6 especiais para anycast.[1]\n* Um  MAC address especial para anycast.\n* Um servidor DHCP/RA para prover IPs válidos para todos os clientes da cloud.\n\n\nEntão um cliente conectado em um AP pode se mover pela mesh sem precisar renovar seu IP. Até a camada MAC vai ser sempre a mesma do seu ponto de vista.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOs leases de DHCP (concessão) são compartilhados pela cloud para prevenir colisões\nusando A.L.F.R.E.D\nA.L.F.R.E.D.\n\n\nDesde que os nós compartilhem um mesmo anycast MAC/IP, do ponto de vista do\ncliente é totalmente transparente. Portanto o gateway é sempre o mesmo ainda que o nó\nmesh que ele esteja anexado seja outro.\n\n\n\n\n\n\n\n\n\n\n\nQuando um cliente quer sair da LAN (cloud) para conectar a internet ou outra rede, ele vai enviar\num pacote para o anycast especial do gateway. Então o nó onde o cliente está fisicamente conectado\nvai tomar conta de todo o resto.\n\n\n\n\n\n\n\n\n\nUma regra de ebtables .[2] no AP/LAN previne que os pacotes de propagação de camada 2 na nuvem sejam enviados para o endereço anycast. Então o nó mesh onde o cliente está associado pega o pacote, mas os outros não.\n\n\n\n\n\n\n\n\n\n\n\nO pacote é roteado através do BMX para o melhor gateway de internet. Pode ser o nó da mesma\ncloud ou de alguma outra cloud distante.\n\n\n\n\n\n\n\n\n\nO BMX   tem   uma   funcionalidade   de   'inteligência'   de   gateway   bem   poderoso   que\nautomaticamente detecta o melhor nó de gateway de internet levando em consideração\na largura de banda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo   caminho   de   volta   o   pacote   vai   chegar   no   mesmo   nó   da   cloud,   mas   não\nnecessariamente no mesmo nó que partiu. Independente disso, o pacote será enviado corretamente para quem o originou. Isso acontece porque o BMX smart gateway usa conexões de túnel de mão única para garantir que o gateway selecionado seja utilizado.\n\n\n\n\n\n\n\n\n\n\n1. IPs compartilhados por vários dispositivos na rede\n\n\n2. ebtables é como uma iptables mas para a camada 2/rede\n\n"}
,{
"location": "/docs/hardware/tp-link.html",
"lang": "en",
"title": "tp-link",
"content": "Because of the http://ml.ninux.org/pipermail/battlemesh/2016-February/004379.html[new FCC rules], new TP-Link models would require a special method to install third party firmwares like LibreMesh.\nOn TP-Link devices, you can typically identify that your router is FCC locked if you get a 18005 and/or Invalid Filename error when trying to flash.\nThese instructions can help bypass these new restrictions.\n\n.They have been tested with:\n* WDR3500\n* WDR4300\n\n.Instructions\n. Install dd-wrt: Select your router from ftp://ftp.dd-wrt.com/betas/2016/02-05-2016-r29048/[dd-wrt.com]. Download US version, factory-to-ddwrt-us.bin, if applicable.\n. Rollback to factory firmware: Follow instructions below to download correct file. You will have to set a username and password before continuing to dd-wrt's Administration Page and selecting Upgrade Firmware. It does not matter if you choose to reset configuration after reset.\n  .. Official reverts: Go to the official dd-wrt page for your router. For example, http://www.dd-wrt.com/wiki/index.php/TP-Link_TL-WDR4300[WDR4300]. Download the webrevert.rar package. Don't forget to decompress.\n  .. Unofficial reverts: The original instructions for this guide pointed to a http://www.dd-wrt.com/phpBB2/viewtopic.php?t=85237&postdays=0&postorder=asc&start=30[forum] with revert links. To see the files, you will need to http://www.dd-wrt.com/phpBB2/profile_sec.php?mode=register_wtf[register] and http://www.dd-wrt.com/phpBB2/viewtopic.php?t=85237&postdays=0&postorder=asc&start=30[login at the bottom of the page].\n. Install LibreMesh: Download factory version of LibreMesh, not sysupgrade. You must rename the file to the name of one of the official\nTP-Link firmware files (e.g. wdr3500v1_en_us_3_14_3_up_boot(151104).bin or wdr4300v1_en_3_14_3_up_boot(150518).bin). If you are unsure of the name for your device, try searching the OpenWrt page for your device and searching the page for some variation of the filenames above.\n\n\n.Original discussion and solution\n----\nhttps://forum.openwrt.org/viewtopic.php?id=63123\n----\n"}
,{
"location": "/docs/hardware/xiaomi-miwifir3.html",
"lang": "en",
"title": "Xiaomi MiWiFi R3",
"content": "== How to install LibreMesh on the Xiaomi MiWiFi R3\n\n\nThis is a pretty good device with lots of memory, one of the last dual band devices easily hackable. Installing LibreMesh/OpenWrt is a bit more work but can be done. Here are the instructions:\n\nFollow these steps:\n\n* First, get ssh/dropbear access: https://openwrt.org/toh/xiaomi/mir3#get_sshdropbear_access (don't forget to downgrade the firmware before)\n\n* Download LibreMesh rootfs and kernel files from here:\n - https://mega.nz/#!8A9CUJLQ!gJNC3SfwDdmMZ4y9BXlWp4mcn1FTAU3vWgsVYK2vW4w\n - https://mega.nz/#!1QdkxKgb!7htQD4bE9AbYotPkEQYriI5zF2LDe27A62h7S2tq9VM\n\n* Copy these files over scp to the router:\n----\nscp lede-ramips-mt7620nand-miwifi-r3-squashfs-kernel1.bin   root@192.168.15.1:/tmp/\nscp lede-ramips-mt7620nand-miwifi-r3-squashfs-rootfs0.bin   root@192.168.15.1:/tmp/\n----\n\n* login through ssh:\n----\nssh root@192.168.15.1\n----\n\n* type in the commands (from chen's instructions https://github.com/ptpt52/lede-source/issues/1)\n----\nnvram set flag_last_success=1\nnvram set boot_wait=on\nnvram set uart_en=1\nnvram commit\nmtd write /tmp/lede-ramips-mt7620nand-miwifi-r3-squashfs-kernel1.bin kernel1\nmtd write /tmp/lede-ramips-mt7620nand-miwifi-r3-squashfs-rootfs0.bin rootfs0\nreboot\n----\n\n* and it should be meshing already!\n\n== Upgrading from OpenWrt\n\nIf you somehow installed OpenWrt before installing LibreMesh, here is the sysupgrade file:\n\nhttps://mega.nz/#!tV0EzJZD!XblvULWZgjvx0d9RqdwJYbKkZOKTeHT-J6oBRQYw0Ls Not available any more\n\n"}

,{
"location": "/packages/altermundi-grafana.html",
"lang": "en",
"title": "altermundi-grafana",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=altermundi-grafana\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) metapackage\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= \\\n            +prometheus-node-push-influx \\\n            +prometheus-node-exporter-lua \\\n            +prometheus-node-exporter-lua-openwrt \\\n            +prometheus-node-exporter-lua-wifi_stations \\\n            +prometheus-node-exporter-lua-wifi-stations-extra \\\n            +prometheus-node-exporter-lua-wifi-survey \\\n            +prometheus-node-exporter-lua-wifi-params \\\n            +prometheus-node-exporter-lua-location-latlon \\\n\nendef\n\ndefine Package/$(PKG_NAME)/description\n  This metapackage installs and configures a statistics collector system\n  that gathers data on the node and pushes to https://grafana.altermundi.net\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/auto-usb-wwan.html",
"lang": "en",
"title": "auto-usb-wwan",
"content": "\nReadme\n\n\n\n\n# auto-usb-wann\nAfter installing  auto-usb-wann, a hotplug.d script will detect when any USB WiFi device is connected, automatically configure it to connect as client to a predefined SSID/password and ask for DHCP.\nThe idea is to provide internet access to a router, without needing to mess with LuCI or CLI.\nJust insert a supported USB device on the router, and open an AP with 3g/4g tethering on a phone.\n\n\nBy default, it will try connect to SSID \"internet\" with password \"internet\", you can edit this configuration in  /etc/hotplug.d/ieee80211/11_auto-usb-wwan\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=auto-usb-wwan\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) configures any USB WiFi device as WWAN upon plugging in.\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\nendef\n\ndefine Package/$(PKG_NAME)/description\n  After installing $(PKG_NAME), a hotplug.d script will detect when any USB WiFi device is connected,\n  automatically configure it to connect as client to a predefined SSID/password and ask for DHCP.\n  The idea is to provide internet access to a router, without needing to mess with LuCI or CLI.\n  Just insert a supported USB device on the router, and open an AP with 3g/4g tethering on a phone.\n  By default, it will try connect to SSID \"internet\" with password \"internet\"\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/babeld-auto-gw-mode.html",
"lang": "en",
"title": "babeld-auto-gw-mode",
"content": "\nReadme\n\n\n\n\n# babeld-auto-gw-mode\n\n\nBy default babeld will redistribute all the routes installed even if they \"don&#8217;t work\". For example\nwhen the internet provider use DHCP and the service is not working but interface is up, the route is\ninstalled but not working and babeld will anounce the non working route to the network and also\nthis route will be used by this node to route the packets so also all its clients won&#8217;t have internet.\n\n\nThis package provides a solution using watchping hooks that:\n* on wan OK\n  - adds a route with a special protocol number (7)\n* on wan FAIL\n  - removes the default route with proto 7\n  - changes the metric of the default route to 84831. If other nodes are also gateways their babel\n  redistributable routes will have priority over this route at this node and for that reason the\n  default gateway won&#8217;t be the local non working connection.\n\n\n\n\n\n\nMakefile\n\n\n\n# Copyright (C) 2021 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=Babel auto Internet gateway module.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+libubus-lua +watchping +lime-proto-babeld +lime-system\n  PKGARCH:=all\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n\tWatchping hooks to set babeld Internet automatic announcements.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bandwidth-test.html",
"lang": "en",
"title": "bandwidth-test",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Ilario Gelmetti\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=bandwidth-test\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Internet download bandwidth measurement\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org\n  DEPENDS:=+pv\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/config\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n  \tMeasure the maximum available bandwidth towards the internet, in the download direction.\n\tDownloading a list of files via HTTP connections.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/bin/\n\t$(INSTALL_DIR) $(1)/etc/config/\n\t$(INSTALL_BIN) ./files/bin/bandwidth-test.lua $(1)/bin/bandwidth-test\n\t$(INSTALL_CONF) ./files/etc/config/bandwidth-test $(1)/etc/config/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/batman-adv-auto-gw-mode.html",
"lang": "en",
"title": "batman-adv-auto-gw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2012-2014 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=batman-adv-auto-gw-mode\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=Set batman-adv gw_mode by internet availability\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= +batctl +kmod-batman-adv +watchping +dnsmasq-dhcpv6 +ip\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nAdds watchping hooks that set\ngw_mode=server when WAN port gets internet access\ngw_mode=client when connection is severed\n\nAlso adds a hotplug.d hook that sends a DHCP request\nwhen another batman-adv router announces itself\nas a gw_mode=server.\n\nSo if you install this package on every node of a batman-adv\nmesh network, you can connect internet access to the WAN\nport of any (one or more) nodes, it will be autodetected\nand the rest of the nodes will route through it (or them)\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx6-auto-gw-mode.html",
"lang": "en",
"title": "bmx6-auto-gw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2014 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=bmx6-auto-gw-mode\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=bmx6 auto Internet gateway module\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= bmx6 +watchping +ip\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tWatchping hooks to set bmx6 Internet automatic announcements\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-auto-gw-bw-mode.html",
"lang": "en",
"title": "bmx7-auto-gw-bw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2018 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=bmx7-auto-gw-bw-mode\nPKG_VERSION=0.1\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  Section:=net\n  TITLE:= bmx7 auto Internet gateway bandwidth module\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+bmx7-auto-gw-mode +pv\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/config\n  select CONFIG_BUSYBOX_CONFIG_CROND\n  select CONFIG_BUSYBOX_CONFIG_CRONTAB\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n  \tWatchping hooks to set bmx7 Internet bandwidth announcement\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-auto-gw-mode.html",
"lang": "en",
"title": "bmx7-auto-gw-mode",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2014 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=bmx7-auto-gw-mode\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=bmx7 auto Internet gateway module\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= bmx7 +watchping +ip\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tWatchping hooks to set bmx7 Internet automatic announcements\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/bmx7-mdns.html",
"lang": "en",
"title": "bmx7-mdns",
"content": "\nMakefile\n\n\n\n#    Copyright (C) 2018 Pau Escrich\n#\n#    This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License along\n#    with this program; if not, write to the Free Software Foundation, Inc.,\n#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n#    The full GNU General Public License is included in this distribution in\n#    the file called \"COPYING\".\n#\n# Contributors:\n#\tPau Escrich &lt;p4u@dabax.net&gt;\n#\n\ninclude $(TOPDIR)/rules.mk\ninclude $(INCLUDE_DIR)/kernel.mk\n\nPKG_NAME:=bmx7-mdns\nPKG_VERSION:=0.1\nPKG_RELEASE:=1\nPKG_LICENSE:=GPL-2.0+\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=net\n  CATEGORY:=Network\n  SUBMENU:=Routing and Redirection\n  TITLE:=bmx7 distributed DNS system\n  URL:=http://bmx6.net\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.net&gt;\n  PKGARCH:=all\n  DEPENDS:=+bmx7 +bmx7-sms +luci-lib-nixio\nendef\n\ndefine Package/$(PKG_NAME)/config\n  select CONFIG_BUSYBOX_CONFIG_CROND\n  select CONFIG_BUSYBOX_CONFIG_CRONTAB\nendef\n\ndefine Package/$(PKG_NAME)/description\n Distributed DNS system using bmx7 sms plugin\nendef\n\ndefine Build/Prepare\n\tmkdir -p $(PKG_BUILD_DIR)\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(INSTALL_DIR) $(1)/etc\n\t$(INSTALL_DIR) $(1)/etc/init.d\n\t$(INSTALL_DIR) $(1)/etc/config\n\t$(CP) ./files/etc/init.d/bmx7-mdns $(1)/etc/init.d/bmx7-mdns\n\tchmod 755 $(1)/etc/init.d/bmx7-mdns\n\t$(CP) ./files/etc/config/bmx7-mdns $(1)/etc/config/bmx7-mdns\n\t$(INSTALL_DIR) $(1)/usr/lib/lua/luci/model/cbi/\n\t$(CP) ./files/luci/bmx7-mdns.lua $(1)/usr/lib/lua/luci/model/cbi/bmx7-mdns.lua\nendef\n\n$(eval $(call BuildPackage,bmx7-mdns))\n\n\n\n"}
,{
"location": "/packages/check-date-http.html",
"lang": "en",
"title": "check-date-http",
"content": "\nReadme\n\n\n\n\n# check-date-http\n\n\nNTP daemon shipped with busybox is not capable to gracefully handle cases of extreme time skew, that are common enough in some community networks, this package detect that situation and restart sysntpd and/or reset the date depending on the configuration.\n\n\nCheck local time against a list of HTTP(s) services, if the time skew is more then 15 minutes, restart sysntpd to force time syncronization, or reset trought date command depending on configuration.\n\n\n## Configurations\nYou can change the behavior and the list of servers in /etc/config/check-date\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=check-date-http\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Keep local date under NTP too far away skew\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lua +random-numgen \\\n\t\t+luci-lib-httpclient\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tCheck local time against a list of HTTP(s) services, if the time skew is\n\tmore then 15 minutes, restart sysntpd to force time syncronization, or\n\treset trought date command depending on configuration.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/check-internet.html",
"lang": "en",
"title": "check-internet",
"content": "\nReadme\n\n\n\n\n# check-internet\n\n\nSimple script to verify that there is internet access using HTTP.\nAccepts a timeout parameter, in seconds, that defaults to 10s.\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2020 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=check-internet\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Check internet connection\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tMAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n\tPKGARCH:=all\n\tDEPENDS:=+uclient-fetch +lime-system +luci-lib-jsonc +libubus-lua\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSimple script to verify that there is internet access.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/cotonete.html",
"lang": "en",
"title": "cotonete",
"content": "\nReadme\n\n\n\n\n# cotonete is temporarily hosted on https://github.com/nicopace/cotonete\n\n\n# cotonete [beta]\n\n\ncotonete is a daemon that monitors the deafness of radios and reacts instantly to it, working around the issue.\n\n\n## issue\n\n\nEvery now and then, certain wifi radios manifest an issue that is called deaf radio: the radio has good link, has associated links, but no traffic goes through it.\n\n\n## solution\n\n\ncotonete monitors the traffic over the wireless links by doing a link local ping6 to all the associated peers. If the ping doesn&#8217;t increment the transmitted bandwidth announced by the statistics of the interface, then the radio is deaf and needs to be restarted.\n\n\n\n\n\n\nMakefile\n\n\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=cotonete\nPKG_VERSION:=0.0.1\n\nPKG_MAINTAINER:=Nicolas Pace &lt;nico@libre.ws&gt;\nPKG_LICENSE:=LGPL-2.1+\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n    TITLE:=$(PKG_NAME)\n    CATEGORY:=Network\n    MAINTAINER:=Nicolas Pace &lt;nico@libre.ws&gt;\n    URL:=http://www.libremesh.org/\n    DEPENDS:=\n    PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n    Cotonete monitors mesh devices looking for the dead phys ath9k bug, and logs when it happens.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t@chmod a+x $(1)/etc/init.d/cotonete\n\t@chmod a+x $(1)/usr/sbin/cotonete.sh\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/deferable-reboot.html",
"lang": "en",
"title": "deferable-reboot",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=deferable-reboot\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides a deferable reboot.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) provides a deferable reboot mechanism. The system\n\twill be rebooted when the uptime of the system reach a specified amount\n\tof seconds and if /tmp/deferable-reboot.defer file does not contain a\n\tnumber that is greater than the current uptime.\n\tThis way if anyone wants to postpone the reboot, the way is to store the\n\tnext checkpoint in seconds. For example if the system must not reboot from\n\tnow and up to 120 seconds in the future then something like this can be donde\n\tawk '{print $1 + 120}' /proc/uptime &gt; /tmp/deferable-reboot.defer\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/eupgrade.html",
"lang": "en",
"title": "eupgrade",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2020 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides semi automated firmware upgrades\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua +lime-system +luci-lib-jsonc +luci-lib-nixio +libubus-lua +libuci-lua +random-numgen\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) provides semi automated firmware upgrades.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/first-boot-wizard.html",
"lang": "en",
"title": "first-boot-wizard",
"content": "\nMakefile\n\n\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=first-boot-wizard\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n    TITLE:=$(PKG_NAME)\n    CATEGORY:=LibreMesh\n    MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n    URL:=http://libremesh.org\n    DEPENDS:= +lua +libubox-lua +libuci-lua +luci-lib-nixio +luci-lib-jsonc +libiwinfo-lua \\\n              +ubus-lime-utils +lime-system\n    PKGARCH:=all\n    DEPENDS:=+lime-system\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tScans surrounding LibreMesh networks and joins them.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/hotplug-initd-services.html",
"lang": "en",
"title": "hotplug-initd-services",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=hotplug-initd-services\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Hotplug events of init.d services\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@altermundi.net&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+libubox-lua +libubus-lua +random-numgen \\\n\t\t+lua +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tProvide trigger hotplug events when init.d services are started and\n\tstopped. Put your hooks into /etc/hotplug.d/initd/.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-ap-watchping.html",
"lang": "en",
"title": "lime-ap-watchping",
"content": "\nReadme\n\n\n\n\nIn MESH networks with high density of nodes,\nif a single node is working in a wrong way (bad channel, VLAN, random crash, etc.),\nas the AP SSID is always the same, the client devices attached to it\nwill keep trying to use it, but their network connection will be broken.\n\n\nInstead, lime-ap-watchping provides a simple ICMP based watching system\nwhich changes the AP SSID to let other working nodes handle the clients.\nBy default the new SSID will be $HOSTNAME-down, so it will be easy to find and fix it if possible.\nBecause of the layer2 batman-adv roaming feature included in LibreMesh,\nclients won&#8217;t even notice the difference if there is another neighbour node which can handle them.\n\n\nThere are two options available in /etc/config/lime config file under the lime network section:\n\n\n\n\nautoap_enabled: [1/0] turn on/off this feature\n\n\nautoap_hosts: list of hosts used for watchping, usually one or more backbone nodes of the network\n\n\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2017 Pau Escrich\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-ap-watchping\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  Section:=net\n  TITLE:= Watchping hooks to manage AP SSID if network problems\n  MAINTAINER:=Pau Escrich &lt;p4u@dabax.et&gt;\n  URL:=http://libremesh.org\n  DEPENDS:= +watchping +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Watchping hooks to change AP ssid when the network is down (i.e LibreMesh-Error).\n  So the WiFi roaming is broken and the clients are not using the AP anymore until fixed.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-app.html",
"lang": "en",
"title": "lime-app",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) Libremesh 2017\n#\n# This is free software, licensed under the GNU General Public License v3.\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=lime-app\nPKG_VERSION:=v0.2.25\nPKG_RELEASE:=2\n\nPKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz\nPKG_HASH:=7804eb39686d94c50347170cf01b2d4d810e8cae33b7c1ed2787c19f4a4c2046\nPKG_SOURCE_URL:=https://github.com/libremesh/lime-app/releases/download/$(PKG_VERSION)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tCATEGORY:=LibreMesh\n\tTITLE:=LimeApp\n\tMAINTAINER:=German Ferrero &lt;germanferrero@altermundi.net&gt;\n\tURL:=http://github.com/libremesh/lime-app\n\tDEPENDS:=+rpcd +uhttpd +uhttpd-mod-ubus +uhttpd-mod-lua \\\n\t\t+ubus-lime-location +ubus-lime-metrics +ubus-lime-utils \\\n\t\t+rpcd-mod-iwinfo +ubus-lime-grondrouting\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tLight webApp for LibreMesh over uhttpd\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/www/app/\n\t$(CP) $(BUILD_DIR)/build/* $(1)/www/app/\n\t$(INSTALL_DIR) $(1)/usr/share/rpcd/acl.d || true\nendef\n\ndefine Package/$(PKG_NAME)/postinst\n#!/bin/sh\n[ -n \"$${IPKG_INSTROOT}\" ] ||\t( /etc/init.d/rpcd restart &amp;&amp; /etc/init.d/uhttpd restart ) || true\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-debug.html",
"lang": "en",
"title": "lime-debug",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-debug\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=libremesh debug utils\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+bandwidth-test \\\n\t\t+busybox +ethtool +iwinfo +iw +mtr +ip \\\n\t\t+iputils-ping \\\n\t\t+sprunge +safe-reboot +netperf +pv +tcpdump-mini +bwm-ng \\\n\t\t+lime-report +iperf3 +jq\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tDebug utilities for LibreMesh nodes\nendef\n\ndefine Package/$(PKG_NAME)/config\n\tselect BUSYBOX_CUSTOM\n\tselect BUSYBOX_CONFIG_NC\n\tselect BUSYBOX_CONFIG_NC_SERVER\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-docs.html",
"lang": "en",
"title": "lime-docs",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2017 Ilario Gelmetti\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-docs\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)\nPKG_SOURCE_URL:=https://github.com/libremesh/libremesh.github.io/\nPKG_SOURCE_PROTO:=git\nPKG_SOURCE_VERSION:=HEAD\nPKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh English documentation\n  DEPENDS:=+$(PKG_NAME)-minimal\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)-it\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh Italian documentation\n  DEPENDS:=+$(PKG_NAME)-minimal\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)-minimal\n  CATEGORY:=LibreMesh\n  TITLE:=LibreMesh minimal documentation\n  MAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n  URL:=https://libremesh.org/docs/\n  SUBMENU:=Offline Documentation\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nOffline English documentation for LibreMesh firmware\nendef\n\ndefine Package/$(PKG_NAME)-it/description\nOffline Italian documentation for LibreMesh firmware\nendef\n\ndefine Package/$(PKG_NAME)-minimal/description\nMinimal offline English documentation for LibreMesh firmware containing\njust a commented example of the main config file.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/www/docs/\n\t$(INSTALL_DATA) $(PKG_BUILD_DIR)/docs/en_*.txt $(1)/www/docs/\n\t@ln -s /www/docs $(1)/docs\nendef\n\ndefine Package/$(PKG_NAME)-it/install\n\t$(INSTALL_DIR) $(1)/www/docs/\n\t$(INSTALL_DATA) $(PKG_BUILD_DIR)/docs/it_*.txt $(1)/www/docs/\n\t@ln -s /www/docs $(1)/docs\nendef\n\ndefine Package/$(PKG_NAME)-minimal/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t@ln -s /www/docs $(1)/docs\nendef\n\n$(eval $(call BuildPackage,lime-docs))\n$(eval $(call BuildPackage,lime-docs-it))\n$(eval $(call BuildPackage,lime-docs-minimal))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-ground-routing.html",
"lang": "en",
"title": "lime-hwd-ground-routing",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-hwd-ground-routing\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=Manage 802.1q VLANs for ground routing\n  CATEGORY:=LibreMesh\n  URL:=https://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis package helps you to configure setups involving ground routing.\n\tWith ground routing we mean setups having LibreMesh on a router\n\twhich is connected via cable(s), eventually through a switch,\n\tto some wireless routers running the original firmware in WDS\n\t(transparent bridge) Ap/Sta mode. Configuring ground routing you\n\twill set up an interface with a different vlan or on a different\n\tswitch port for each connected device in WDS mode.\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./build/files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-openwrt-wan.html",
"lang": "en",
"title": "lime-hwd-openwrt-wan",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-hwd-openwrt-wan\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=Respect openwrt wan interface as default\n  CATEGORY:=LibreMesh\n  URL:=http://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua +lime-proto-wan\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./build/files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-hwd-usbradio.html",
"lang": "en",
"title": "lime-hwd-usbradio",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-hwd-usbradio\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=LiMe hardware detection usb radio support\n  CATEGORY:=LibreMesh\n  URL:=http://libremesh.org\n  DEPENDS:=+lime-system +lua +libuci-lua +luci-lib-nixio\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@cp -r ./src ./build\n\t@sed -i '/^\\s*--!.*/d' build/*.lua\n\t@sed -i '/^\\s*#\\[Doc\\]/d' build/*.sh\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t@mkdir -p $(1)/usr/lib/lua/lime/hwd || true\n\t@mkdir -p $(1)/etc/hotplug.d/usb || true\n\t$(CP) ./build/usbradio.lua $(1)/usr/lib/lua/lime/hwd/usbradio.lua\n\t$(CP) ./build/hotplug-hook.sh $(1)/etc/hotplug.d/usb/60-lime-hwd-usbradio\n\t@chmod +x $(1)/usr/lib/lua/lime/hwd/usbradio.lua\n\t@chmod +x $(1)/etc/hotplug.d/usb/60-lime-hwd-usbradio\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-anygw.html",
"lang": "en",
"title": "lime-proto-anygw",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-proto-anygw\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe anygw proto support\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+dnsmasq-dhcpv6 +kmod-nft-bridge +libuci-lua \\\n\t\t+lime-system +lua +kmod-macvlan \\\n\t\t+shared-state +shared-state-dnsmasq_leases \\\n\t\t+luci-lib-nixio +firewall4\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./build/files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-babeld.html",
"lang": "en",
"title": "lime-proto-babeld",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe babeld proto support\n  DEPENDS:=+babeld +lime-system +luci-lib-nixio\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-batadv.html",
"lang": "en",
"title": "lime-proto-batadv",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe batman-adv proto support\n  DEPENDS:=+lime-system +lua +libuci-lua +kmod-batman-adv +luci-lib-nixio\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-bgp.html",
"lang": "en",
"title": "lime-proto-bgp",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-proto-bgp\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=LiMe BGP proto support\n  CATEGORY:=LibreMesh\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@diveni.re&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+bird1-ipv4 +bird1-ipv6 +lime-system +lua +luci-lib-nixio\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./build/files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-bmx6.html",
"lang": "en",
"title": "lime-proto-bmx6",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe Bmx6 proto support\n  DEPENDS:=+bmx6 +bmx6-json +bmx6-sms +bmx6-table +bmx6-uci-config \\\n           +iptables +lime-system +lua +libuci-lua \\\n           +kmod-ebtables-ipv6 +ebtables +luci-lib-jsonc \\\n\t   +luci-lib-nixio\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-bmx7.html",
"lang": "en",
"title": "lime-proto-bmx7",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe Bmx7 proto support\n  DEPENDS:=+bmx7 +bmx7-json +bmx7-sms +bmx7-table +bmx7-uci-config +bmx7-tun \\\n           +lime-system +lua +libuci-lua +luci-lib-nixio +kmod-nft-bridge \\\n           +firewall4\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr.html",
"lang": "en",
"title": "lime-proto-olsr",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-proto-olsr\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR proto support (IPv4)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=leonaard &lt;leone@inventati.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +olsrd +olsrd-mod-jsoninfo +kmod-ipip +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@cp -r ./src ./build\n\t@sed -i '/^--!.*/d' build/*.lua\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t@mkdir -p $(1)/usr/lib/lua/lime/proto || true\n\t$(CP) ./build/olsr.lua $(1)/usr/lib/lua/lime/proto/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr2.html",
"lang": "en",
"title": "lime-proto-olsr2",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2016 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-proto-olsr2\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR2 proto support (IPv4/v6)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gabriel &lt;gabriel@autistici.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +oonf-olsrd2 +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@cp -r ./src ./build\n\t@sed -i '/^--!.*/d' build/*.lua\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t@mkdir -p $(1)/usr/lib/lua/lime/proto || true\n\t$(CP) ./build/olsr2.lua $(1)/usr/lib/lua/lime/proto/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-olsr6.html",
"lang": "en",
"title": "lime-proto-olsr6",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-proto-olsr6\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LiMe OLSR proto support (IPv6)\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=leonaard &lt;leone@inventati.org&gt;\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +libuci-lua +lime-system +olsrd +olsrd-mod-jsoninfo +luci-lib-ip \\\n\t\t +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@cp -r ./src ./build\n\t@sed -i '/^--!.*/d' build/*.lua\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t@mkdir -p $(1)/usr/lib/lua/lime/proto || true\n\t$(CP) ./build/olsr6.lua $(1)/usr/lib/lua/lime/proto/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-proto-wan.html",
"lang": "en",
"title": "lime-proto-wan",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=LiMe wan proto support\n  DEPENDS:=+firewall4 +lime-system +lua +libuci-lua\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-report.html",
"lang": "en",
"title": "lime-report",
"content": "\nMakefile\n\n\n\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-report\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=LibreMesh status report utility\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Ilario Gelmetti &lt;iochesonome@gmail.com&gt;\n\tURL:=https://libremesh.org\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tOutputs a report about the status and the main configuration\n\tof a LibreMesh node, useful for debugging and issues reporting.\nendef\n\ndefine Package/$(PKG_NAME)/config\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/bin/\n\t$(INSTALL_BIN) ./files/lime-report.sh $(1)/bin/lime-report\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-smart-wifi.html",
"lang": "en",
"title": "lime-smart-wifi",
"content": "\nMakefile\n\n\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=lime\n  CATEGORY:=LibreMesh\n  TITLE:=Configure wifi mesh and ap hardware based\n  DEPENDS:=+lime-system\n  MAINTAINER:=Paul Spooren &lt;paul@spooren.de&gt;\n  VERSION:=$(if $(PKG_VERSION),$(PKG_VERSION),$(PKG_SRC_VERSION))\n  PKGARCH:=all\n  URL:=https://github.com/libremesh/lime-packages/\nendef\n\n\ndefine Package/$(PKG_NAME)/description\n\tAutomatically configure wifi mesh and ap based on existing radios\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-system.html",
"lang": "en",
"title": "lime-system",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=lime-system\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\nLIME_ID:=LiMe\nLIME_RELEASE:=$(shell git branch | sed -n '/\\* /s///p')\nLIME_CODENAME:=development\nLIME_BRANCH:=$(shell git branch | sed -n '/\\* /s///p')\nLIME_REVISION:=$(shell git log -n 1 --pretty=%h)\nLIME_BUILDDATE:=$(shell date +%Y%m%d_%H%M)\nLIME_DESCRIPTION:=$(LIME_ID) $(LIME_RELEASE) $(LIME_CODENAME) ($(LIME_BRANCH) rev. $(LIME_REVISION) $(LIME_BUILDDATE))\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=libremesh system files\n  CATEGORY:=LibreMesh\n  MAINTAINER:=Gioacchino Mazzurco &lt;gio@eigenlab.org&gt;\n  URL:=http://libremesh.org\n  DEPENDS:=+firewall4 +libiwinfo-lua +lua +libuci-lua +luci-lib-ip +luci-lib-nixio +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tBasic system files for LiMe node\nendef\n\ndefine Build/Compile\nendef\n\nLIME_VERSION_SED:=$(SED)   's,%LIME_ID%,$(LIME_ID),g' \\\n\t\t\t-e 's,%LIME_RELEASE%,$(LIME_RELEASE),g' \\\n\t\t\t-e 's,%LIME_CODENAME%,$(LIME_CODENAME),g' \\\n\t\t\t-e 's,%LIME_BRANCH%,$(LIME_BRANCH),g' \\\n\t\t\t-e 's,%LIME_REVISION%,$(LIME_REVISION),g' \\\n\t\t\t-e 's,%LIME_BUILDDATE%,$(LIME_BUILDDATE),g' \\\n\t\t\t-e 's,%LIME_DESCRIPTION%,$(LIME_DESCRIPTION),g'\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/etc/hotplug.d/lime-config/\n\t$(LIME_VERSION_SED) \\\n\t\t$(1)/etc/lime_release \\\n\t\t$(1)/etc/profile.d/10-lime-banner.sh\nendef\n\ndefine Package/$(PKG_NAME)/postinst\n#!/bin/sh\n#[ -n \"$${IPKG_INSTROOT}\" ] || /etc/init.d/firewall-lime enable || true\n# Add here stuff to be executed after installation at image creation time\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lime-webui.html",
"lang": "en",
"title": "lime-webui",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=lime-webui\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)/Default\n  SECTION:=net\n  CATEGORY:=LibreMesh\n  MAINTAINER:=p4u &lt;pau@dabax.net&gt;\n  URL:=http://libremesh.org\nendef\n\ndefine Package/$(PKG_NAME)\n  $(call Package/$(PKG_NAME)/Default)\n  TITLE:=libremesh web user interface based on LUCI\n  MENU:=1\n  PKGARCH:=all\n  DEPENDS:=+luci-base +lime-system \\\n\t+luci-mod-status +uhttpd +libiwinfo-lua \\\n\t+luci-theme-bootstrap +luci-i18n-base-en \\\n\t+LIMEWEBUI_ES:luci-i18n-base-es +LIMEWEBUI_PT:luci-i18n-base-pt \\\n\t+LIMEWEBUI_DE:luci-i18n-base-de +luci-compat +luci-lib-nixio\nendef\n\ndefine Package/$(PKG_NAME)/config\nconfig LIMEWEBUI_ES\n        bool \"Spanish translation support\"\n        depends on PACKAGE_$(PKG_NAME)\n        default n\n        help\n          Spanish translation support for $(PKG_NAME)\nconfig LIMEWEBUI_PT\n        bool \"Portuguese translation support\"\n        depends on PACKAGE_$(PKG_NAME)\n        default n\n        help\n          Portuguese translation support for $(PKG_NAME)\nconfig LIMEWEBUI_DE\n        bool \"Deutsch translation support\"\n        depends on PACKAGE_$(PKG_NAME)\n        default n\n        help\n          Deutsch translation support for $(PKG_NAME)\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tWeb interface for LibreMesh\nendef\n\ndefine Build/Prepare\n\t@rm -rf $(PKG_BUILD_DIR) || true\n\tmkdir -p $(PKG_BUILD_DIR)\n\t./build_i18n.sh\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\n\t@cp -r ./luasrc/. $(PKG_BUILD_DIR)/\n\t@find $(PKG_BUILD_DIR)/ -type f -name \"*.lua\" -exec sed -i '/^--!.*/d' {} \\;\n\t./clean_i18n.sh\nendef\n\nifneq ($(strip $(CONFIG_LIMEWEBUI_ES)),)\n  TRANSLATIONS+=es\nendif\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/usr/lib/lua/luci/model/cbi/lime\n\t$(INSTALL_DIR) $(1)/usr/lib/lua/luci/controller\n\t$(INSTALL_DIR) $(1)/usr/lib/lua/luci/view/lime\n\t$(INSTALL_DIR) $(1)/www/luci-static/resources/lime\n\t$(INSTALL_DIR) $(1)/usr/lib/lua/luci/i18n\n\t$(INSTALL_DIR) $(1)/etc/profile.d\n\t$(CP) $(PKG_BUILD_DIR)/model/* $(1)/usr/lib/lua/luci/model/cbi/lime/\n\t$(CP) $(PKG_BUILD_DIR)/controller/* $(1)/usr/lib/lua/luci/controller/\n\t$(CP) $(PKG_BUILD_DIR)/view/* $(1)/usr/lib/lua/luci/view/lime/\n\t$(CP) $(PKG_BUILD_DIR)/static/* $(1)/www/luci-static/resources/lime/\n\t$(foreach TR, $(TRANSLATIONS), $(CP) $(PKG_BUILD_DIR)/i18n/*.$(TR).lmo $(1)/usr/lib/lua/luci/i18n/ )\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/lua-argparse.html",
"lang": "en",
"title": "lua-argparse",
"content": "\nReadme\n\n\n\n\n# lua-argparse\n\n\nArgparse is a feature-rich command line parser for Lua inspired by argparse for Python.\n\n\nArgparse supports positional arguments, options, flags, optional arguments, subcommands and more. Argparse automatically generates usage, help and error messages.\n\n\nThis package is installed argparse in openwrt and is mainly used in [safe-upgrade](https://github.com/libremesh/lime-packages/blob/master/packages/safe-upgrade/files/usr/sbin/safe-upgrade). It is really useful and you can see the complete documentation in [its own repository](https://github.com/mpeterv/argparse/).\n\n\n## Contents\n\n\n\n\n[Example](https://github.com/mpeterv/argparse/#example)\n\n\n[Installation](https://github.com/mpeterv/argparse/#installation)\n\n\n[Tutorial](https://github.com/mpeterv/argparse/#tutorial)\n\n\n[Testing](https://github.com/mpeterv/argparse/#testing)\n\n\n[License](https://github.com/mpeterv/argparse/#license)\n\n\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Santiago Piccinini\n#\n# This is free software, licensed under the GNU General Public License v2.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=lua-argparse\nPKG_VERSION:=0.6.0\nPKG_RELEASE:=2\nPKG_MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\nPKG_LICENSE:=MIT\n\nPKG_SOURCE:=argparse-$(PKG_VERSION).tar.gz\nPKG_SOURCE_URL:=https://github.com/mpeterv/argparse/archive/$(PKG_VERSION)/\nPKG_HASH:=0eddda29d591536bc7310b99ce7acc3e5e00557f18d6e63ab10d56683e8952f1\nPKG_BUILD_DIR:=$(BUILD_DIR)/argparse-$(PKG_VERSION)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/lua-argparse\n\tSUBMENU:=Lua\n\tSECTION:=lang\n\tCATEGORY:=Languages\n\tTITLE:=Lua argparse\n\tURL:=https://github.com/mpeterv/argparse\n\tDEPENDS:=+lua\n\tPKGARCH:=all\n\tMAINTAINER:=Peter Melnichenko &lt;mpeterval@gmail.com&gt;\nendef\n\ndefine Package/lua-argparse/description\n\tArgparse is a feature-rich command line parser for Lua inspired by argparse for Python.\n\tArgparse supports positional arguments, options, flags, optional arguments,\n\tsubcommands and more. Argparse automatically generates usage, help and error messages.\nendef\n\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/lua-argparse/install\n\t$(INSTALL_DIR) $(1)/usr/lib/lua\n\t$(INSTALL_DATA) $(PKG_BUILD_DIR)/src/argparse.lua $(1)/usr/lib/lua\nendef\n\n$(eval $(call BuildPackage,lua-argparse))\n\n\n\n"}
,{
"location": "/packages/luci-app-batman-adv.html",
"lang": "en",
"title": "luci-app-batman-adv",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=luci-app-batman-adv\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=luci\n  CATEGORY:=LuCI\n  TITLE:=LuCI - Lua Configuration Interface\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  SUBMENU:=3. Applications\n  TITLE:=B.A.T.M.A.N.-Adv status module\n  DEPENDS:= +libc +kmod-batman-adv +luci-lib-jquery-1-4 +luci-lib-dracula +batctl\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/luci-app-openairview.html",
"lang": "en",
"title": "luci-app-openairview",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=luci-app-openairview\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=luci\n  CATEGORY:=LuCI\n  TITLE:=LuCI - Lua Configuration Interface\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  SUBMENU:=3. Applications\n  TITLE:=Visualize the spectrum and wifi neighbours\n  DEPENDS:= +libc +fft-eval +luci-lib-jquery-1-4 +luci-lib-jquery-flot-0-8 +luci-lib-json \\\n\t    +luci-compat\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nIncludes a realtime spectral scan for ath9k chipsets,\na realtime plot of wifi neighbours signal (think \"iw station dump\")\nand a site survey of wifi networks, with signal plots (think \"iw scan\")\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/luci-lib-jquery-flot.html",
"lang": "en",
"title": "luci-lib-jquery-flot",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=luci-lib-jquery-flot-0-8\nPKG_VERSION:=0.8.1\nPKG_RELEASE:=1\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=luci\n  CATEGORY:=LuCI\n  TITLE:=LuCI - Lua Configuration Interface\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  SUBMENU:=8. Libraries\n  TITLE:=jQuery library - Flot chart plotting\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/www/luci-static/resources/jquery/\n\t$(CP) ./files/* $(1)/www/luci-static/resources/jquery/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/luci-mod-status.html",
"lang": "en",
"title": "luci-mod-status",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=luci-mod-status\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=admin\n  CATEGORY:=LuCI\n  SUBMENU:=2. Modules\n  TITLE:=LuCI status - some read-only info without login\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +uhttpd +luci-base +libiwinfo-lua +luci-lib-jquery-1-4 +luci-lib-jquery-flot-0-8 +luci-lib-json \\\n\t    +luci-lib-nixio +luci-compat\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\nMinimal and simple web app to view some status info:\n * a realtime plot of wifi neighbours signal (think \"iw station dump\")\n * batman-adv mesh nodes (if luci-app-batman-adv is installed)\n * bmx6 mesh nodes (if luci-app-bmx6 is installed)\n * ethernet switch ports status\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/miniserver-client.html",
"lang": "en",
"title": "miniserver-client",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=miniserver-client\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) metapackage\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= \\\n            +prometheus-node-push-influx \\\n            +prometheus-node-exporter-lua \\\n            +prometheus-node-exporter-lua-openwrt \\\n            +prometheus-node-exporter-lua-wifi_stations \\\n            +prometheus-node-exporter-lua-wifi-stations-extra \\\n            +prometheus-node-exporter-lua-wifi-survey \\\n            +prometheus-node-exporter-lua-wifi-params \\\n            +prometheus-node-exporter-lua-location-latlon \\\n\nendef\n\ndefine Package/$(PKG_NAME)/description\n  This metapackage installs and configures a statistics collector system\n  that gathers data on the node and pushes to a local \"miniserver\"\n  reachable on the local network.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/pirania.html",
"lang": "en",
"title": "pirania",
"content": "\nReadme\n\n\n\n\n![PIRANHA](https://i.imgur.com/kHWUNOu.png)\n\n\n## Voucher and Captive Portal solution for community networks\n\n\nThis tool allows an administrator to manage a voucher system to get through the gateway.\n\n\nIt could be used in a community that wants to share an Internet connection and for that the user&#8217;s pay a fraction each, but needs the payment from everyone. So the vouchers allows to control the payments via the control of the access to Internet.\n\n\nAdditionally vouchers usage can be deactivated in order to use\nthe captive portal only to show valuable information for network\nvisitors.\n## Features\n\n\nThis are the currently implemented features:\n  * Runs directly from the OpenWRT/LEDE router: no need for extra hardware\n  * Integrates it&#8217;s administration with Ubus and LiMe App\n  * Has a command-line interface for listing, creating and removing vouchers\n  * Voucher database is shared among nodes in the network\n  * Portal \"splash\" screen content (logo, title, main text, etc)\n  is distributed accross the network.\n  * Can be used without vouchers.\n## Prerequisites\n\n\nThis software assumes that will be running on a OpenWRT/LEDE distribution (because uses uci for config). Needs ip6tables-mod-nat and ipset packages installed.\n\n\n## Install\n\n\n\n\nadd the libremesh software feed to opkg\n\n\nopkg install pirania\n\n\n\n\n## Command line\n\n\nepoc is expressed in [Unix Timestamp](https://en.wikipedia.org/wiki/Unix_time) format. You can use a tool like [unixtimestamp.com](https://www.unixtimestamp.com/) to get a date in the correct format.\n\n\n# captive_portal status\n\n\nPrints the status of pirania: enabled or disabled.\n\n\n# captive_portal start\n\n\nStarts pirania. If you want pirania to automatically turn on use: uci set pirania.base_config.enabled=1 &amp;&amp; uci commit\n\n\n# captive_portal stop\n\n\nStops pirania. If you want pirania to stop automatically turning on use: uci set pirania.base_config.enabled=0 &amp;&amp; uci commit\n\n\n## voucher list\n\n\nLists all the vouchers.\n\n\n# voucher list_active\n\n\nList all the vouchers that are currently active.\n\n\n# voucher add\n\n\nCreate a new voucher. This voucher will start deactivated and not bonded to any device.\n\n\nParams:\n- name: a name used to identify the voucher\n- duration-m: duration of the voucher in minutes. If no value is provided a permanent voucher will be created.\nThe duration takes affect when the voucher is activated.\n- activation-deadline: after this date (unix time) the voucher cannot be activated.\n\n\nTo create a 60 minutes voucher\nEx.: voucher add my-voucher-name 60\n\n\n# voucher activate\n\n\nActivates a voucher, asigning a mac address. After the activation, the device with this MAC\naddress will have internet access.\n\n\nParams:\n- secret-code: the password of the voucher.\n- mac: the MAC address of the device that will have access.\n\n\nEx: voucher activate mysecret 00:11:22:33:44:55\n\n\n# voucher deactivate\n\n\nDeactivate a voucher of the specified ID.\n\n\nParams:\n- ID: a string used to identify the voucher.\n\n\nEx: voucher deactivate Qzt3WF\n\n\n# voucher remove_voucher\n\n\nInvalidates a voucher by changing it&#8217;s expire date to 0.\n\n\nParams:\n- voucher: voucher secret\n\n\nEx.: voucher remove_voucher voucher-secret\n\n\n# voucher is_mac_authorized\n\n\nCheck if a specific mac address is authorized.\n\n\nParams:\n- mac: a device&#8217;s mac address\n\n\nEx.: voucher is_mac_authorized d0:82:7a:49:e2:37\n\n\n# voucher renew_voucher\n\n\nChange the expiration date of a voucher.\n\n\nParams:\n- id: the voucher ID.\n- expiration-date: the new date (unix time) that the voucher will expire\n\n\nEx.: voucher renew_voucher Qzt3WF 1619126965\n\n\n# How it works\n\n\nIt uses iptables rules to filter inbound connections outside the mesh network.\n\n\n## General overview of file hierarchy and function\n\n\n\nfiles/\n    /etc/config/pirania is the UCI config\n    /etc/pirania/vouchers/ (default path) contains the database of vouchers\n    /etc/init.d/pirania-uhttpd starts a uhttpd on port 59080 that replies any request with a redirect towards a preset URL\n\n    /usr/lib/lua/voucher/ contains lua libraries used by /usr/bin/voucher\n    /usr/bin/voucher is a CLI to manage the db (has functions list, list_active, show_authorized_macs, add, activate, deactivate and is_mac_authorized)\n    /usr/bin/captive-portal sets up iptables rules to capture traffic\n\n    /usr/libexec/rpcd/pirania ubus pirania API (this is used by the web frontend)\n    /usr/share/rpcd/acl.d/pirania.json ACL for the ubus pirania API\n\n    /etc/shared-state/publishers/shared-state-publish_vouchers inserts into shared-state the local voucher db\n    /etc/shared-state/hooks/pirania/generate_vouchers bring updated or new vouchers from the shared-state database into the local voucher db\n\n    /usr/lib/lua/read_for_access contains the library used by\n    /usr/lib/lua/portal to manage access  in read for access mode (aka without vouchers)\n\n\n\n## CLI usage example\n\n\n\n$ voucher list\n$ voucher add san-notebook 60\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t1\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t1\n$ voucher list_active\n$ voucher activate ZRJUXN 00:11:22:33:44:55\nVoucher activated!\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\t00:11:22:33:44:55\tWed Sep  8 23:47:40 2021\t60\tThu Sep  9 00:48:33 2021\t2\n\n$ voucher list_active\nQ3TJZS\tsan-notebook\tZRJUXN\t00:11:22:33:44:55\tWed Sep  8 23:47:40 2021\t60\tThu Sep  9 00:48:33 2021\t2\n\n$ voucher deactivate Q3TJZS\nok\n$ voucher list_active\n$ voucher list\nQ3TJZS\tsan-notebook\tZRJUXN\txx:xx:xx:xx:xx:xx\tWed Sep  8 23:47:40 2021\t60\t           -            \t3\n\n\n\n## ubus API\n\n\n\n\nenable() &#8594; calls to captive-portal start and enables it in the config\n\n\ndisable() &#8594; calls to captive-portal stop and disables it in the config\n\n\nshow_url() &#8594; return config pirania.base_config.portal_url\n\n\nchange_url(url) &#8594; change config pirania.base_config.portal_url\n\n\n&#8230;&#8203;\n\n\n\n\n## Under the hood\n\n\n# Trafic capture\n/usr/bin/captive-portal sets up iptables rules to capture traffic.\nIt creates a set of rules that apply to 3 allowed \"ipsets\":\n* pirania-auth-macs: authorized macs go into this rule. starts empty.\n* pirania-allowlist-ipv4: with the members of the allowlist in the config file (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n* pirania-allowlist-ipv6: same as ipv4 but for ipv6\n\n\nRules:\n* DNS packets, that are not from the allowed ipsets, are redirected to our own captive portal DNS at 59053\n* HTTP packets, that are not from the allowed ipsets, are redirected to our own captive portal HTTP at 59080\n* packets from the allowed ipsets are allowed\n* the rest of the packets are rejeted (drop and send an error to the client)\n\n\n# HTTP flow\n\n\n/etc/init.d/pirania-uhttpd starts a HTTP server (uhttpd) on port 59080 that replies any request with a redirect towards a preset URL.\n - In case that voucher usage is activated: pirania.base_config.url_auth.\n - Otherwise: pirania.read_for_access.url_portal\nThis is performed by the lua script /www/pirania-redirect/redirect. As both url are in the allowlist ip range (http://thisnode.info/portal/ by default) then the \"normal\" HTTP server listening in port 80 will answer after the redirect.\n\n\nSo the flow when using vouchers is:\n* navigate to a non allowed ip: for example http://orignal.org/baz/?foo=bar\n* get redirected with a 302 where you can put a voucher code to enter: http://thisnode.info/cgi-bin/portal/auth.html?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* submiting the form should perform a GET to http://thisnode.info/cgi-bin/pirania/preactivate_voucher?voucher=secretcode&amp;prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* The preactivate_voucher script does two different depending on javascript support:\n    * If nojs=true then the voucher is activated with the client MAC (taken from the ARP table with its IP) and the voucher code. If the activation succeeds it redirects to url_authenticated.\n    * If nojs=false there is a check if the voucher code would be valid (there is an unused and valid voucher with that code). If the voucher would be valid then a redirect to the portal INFO page(pirania.base_config.url_info) is performed with the voucher code as param url. The portal info shows the updated information of the community and there is a time that you have to wait to be able to continue (This is done with JS). When the timer reaches 0 you can click in continue. This redirects now to http://thisnode.info/cgi-bin/pirania/activate_voucher?voucher=secretcode. The activate_voucher script does the voucher activation. then it redirects to url_authenticated. If the code fails it will redirect to http://thisnode.info/cgi-bin/portal/fail.html that is identical to auth.html but with an error message.\n\n\nThe flow without using vouchers (read for access mode) is:\n* navigate to a non allowed ip: for example http://orignal.org/baz/?foo=bar\n* get redirected with a 302 to: http://thisnode.info/cgi-bin/portal/read_for_access.html?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\n* Once there if the client has js support then a countdown of 15 seconds is shown and when it reaches 0 the user can click on continue, which sends a GET request to http://minodo.info/cgi-bin/pirania/authorize_mac?prev=http%3A%2F%2Foriginal.org%2Fbaz%2F%3Ffoo%3Dbar\nwhich will trigger a redirection to prev url.\n* If there the client has no js support, then the buttonis enabled inmediately, and after clicking in continue a redirection to url_authenticated is triggered.\n\n\n\n\n\n\nMakefile\n\n\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=pirania\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SUBMENU:=Captive Portals\n  SECTION:=net\n  CATEGORY:=Network\n  MAINTAINER:=Luandro &lt;luandro@gmail.com&gt;\n  TITLE:=Captive portal with vouchers.\n  DEPENDS:=+ip6tables-mod-nat +ipset +shared-state-pirania +uhttpd-mod-lua +lime-system +luci-lib-jsonc \\\n\t   +liblucihttp-lua +luci-lib-nixio +libubus-lua +libuci-lua\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tCaptive Portal for routers that want to share their Internet connection via vouchers.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-location-latlon.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-location-latlon",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=prometheus-node-exporter-lua-location-latlon\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (location_latlon collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw +libubus-lua\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-params.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-params",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=prometheus-node-exporter-lua-wifi-params\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_params collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-stations-extra.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-stations-extra",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=prometheus-node-exporter-lua-wifi-stations-extra\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_stations_extra collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +libuci-lua +iw +libubus-lua\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-exporter-lua-wifi-survey.html",
"lang": "en",
"title": "prometheus-node-exporter-lua-wifi-survey",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=prometheus-node-exporter-lua-wifi-survey\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Prometheus node exporter (wifi_survey collector)\n  PKGARCH:=all\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  DEPENDS:= +lua +iw +libubus-lua\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/prometheus-node-push-influx.html",
"lang": "en",
"title": "prometheus-node-push-influx",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2021 Gui Iribarren\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=prometheus-node-push-influx\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) pushes influx line protocol over TCP\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\n  DEPENDS:= +lua +libuci-lua +luasocket +libubus-lua\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Collects the same statistics as prometheus-node-exporter-lua,\n  but instead of exposing them as a server, with prometheus syntax,\n  pushes them using influx line protocol over TCP\n  to a remote VictoriaMetrics server.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/random-numgen.html",
"lang": "en",
"title": "random-numgen",
"content": "\nMakefile\n\n\n\n# This is free software, licensed under the GNU General Public License v3.\n# See /LICENSES for more information.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=random-numgen\nPKG_VERSION:=0.1\nPKG_RELEASE:=1\n\nPKG_MAINTAINER:=Ilario Gelmetti &lt;ilario@sindominio.net&gt;\nPKG_LICENSE:=GPL-3.0-or-later\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/random-numgen\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Generates a random number 0-65535\n  PKGARCH:=all\nendef\n\ndefine Package/random-numgen/description\n  Offers an alternative to the RANDOM shell variable,\n  generating a pseudo-random integer number from 0 to\n  65535 using /dev/urandom as a random data source.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Build/Configure\nendef\n\ndefine Package/random-numgen/install\n\t$(INSTALL_DIR) $(1)/usr/bin\n\t$(INSTALL_BIN) ./files/random-numgen $(1)/usr/bin/\nendef\n\n$(eval $(call BuildPackage,random-numgen))\n\n\n\n"}
,{
"location": "/packages/safe-reboot.html",
"lang": "en",
"title": "safe-reboot",
"content": "\nMakefile\n\n\n\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=safe-reboot\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) falls back to a last-known-good config after an ill-fated reboot.\n  MAINTAINER:=Gui Iribarren &lt;gui@altermundi.net&gt;\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  When you run $(PKG_NAME) specifying a grace time, it makes a backup of /etc at that point,\n  and after the grace time reboots the system. At the next boot, it waits again for a timeout;\n  if you can't login and delete the backup, it will restore it and reboot.\n  This mechanism makes it possible to run $(PKG_NAME), try risky operations (like restarting\n  the network), and if something goes wrong, just wait for the fallback timeout.\n  Even more, you can make actual changes to /etc config and reboot. If it comes back up right,\n  you can login and delete the backup. If something went wrong with the new /etc, just wait\n  for the revert timeout.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/usr/sbin\n\t$(INSTALL_BIN) ./files/usr/sbin/safe-reboot $(1)/usr/sbin/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/safe-upgrade.html",
"lang": "en",
"title": "safe-upgrade",
"content": "\nReadme\n\n\n\n\n# safe-upgrade\n\n\nsafe-upgrade provides safe firmware upgrades using two partitions and a confirmation step. Only the\nLibreRouter is supported.\n\n\n## Usage\n\n\nTo perform an upgrade you have to:\n1. run safe-upgrade upgrade xxx-sysupgrade.bin to install a firmware to the non current (other) partition.\n2. reboot\n3. validate that the new firmware is good. If it is not good just reboot.\n4. safe-upgrade confirm before a defined period of time (the default is 10 minutes). If you don&#8217;t\nconfirm (or you can&#8217;t because the configuration is not good) in this period of time then\nan automatic reboot will be performed and the device will boot the last confirmed partition.\n\n\n# help\n\n\nrun safe-upgade --help to get the list of commands available. Use safe-upgrade CMD --help to\nget the help for the command CMD.\n\n\n# show\n\n\nsafe-upgrade show shows the current status of the system partitions.\n\n\n# upgrade\n\n\nsafe-upgrade upgrade [-n][--reboot-safety-timeout=600][--disable-reboot-safety] xxx-sysupgrade.bin\n\n\nsafe-upgrade upgrade performs the first step of the upgrade procedure.\nOptions\n* use -n or --do-not-preserve-config to not save the current configuration to the new partition.\n* use --disable-reboot-safety`to disable the automatic reboot safety mechanism.\n* use `--reboot-safety-timeout=600 to set the timeout in seconds of the automatic reboot safety mechanism.\n\n\nAfter running this command to test the new image you have to restart the device.\n\n\n# confirm\n\n\nsafe-upgrade confirm confirms the current partition as the new default partition. Use after booting\ninto a new partition after running safe-upgrade upgrade or safe-upgrade test-other-partition.\n\n\n# bootstrap (advanced)\n\n\nUse safe-upgrade bootstrap to install the safe-upgrade mechanism in the bootloader. Run this only\nif safe-upgrade exits with 'safe-upgrade is not installed, aborting.'\n\n\n## How safe-upgrade works\n\n\nsafe-upgrade works installing the following script into the bootloader (in pseudo-code):\n\n\n\nif testing_partition != None:\n    boot_partition = testing_partition\n    testing_partition = None # a testing partition will boot just once\nelse:\n    boot_partition = stable_partition\n\nboot(boot_partition)\n\n\n\nstable_partition allowed values are 1 or 2. testing_partition allowed values are None, 1 or 2, with\nNone as starting value.\n\n\nLets suppose an initial state of stable_partiton = 1 and testing_partition = None.\nIn this configuration the bootloader always boots the partition 1.\nWhen safe-upgade upgrade is performed the testing_partition value changes to the other partition, the non stable\npartition, in this case it will be the partition 2. When the device is rebooted the bootloader script will\nset the testing_partition to None again but will boot the partition 2. If this partition is confirmed\nthen the stable_partition will change from 1 to 2.\nSo safe-upgrade works having always a stable partition value of a good partition with a temporary\nstate (testing_partition != None) that only lasts for one boot.\n\n\nThe bootloader script and the variables stable_partition and testing_partition are stored in the flash\nu-boot environment.\n\n\n\n\n\n\nMakefile\n\n\n\n#\n# Copyright (C) 2019 Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=safe-upgrade\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides safe firmware upgrades using two partitions.\n  MAINTAINER:=Santiago Piccinini &lt;spiccinini@altermundi.net&gt;\n  DEPENDS:=+lua-argparse +luci-lib-jsonc +lime-system\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\t$(PKG_NAME) provides safe firmware upgrades using two partitions and a\n\tconfirmation step. See $(PKG_NAME)/Readme.md for more details.\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/usr/sbin\n\t$(INSTALL_BIN) ./files/usr/sbin/safe-upgrade $(1)/usr/sbin/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n\n\n\n"}
,{
"location": "/packages/shared-state-async.html",
"lang": "en",
"title": "shared-state-async",
"content": "== Readme\n____\n\n.Build with debugging enabled\n--------------------------------------------------------------------------------\nmake package/feeds/libremesh/shared-state-async/clean package/feeds/libremesh/shared-state-async/compile -j$(nproc) CONFIG_DEBUG=y\n--------------------------------------------------------------------------------\n\n.Copy on verde e blu\n--------------------------------------------------------------------------------\nscp -O bin/packages/mips_24kc/libremesh/shared-state-async_*.ipk root@[fe80::ea94:f6ff:fe68:3364%usbe1]:/tmp/\nscp -O bin/packages/mips_24kc/libremesh/shared-state-async_*.ipk root@[fe80::6670:2ff:fede:c51e%usbe1]:/tmp/\n--------------------------------------------------------------------------------\n\n.Install\n--------------------------------------------------------------------------------\nopkg install --force-reinstall /tmp/shared-state-async_*.ipk\n--------------------------------------------------------------------------------\n\n.Run with gdb\n--------------------------------------------------------------------------------\ngdbserver :9000 shared-state-async\n--------------------------------------------------------------------------------\n\n.Attach with remote OpenWrt gdb\n--------------------------------------------------------------------------------\nscripts/remote-gdb [fe80::ea94:f6ff:fe68:3364%usbe0]:9000 ./build_dir/target-mips_24kc_musl/shared-state-async-*/shared-state-async\n\nscripts/remote-gdb [fe80::6670:2ff:fede:c51e%usbe0]:9000 ./build_dir/target-mips_24kc_musl/shared-state-async-*/shared-state-async\nbreak shared-state-async.cc:55\nrun listen\nrun sync bat-hosts fe80::ea94:f6ff:fe68:3364%br-lan\nrun sync bat-hosts fe80::d237:45ff:fefc:3cdd%br-lan\n--------------------------------------------------------------------------------\n\n.Stressing the server\n--------------------------------------------------------------------------------\nwhile Builds/build-lime-shared-state-async-node-Desktop-Debug/shared-state-async sync bat-hosts fe80::ea94:f6ff:fe68:3364%usbeth0; do echo ------------------------------------------------------------------- ;done\n\nwhile shared-state-async sync bat-hosts fe80::ea94:f6ff:fe68:3364%br-lan; do echo ------------------------------------------------------------------- ;done\n\n--------------------------------------------------------------------------------\n\n\n=== Interesting Readings\n\nhttps://openwrt.org/docs/guide-developer/gdb\n\nVoCore2: Develop for OpenWrt on Qt Creator\nhttps://vonger.cn/?p=14657\n____\n\n== Makefile\n[,make]\n----\n# Shared State\n#\n# Copyright (C) 2023-2024  Gioacchino Mazzurco \n# Copyright (c) 2023  Javier Jorge \n# Copyright (c) 2023  Instituto Nacional de Tecnología Industrial\n# Copyright (C) 2023-2024  Asociación Civil Altermundi \n#\n# This program is free software: you can redistribute it and/or modify it under\n# the terms of the GNU Affero General Public License as published by the\n# Free Software Foundation, version 3.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.\n# See the GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see \n#\n# SPDX-License-Identifier: AGPL-3.0-only\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-async\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\nPKG_SOURCE_PROTO:=git\nPKG_SOURCE_URL:=https://github.com/libremesh/shared-state-async.git\nPKG_SOURCE_VERSION:=575a4774a5fa38e6d5549e08e217f6299dc16742\nPKG_MAINTAINER:=Asociación Civil Altermundi \nPKG_LICENSE:=AGPL-3.0\n\nHOST_BUILD_PREFIX:=$(STAGING_DIR_HOST)\n\ninclude $(INCLUDE_DIR)/package.mk\ninclude $(INCLUDE_DIR)/cmake.mk\ninclude $(INCLUDE_DIR)/host-build.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=shared-state C++ async re-implementation\n\tCATEGORY:=LibreMesh\n\t# TODO: Statically linking libstdcpp instead of depending on it and then\n\t# stripping unused symbols might reduce space usage, until this is the\n\t# only package to use it\n\tDEPENDS:=+libstdcpp\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tshared-state re-written in C++20 and corotuines to handle information exchange between network nodes more efficiently.\nendef\n\n# Otherwise OpenWrt's CPPFLAGS are ignored\nTARGET_CFLAGS += $(TARGET_CPPFLAGS)\n\nCMAKE_OPTIONS += -DCMAKE_VERBOSE_MAKEFILE=ON\n\n# Disable Cpptrace as it depends on zlib and doesn't seems to work anyway on\n# OpenWrt even with CONFIG_DEBUG=y it prints out\n# Stack trace (most recent call first):\n# #0 0x00000000\n# #1 0x00000000\n# #2 0x00000000\nCMAKE_OPTIONS += -DSS_CPPTRACE_STACKTRACE=OFF\n\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/usr/bin\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/shared-state-async $(1)/usr/bin/\n\t$(CP) ./files/* $(1)/\n\n\t# TODO: Remove this line once discovery is reimplemented in C++\n\t$(CP) ../shared-state/files/usr/bin/shared-state-get_candidates_neigh $(1)/usr/bin/shared-state-async-discover\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-babeld_hosts.html",
"lang": "en",
"title": "shared-state-babeld_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-babeld_hosts\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=babeld-hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+hotplug-initd-services +random-numgen \\\n\t\t+lua +luci-lib-jsonc shared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tMaintain a shared babel_id-hostname translation table, provides also\n\tbab2host and host2bab commands.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-bat_hosts.html",
"lang": "en",
"title": "shared-state-bat_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019-2024 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-bat_hosts\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=bat-hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Asociación Civil Altermundi \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libubus-lua +lime-system +lua +luci-lib-jsonc +luci-lib-nixio \\\n\t         shared-state-async\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize bat-hosts beween nodes, provides also mac2bat and bat2mac.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_hosts.html",
"lang": "en",
"title": "shared-state-dnsmasq_hosts",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-dnsmasq_hosts\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=dnsmasq hosts module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc +random-numgen \\\n\t\tshared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize dnsmasq hosts beween nodes.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_leases.html",
"lang": "en",
"title": "shared-state-dnsmasq_leases",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-dnsmasq_leases\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=dnsmasq leases module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lua +random-numgen \\\n\t\t+luci-lib-jsonc shared-state +shared-state-dnsmasq_hosts \\\n\t\t+luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize dnsmasq leases beween nodes.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-dnsmasq_servers.html",
"lang": "en",
"title": "shared-state-dnsmasq_servers",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2020 Gui iribarren \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-dnsmasq_servers\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Mesh DNS module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gui iribarren \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc +random-numgen \\\n\t\tshared-state\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tGenerates 'server' lines in dnsmasq config, so that domain zones published\n\tby other nodes in the mesh can be resolved transparently.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-network_nodes.html",
"lang": "en",
"title": "shared-state-network_nodes",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2020-2023 Asociacion Civil Altermundi \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n  CATEGORY:=LibreMesh\n  TITLE:=$(PKG_NAME) provides data-type for network nodes marked as reliable by user\n  MAINTAINER:=Asociacion Civil Altermundi \n  DEPENDS:=+shared-state +shared-state-nodes_and_links +lime-system +luci-lib-jsonc \\\n\t   +libubus-lua +random-numgen\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tProvides data-type for network nodes marked as reliable by user via lime-app\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-node_info.html",
"lang": "en",
"title": "shared-state-node_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2023 Javier Jorge \n# Copyright (C) 2023  Asociación Civil Altermundi \n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude ../../libremesh.mk\n\ndefine Package/$(PKG_NAME)\n\tSECTION:=lime\n\tCATEGORY:=LibreMesh\n\tTITLE:=Node information module for shared-state\n\tMAINTAINER:= Javier \n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system +ubus-lime-location shared-state   \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize node information beween nodes.\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-nodes_and_links.html",
"lang": "en",
"title": "shared-state-nodes_and_links",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-nodes_and_links\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=nodes_and_links module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Nicolas Pace \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc +random-numgen \\\n\t\tshared-state +ubus-lime-location\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize nodes_and_links beween nodes.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-persist.html",
"lang": "en",
"title": "shared-state-persist",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Marcos Gutierrez \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-persist\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Persists shared-state in usb devices\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Marcos Gutierrez \n\tURL:=http://libremesh.org\n\tDEPENDS:=+block-mount +kmod-usb-storage +kmod-fs-vfat\\\n\t\tshared-state +luci-lib-nixio\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tDetects block-mount storage devices and configures shared-state so that status persists on those devices.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-pirania.html",
"lang": "en",
"title": "shared-state-pirania",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Marcos Gutierrez \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-pirania\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Pirania vaucher module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Marcos Gutierrez \n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc +random-numgen \\\n\t\tshared-state +pirania\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize valid pirania vauchers beween nodes\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state-wifi_links_info.html",
"lang": "en",
"title": "shared-state-wifi_links_info",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state-wifi_links_info\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=WiFI links information module for shared-state\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=\n\tURL:=http://libremesh.org\n\tDEPENDS:=+lua +luci-lib-jsonc +ubus-lime-utils \\\n\t\t+lime-system +libiwinfo-lua shared-state \n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tSyncronize links information beween nodes.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/shared-state.html",
"lang": "en",
"title": "shared-state",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019-2020 Gioacchino Mazzurco \n#\n# This is free software, licensed under the GNU Affero General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=shared-state\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n\tTITLE:=Very minimal state sharing betwen nodes\n\tCATEGORY:=LibreMesh\n\tMAINTAINER:=Gioacchino Mazzurco \n\tURL:=http://libremesh.org\n\tDEPENDS:=+libuci-lua +lime-system +lua +luci-lib-jsonc +luci-lib-nixio \\\n\t\t+iputils-ping +uclient-fetch +random-numgen\n\tPKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tLiMe style minimal unsecured CRDT to share light state between nodes\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/soporteremoto.html",
"lang": "en",
"title": "soporteremoto",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=soporteremoto\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) allows AlterMundi to provide remote support through SSH root access\n  MAINTAINER:=Gui Iribarren \n  DEPENDS:= +zerotier +auto-usb-wwan +kmod-ath9k-htc +ath9k-htc-firmware\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Installs auto-usb-wwan to provide a zero-configuration WWAN via USB dongle\n  zerotier to provide VPN transport\n  and installs a predefined set of ssh authorized_keys of AlterMundi members\n  that will be granted root access\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/sprunge.html",
"lang": "en",
"title": "sprunge",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2014 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=sprunge\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  TITLE:=sprunge.us and ix.io pastebin\n  SECTION:=utils\n  CATEGORY:=Utilities\n  MAINTAINER:=Ilario Gelmetti \n  URL:=http://ix.io\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tsprunge.us and ix.io command line pastebin\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t@mkdir -p $(1)/usr/bin/ || true\n\t$(INSTALL_BIN) ./src/sprunge.sh $(1)/usr/bin/sprunge\n\t$(INSTALL_BIN) ./src/ix.sh $(1)/usr/bin/ix\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-batman-adv.html",
"lang": "en",
"title": "ubus-lime-batman-adv",
"content": "== Readme\n____\n# B.A.T.M.A.N-Adv ubus status module\n\n|Path     |Procedure     |Signature     |Description\n|---  |---  |---  |---\n|luci2.batman-adv |interfaces     |{}     | Get the list of intefaces\n|luci2.batman-adv |gateways     |{}     | Get the list of gateways\n|luci2.batman-adv |originators    |{}       | Ghet the list of originators\n\n## Examples\n\n### ubus -v list luci2.batman-adv\n```\n'luci2.batman-adv' @1ae4c0f9\n  \"interfaces\":{}\n  \"gateways\":{}\n  \"originators\":{}\n```\n\n\n### ubus call luci2.batman-adv interfaces\n```json\n{\n  \"interfaces\": [\n    \"dummy0\",\n    \"wlan1-adhoc_177\",\n    \"wlan0-adhoc_177\"\n  ]\n}\n```\n### ubus call luci2.batman-adv gateways\n```json\n{\n  \"gateways\": [\n\n  ]\n}\n\n```\n\n### ubus call luci2.batman-adv originators\n```json\n{\n  \"originators\": [\n    [\n      \"QL-fc6565_dummy0\",\n      960,\n      99,\n      \"marisa_wlan1-adhoc\",\n      \"wlan1-adhoc_177\"\n    ],\n        [\n      \"QL-fc6543_dummy0\",\n      410,\n      93,\n      \"marisa_wlan1-adhoc\",\n      \"wlan1-adhoc_177\"\n    ]\n  ]\n}\n\n```\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-batman-adv\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=B.A.T.M.A.N.-Adv ubus status module\n  DEPENDS:= +batctl +lua +libubox-lua +libubus-lua +luci-lib-nixio +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-bmx6.html",
"lang": "en",
"title": "ubus-lime-bmx6",
"content": "== Readme\n____\n# BMX6 ubus status module\n\n|Path     |Procedure     |Signature     |Description\n|---  |---  |---  |---\n|luci2.bmx6 |links     |{\"host\": STRING }     | Get the list of bmx6 links by interface. \"host\" can be an IPv4, IPV6, or device name. If \"host\" is not defined the query is local.\n|luci2.bmx6 |status     |{}     | Get the current status of bmx6 and the list of interfaces\n|luci2.bmx6 |tunnels    |{}       | Get the list Of bmx6 tunnes\n|luci2.bmx6 |originators|{}       | Get the list of bmx6 originators\n|luci2.bmx6 |topology   |{}       | It performs a topological exploration between the nodes and returns the links status. Generate a cache in / tmp and the result can be different for each call (depends on the size of the network)\n\n## Examples\n\n### ubus -v list luci2.bmx6\n```\n'luci2.bmx6' @91edd5ea\n  \"links\":{\"host\":\"String\"}\n  \"status\":{}\n  \"topology\":{}\n  \"tunnels\":{}\n  \"originators\":{}\n\n```\n\n### ubus call luci2.bmx6 links\nLocal bmx links query\n```json\n{\n  \"links\": {\n\t\"wlan1-adhoc_13\": [\n\t  {\n\t\t\"routes\": 67,\n\t\t\"viaDev\": \"wlan1-adhoc_13\",\n\t\t\"name\": \"Flmb-222\",\n\t\t\"bestTxLink\": 1,\n\t\t\"txRate\": 95,\n\t\t\"wantsOgms\": 1,\n\t\t\"rxRate\": 100,\n\t\t\"llocalIp\": \"fe80::a2f3:c1ff:fe86:3211\"\n\t  }\n\t]\n  }\n}\n\n```\n\n### ubus call luci2.bmx6 links '{\"host\":\"Flmb-222\"}'\nRemote bmx links query\n```json\n{\n  \"links\": {\n\t\"wlan0-adhoc_13\": [\n\t  {\n\t\t\"routes\": 6,\n\t\t\"viaDev\": \"wlan0-adhoc_13\",\n\t\t\"name\": \"Flmb-1123\",\n\t\t\"bestTxLink\": 1,\n\t\t\"txRate\": 100,\n\t\t\"wantsOgms\": 1,\n\t\t\"rxRate\": 75,\n\t\t\"llocalIp\": \"fe80::16cc:20ff:fe75:b527\"\n\t  }\n\t],\n\t\"wlan1-adhoc_13\": [\n\t  {\n\t\t\"routes\": 1,\n\t\t\"viaDev\": \"wlan1-adhoc_13\",\n\t\t\"name\": \"Flmb-nys\",\n\t\t\"bestTxLink\": 1,\n\t\t\"txRate\": 100,\n\t\t\"wantsOgms\": 1,\n\t\t\"rxRate\": 87,\n\t\t\"llocalIp\": \"fe80::4321:b3ff:fe87:2fbd\"\n\t  },\n\t  {\n\t\t\"routes\": 1,\n\t\t\"viaDev\": \"wlan1-adhoc_13\",\n\t\t\"name\": \"Flmb-rr\",\n\t\t\"bestTxLink\": 1,\n\t\t\"txRate\": 97,\n\t\t\"wantsOgms\": 1,\n\t\t\"rxRate\": 100,\n\t\t\"llocalIp\": \"fe80::a2f3:c1ff:fe46:2837\"\n\t  }\n\t]\n  }\n}\n```\n\n### ubus call luci2.bmx6 status\n```json\n{\n  \"status\": {\n\t\"compat\": 16,\n\t\"primaryIp\": \"fd66:66:66:8:4321:b3ff:fe87:2fbb\",\n\t\"tun6Address\": \"2801:1e8:2::bb2f:8700\\/64\",\n\t\"name\": \"natisofi\",\n\t\"nodes\": 68,\n\t\"cpu\": \"1.8\",\n\t\"version\": \"BMX6-0.1-alpha\",\n\t\"uptime\": \"0:01:10:20\",\n\t\"tun4Address\": \"10.5.0.85\\/21\"\n  },\n  \"interfaces\": [\n\t{\n\t  \"state\": \"UP\",\n\t  \"type\": \"ethernet\",\n\t  \"primary\": 1,\n\t  \"globalIp\": \"fd66:66:66:8:4321:b3ff:fe87:2fbb\\/64\",\n\t  \"devName\": \"br-lan\",\n\t  \"rateMin\": \"1000M\",\n\t  \"rateMax\": \"1000M\",\n\t  \"llocalIp\": \"fe80::4321:b3ff:fe87:2fbb\\/64\"\n\t},\n\t{\n\t  \"state\": \"UP\",\n\t  \"type\": \"ethernet\",\n\t  \"primary\": 0,\n\t  \"globalIp\": \"fd66:66:66:12:4321:b3ff:fe87:2fbc\\/64\",\n\t  \"devName\": \"wlan0-adhoc_13\",\n\t  \"rateMin\": \"54000\",\n\t  \"rateMax\": \"54000\",\n\t  \"llocalIp\": \"fe80::4321:b3ff:fe87:2fbc\\/64\"\n\t},\n\t{\n\t  \"state\": \"UP\",\n\t  \"type\": \"ethernet\",\n\t  \"primary\": 0,\n\t  \"globalIp\": \"fd66:66:66:10:4321:b3ff:fe87:2fbd\\/64\",\n\t  \"devName\": \"wlan1-adhoc_13\",\n\t  \"rateMin\": \"54000\",\n\t  \"rateMax\": \"54000\",\n\t  \"llocalIp\": \"fe80::4321:b3ff:fe87:2fbd\\/64\"\n\t}\n  ]\n}\n\n\n```\n\n### ubus call luci2.bmx6 tunnels\n```json\n{\n  \"tunnels\": [\n\t{\n\t  \"advBw\": \"128G\",\n\t  \"tunName\": \"---\",\n\t  \"remoteTunIp\": \"fd66:66:66:11:16cc:20ff:fead:b0e5\",\n\t  \"advBwVal\": \"128G\",\n\t  \"localTunIp\": \"fd66:66:66:ff00:16cc:20ff:fead:b0e5\",\n\t  \"tunMtc\": \"19968\",\n\t  \"tunMtcVal\": \"19968\",\n\t  \"remoteName\": \"si-34432\",\n\t  \"src\": \"---\",\n\t  \"srcIngress\": \"0.0.0.0\\/0\",\n\t  \"table\": 254,\n\t  \"tunId\": 0,\n\t  \"rating\": 100,\n\t  \"minBw\": \"960\",\n\t  \"advNet\": \"10.5.0.0\\/21\",\n\t  \"pathMtc\": \"20187\",\n\t  \"ipMtc\": 1024,\n\t  \"id\": \".\",\n\t  \"hyst\": 20,\n\t  \"max\": 128,\n\t  \"bOSP\": 1,\n\t  \"advType\": \"unspecified\",\n\t  \"aOLP\": 1,\n\t  \"min\": 8,\n\t  \"tunRoute\": \"10.5.0.0\\/21\",\n\t  \"name\": \"clouds\",\n\t  \"net\": \"10.0.0.0\\/8\",\n\t  \"type\": \"---\",\n\t  \"tunIn\": \"---\",\n\t  \"pref\": 32766,\n\t  \"remoteId\": \"si-fliasosa.3CB2499257998B07FD0A\"\n\n\t},....\n\n  ]\n}\n\n```\n\n\n### ubus call luci2.bmx6 topology\n```json\n{\n  \"topology\": [\n\t{\n\t  \"name\": \"QL-02\",\n\t  \"links\": [\n\t\t{\n\t\t  \"txRate\": 81,\n\t\t  \"rxRate\": 100,\n\t\t  \"name\": \"QL-01\"\n\t\t},\n\t\t{\n\t\t  \"txRate\": 34,\n\t\t  \"rxRate\": 58,\n\t\t  \"name\": \"QL-03\"\n\t\t}\n\t  ]\n\t},\n\t{\n\t  \"name\": \"QL-01\",\n\t  \"links\": [\n\t\t{\n\t\t  \"txRate\": 100,\n\t\t  \"rxRate\": 81,\n\t\t  \"name\": \"QL-02\"\n\t\t}\n\t  ]\n\t},\n\t{\n\t  \"name\": \"QL-03\",\n\t  \"links\": [\n\t\t{\n\t\t  \"txRate\": 42,\n\t\t  \"rxRate\": 38,\n\t\t  \"name\": \"QL-02\"\n\t\t}\n\t  ]\n\t}\n  ]\n}\n\n```\n\n\n## ubus call luci2.bmx6 originators\n```json\n{\n  \"originators\": [\n\t{\n\t  \"orig\": {\n\t\t\"primaryIp\": \"fd66:66:66:8:c24a:ff:fefc:6565\",\n\t\t\"viaDev\": \"wlan1-adhoc_13\",\n\t\t\"routes\": 1,\n\t\t\"viaIp\": \"fe80::a2f3:c1ff:fe86:3211\",\n\t\t\"blocked\": 0,\n\t\t\"metric\": \"20496\",\n\t\t\"lastDesc\": 1482,\n\t\t\"lastRef\": 2,\n\t\t\"name\": \"QL-fc6565\"\n\t  },\n\t  \"name\": \"QL-fc6565\",\n\t  \"desc\": {\n\t\t\"descSha\": \"D21D09A516F1BC612D772624A1BAC5DB4719A5C0\",\n\t\t\"DESC_ADV\": {\n\t\t  \"capabilities\": \"0\",\n\t\t  \"ogmSqnMin\": 49678,\n\t\t  \"extensions\": [\n\t\t\t{\n\t\t\t  \"METRIC_EXTENSION\": [\n\t\t\t\t{\n\t\t\t\t  \"pathRegression\": 1,\n\t\t\t\t  \"rxExpNumerator\": 64,\n\t\t\t\t  \"metricAlgo\": 16,\n\t\t\t\t  \"txExpNumerator\": 128,\n\t\t\t\t  \"flags\": \"0\",\n\t\t\t\t  \"pathLounge\": 1,\n\t\t\t\t  \"rxExpDivisor\": 64,\n\t\t\t\t  \"fmetric_u16_min\": \"1\",\n\t\t\t\t  \"txExpDivisor\": 64,\n\t\t\t\t  \"hopPenalty\": 0,\n\t\t\t\t  \"pathWindow\": 5\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t},\n\t\t\t{\n\t\t\t  \"HNA6_EXTENSION\": [\n\t\t\t\t{\n\t\t\t\t  \"address\": \"fd66:66:66:8:c24a:ff:fefc:6565\",\n\t\t\t\t  \"prefixlen\": 128\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  \"address\": \"fd66:66:66:12:c24a:ff:fefc:6566\",\n\t\t\t\t  \"prefixlen\": 128\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  \"address\": \"fd66:66:66:10:c24a:ff:fefc:6567\",\n\t\t\t\t  \"prefixlen\": 128\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t  \"address\": \"fd66:66:66:ff00:c24a:ff:fefc:6565\",\n\t\t\t\t  \"prefixlen\": 128\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t},\n\t\t\t{\n\t\t\t  \"TUN6_EXTENSION\": [\n\t\t\t\t{\n\t\t\t\t  \"localIp\": \"fd66:66:66:ff00:c24a:ff:fefc:6565\"\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t},\n\t\t\t{\n\t\t\t  \"TUN4IN6_NET_EXTENSION\": [\n\t\t\t\t{\n\t\t\t\t  \"bandwidth\": \"128G\",\n\t\t\t\t  \"network\": \"10.5.0.0\",\n\t\t\t\t  \"rtype\": 0,\n\t\t\t\t  \"tun6Id\": 0,\n\t\t\t\t  \"networklen\": 21\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t},\n\t\t\t{\n\t\t\t  \"TUN6IN6_NET_EXTENSION\": [\n\t\t\t\t{\n\t\t\t\t  \"bandwidth\": \"128G\",\n\t\t\t\t  \"network\": \"2801:1e8:2::\",\n\t\t\t\t  \"rtype\":\n\t\t\t\t   0,\n\t\t\t\t  \"tun6Id\": 0,\n\t\t\t\t  \"networklen\": 64\n\t\t\t\t}\n\t\t\t  ]\n\t\t\t}\n\t\t  ],\n\t\t  \"descSqn\": 53926,\n\t\t  \"globalId\": \"QL-fc6565.85AD82FB2B5E1CE2460D\",\n\t\t  \"txInterval\": 500,\n\t\t  \"revision\": \"4016\",\n\t\t  \"transmitterIid4x\": 5,\n\t\t  \"ogmSqnRange\": 7345\n\t\t},\n\t\t\"blocked\": 0\n\t  }\n\t},\n\t{\n\t  ....\n\t}\n  ]\n}\n\n```\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-bmx6\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  SUBMENU:=3. Applications\n  MAINTAINER:=Marcos Gutierrez \n  TITLE:=BMX6 ubus status module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +luci-app-bmx6 +luci-lib-nixio +luci-lib-jsonc +lime-system\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-groundrouting.html",
"lang": "en",
"title": "ubus-lime-groundrouting",
"content": "== Readme\n____\n# Ubus mod - Lime ground routing\n\nGSOC 2018 - Marcos Gutierrez\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-grondrouting\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Libremap ubus ground routing module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci-lua +lime-system +luci-lib-jsonc +luci-compat\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-location.html",
"lang": "en",
"title": "ubus-lime-location",
"content": "== Readme\n____\n# Location (Libremap) ubus status module\n\n| Path           | Procedure | Signature                | Description          |\n| -------------- | --------- | ------------------------ | -------------------- |\n| luci2.location | get       | {}                       | Get current location |\n| luci2.location | set       | {lon:STRING, lat:STRING} | Set new location     |\n\n## Examples\n\n### ubus -v list luci2.location\n\nIf the location was never established, return the location of the community\n\n```\n'luci2.location' @8a28f605\n\t\"set\":{\"lon\":\"String\",\"lat\":\"String\"}\n\t\"get\":{}\n```\n\n### ubus call luci2.location get\n\n```json\n{\n  \"location\": {\n    \"lon\": \"-64.43289933588837\",\n    \"lat\": \"-31.800211834083036\"\n  },\n  \"default\": true // (is community location or custom location)\n}\n```\n\n### ubus call luci2.location set '{\"lon\":\"-64.13289933588837\",\"lat\":\"-31.000211834083036\"}'\n\n```json\n{\n  \"lon\": \"-64.13289933588837\",\n  \"lat\": \"-31.000211834083036\"\n}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-location\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Libremap ubus status module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci-lua +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-metrics.html",
"lang": "en",
"title": "ubus-lime-metrics",
"content": "== Makefile\n[,make]\n----\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-metrics\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Santiago Piccinini \n  SUBMENU:=3. Applications\n  TITLE:=Metrics ubus module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +luci-lib-jsonc +netperf +mtr +check-internet +lime-system +ubus-lime-utils\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-openairview.html",
"lang": "en",
"title": "ubus-lime-openairview",
"content": "== Readme\n____\n# Openairview (Align / Spectrun scan) ubus status module\n\n| Path             | Procedure          | Signature                          | Description                                                                                                                                |\n| ---------------- | ------------------ | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| lime-openairview | spectral_scan      | {device:STRING, spectrum:STRING}   | Get the fft-eval scan results. specturm can by: 2ghz, 5ghz or current. \"current\" means scan only the channel on which the interface is set. This will work only if fft-eval is installed |\n\n## Examples\n\n### ubus -v list lime-openairview\n\nIf the openairview was never established, return the openairview of the community\n\n```\n'lime-openairview' @4bd5f4f5\n\t\"spectral_scan\":{\"device\":\"String\",\"spectrum\":\"String\"}\n```\n____\n\n== Makefile\n[,make]\n----\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-openairview\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Marcos Gutierrez \n  SUBMENU:=3. Applications\n  TITLE:=Openairview ubus module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libiwinfo-lua +luci-lib-nixio +luci-lib-jsonc +lime-system\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-lime-utils.html",
"lang": "en",
"title": "ubus-lime-utils",
"content": "== Readme\n____\n# Utils Libremesh ubus status module\n\nProcedure | Signature | Description |\n --------------- | ----------------|------------------ |\n| get_cloud_nodes | {} | Get cloud nodes |\n| safe_reboot     | { \"action\": \"status\" } | Get safe-reboot status|\n| safe_reboot     | { \"action\": \"start\", \"value\": {\"wait\": TIME, \"fallback\": TIME } } | After backing up /overlay/upper/etc, wait for TIME (value.wait) before reboot (Default: 5min). After boot, wait for TIME (value.fallback) before reverting /overlay/upper/etc from backup found in /overlay/upper/.etc.last-good.tgz (Default: 10min). _TIME examples: 1hour 60min 60m 3600sec 3600 (all of them are equivalent)_ |\n| safe_reboot     | { \"action\": \"now\" }                                               | Do not make /overlay/upper/etc backup; instead check that there's one already in place (/overlay/upper/.etc.last-good.tgz,then reboot and wait for fallback timeout.                                                                                                                                                                  |\n| safe_reboot     | { \"action\": \"cancel\" }| Remove /overlay/upper/.etc.last-good.tgz (useful after a successful reboot)|\n| safe_reboot     | { \"action\": \"discard\" } | Restores /overlay/upper/etc from /overlay/upper/.etc.last-good.tgz (useful to discard changes)|\n| get_community_settings     | {} | Returns custom values for the community, this is useful for limeApp|\n| get_config     | {} | Returns wifi and netwrok configuration from /etc/config/lime |\n| set_notes     | {\"text\":\"String\"} | Write notes to /etc/banner |\n| get_notes     | {} | Get notes fom /etc/banner |\n| change_config     | {\"name\":\"String\",\"ip\":\"String\"} | Change the name of the router and the ipv4 |\n| get_node_status | {} | Returns the state of the node (uptime, ipv4 and ipv6 addresses, most active link, etc) |\n\n## Examples\n\n### ubus -v list lime-utils\n\n```\n'lime-utils' @fb3a2ef0\n\t\"get_cloud_nodes\":{\"no_params\":\"Integer\"}\n\t\"get_community_settings\":{\"no_params\":\"Integer\"}\n\t\"get_config\":{\"no_params\":\"Integer\"}\n\t\"set_notes\":{\"text\":\"String\"}\n\t\"change_config\":{\"name\":\"String\",\"ip\":\"String\"}\n\t\"safe_reboot\":{\"action\":\"String\",\"value\":\"String\"}\n\t\"get_notes\":{\"no_params\":\"Integer\"}\n\t\"get_node_status\":{\"no_params\":\"Integer\"}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-lime-utils\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=ubus\n  CATEGORY:=Ubus\n  MAINTAINER:=Santiago Piccinini \n  SUBMENU:=3. Applications\n  TITLE:=LIbremesh ubus utils module\n  DEPENDS:= +lua +libubox-lua +libubus-lua +libuci +lime-system +libiwinfo-lua +cgi-io +rpcd-mod-file \\\n\t    +luci-lib-jsonc\n\n  PKGARCH:=all\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/ubus-tmate.html",
"lang": "en",
"title": "ubus-tmate",
"content": "== Readme\n____\n# tmate ubus module\n\nThis session uses the /tmp/tmate.sock socket.\nIf you want to locally connect to the running session you can run `tmate -S /tmp/tmate.sock attach`.\n\n| Path  | Procedure     |  Description                     |\n| ----- | ------------- | -------------------------------- |\n| tmate | get_session   | Get the current session (if any) |\n| tmate | open_session  | Open a new session               |\n| tmate | close_session | Close the current session        |\n\n### ubus -v list tmate\n\n```\n'tmate' @5df79c49\n\t\"get_session\":{\"no_params\":\"Integer\"}\n\t\"open_session\":{\"no_params\":\"Integer\"}\n\t\"close_session\":{\"no_params\":\"Integer\"}\n```\n____\n\n== Makefile\n[,make]\n----\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=ubus-tmate\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=net\n  CATEGORY:=Network\n  SUBMENU:=SSH\n  MAINTAINER:=Nicolas Pace \n  TITLE:=tmate.io ubus bindings\n  DEPENDS:=+tmate +lime-system +luci-lib-jsonc\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tIt allows to create remote sessions over tmate through ubus.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/watchping.html",
"lang": "en",
"title": "watchping",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=watchping\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=Ping a host and run customizable actions (hooks) on timeout/recovery.\n  MAINTAINER:=Gui Iribarren \n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n  Checks reachability of given host(s) through particular interface(s) (e.g. 8.8.8.8 on WAN).\n  Action hooks are run from /etc/watchping/*.d/\n  Configuration is done in /etc/config/system.\nendef\n\ndefine Build/Compile\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}
,{
"location": "/packages/wifi-unstuck-wa.html",
"lang": "en",
"title": "wifi-unstuck-wa",
"content": "== Makefile\n[,make]\n----\n#\n# Copyright (C) 2019 Santiago Piccinini \n#\n# This is free software, licensed under the GNU General Public License v3.\n#\n\ninclude $(TOPDIR)/rules.mk\n\nGIT_COMMIT_DATE:=$(shell git log -n 1 --pretty=%ad --date=short . )\nGIT_COMMIT_TSTAMP:=$(shell git log -n 1 --pretty=%at . )\n\nPKG_NAME:=wifi-unstuck-wa\nPKG_VERSION=$(GIT_COMMIT_DATE)-$(GIT_COMMIT_TSTAMP)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/$(PKG_NAME)\n  SECTION:=utils\n  CATEGORY:=Utilities\n  TITLE:=$(PKG_NAME) provides workarounds for radio bugs\n  MAINTAINER:=Santiago Piccinini \n  DEPENDS:=+lua +lime-system +luci-lib-nixio\n  PKGARCH:=all\nendef\n\ndefine Package/$(PKG_NAME)/description\n\tThis $(PKG_NAME) is a collection of workarounds to radio and/or\n\tradio driver bugs.\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\n\t@rm -rf ./build || true\n\t@mkdir ./build\n\t$(CP) ./files ./build\n\t$(FIND) ./build -name '*.sh' -exec sed -i '/^\\s*#\\[Doc\\]/d' {} +\n\t$(FIND) ./build -name '*.lua' -exec sed -i '/^\\s*--!.*/d' {} +\nendef\n\n\ndefine Package/$(PKG_NAME)/install\n\t$(INSTALL_DIR) $(1)/\n\t$(CP) ./files/* $(1)/\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n----\n"}

]}
  